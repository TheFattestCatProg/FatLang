Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BINOP
    CLASS
    COMMENT
    FOR
    FUNCMOD
    INTERFACE
    LCOMMENT
    MACRO
    NUM
    TYPEID
    TYPESTR

Grammar

Rule 0     S' -> code
Rule 1     code -> package-declaration import-declarations main-code
Rule 2     package-declaration -> PACKAGE ID ;
Rule 3     package-declaration -> PACKAGE package-complicated-name ;
Rule 4     package-complicated-name -> package-complicated-name : ID
Rule 5     package-complicated-name -> ID : ID
Rule 6     package-complicated-name -> <empty>
Rule 7     import-declarations -> import-declarations import-declaration
Rule 8     import-declarations -> import-declaration
Rule 9     import-declarations -> <empty>
Rule 10    import-declaration -> USING ID ;
Rule 11    import-declaration -> USING package-complicated-name ;
Rule 12    main-code -> main-code main
Rule 13    main-code -> <empty>
Rule 14    main -> ID ID function-arguments function-body
Rule 15    main -> complicated-type ID function-arguments function-body
Rule 16    main -> ID ID template-declaration function-arguments function-body
Rule 17    main -> complicated-type ID template-declaration function-arguments function-body
Rule 18    main -> UNSAFE ID ID function-arguments function-body
Rule 19    main -> UNSAFE complicated-type ID function-arguments function-body
Rule 20    main -> UNSAFE ID ID template-declaration function-arguments function-body
Rule 21    main -> UNSAFE complicated-type ID template-declaration function-arguments function-body
Rule 22    main -> ID OPERATOR binary-operator function-arguments function-body
Rule 23    main -> ID OPERATOR TIMES function-arguments function-body
Rule 24    main -> ID OPERATOR LS function-arguments function-body
Rule 25    main -> ID OPERATOR GR function-arguments function-body
Rule 26    main -> complicated-type OPERATOR binary-operator function-arguments function-body
Rule 27    main -> complicated-type OPERATOR TIMES function-arguments function-body
Rule 28    main -> complicated-type OPERATOR LS function-arguments function-body
Rule 29    main -> complicated-type OPERATOR GR function-arguments function-body
Rule 30    main -> ID OPERATOR binary-operator template-declaration function-arguments function-body
Rule 31    main -> ID OPERATOR TIMES template-declaration function-arguments function-body
Rule 32    main -> ID OPERATOR LS template-declaration function-arguments function-body
Rule 33    main -> ID OPERATOR GR template-declaration function-arguments function-body
Rule 34    main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body
Rule 35    main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body
Rule 36    main -> complicated-type OPERATOR LS template-declaration function-arguments function-body
Rule 37    main -> complicated-type OPERATOR GR template-declaration function-arguments function-body
Rule 38    main -> ID OPERATOR binary-operator ( ) function-arguments function-body
Rule 39    main -> ID OPERATOR ! ( ) function-arguments function-body
Rule 40    main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body
Rule 41    main -> complicated-type OPERATOR ! ( ) function-arguments function-body
Rule 42    main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body
Rule 43    main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body
Rule 44    main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body
Rule 45    main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body
Rule 46    main -> ID OPERATOR ( ) function-arguments function-body
Rule 47    main -> complicated-type OPERATOR ( ) function-arguments function-body
Rule 48    main -> OPERATOR ~ function-arguments function-body
Rule 49    main -> OPERATOR ~ template-declaration function-arguments function-body
Rule 50    main -> ID OPERATOR [ ] function-arguments function-body
Rule 51    main -> complicated-type OPERATOR [ ] function-arguments function-body
Rule 52    main -> ID OPERATOR [ ] template-declaration function-arguments function-body
Rule 53    main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body
Rule 54    main -> ID OPERATOR = function-arguments function-body
Rule 55    main -> complicated-type OPERATOR = function-arguments function-body
Rule 56    main -> ID OPERATOR = template-declaration function-arguments function-body
Rule 57    main -> complicated-type OPERATOR = template-declaration function-arguments function-body
Rule 58    main -> EXTERN ID ID function-arguments ;
Rule 59    main -> EXTERN complicated-type ID function-arguments ;
Rule 60    complicated-type -> package-complicated-name : ID
Rule 61    complicated-type -> package-complicated-name : ID TIMES
Rule 62    complicated-type -> package-complicated-name : ID complicated-pointer-level
Rule 63    complicated-type -> ID : ID
Rule 64    complicated-type -> ID : ID TIMES
Rule 65    complicated-type -> ID : ID complicated-pointer-level
Rule 66    complicated-type -> package-complicated-name : ID template-declaration
Rule 67    complicated-type -> package-complicated-name : ID template-declaration TIMES
Rule 68    complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level
Rule 69    complicated-type -> ID : ID template-declaration
Rule 70    complicated-type -> ID : ID template-declaration TIMES
Rule 71    complicated-type -> ID : ID template-declaration complicated-pointer-level
Rule 72    complicated-type -> ID template-declaration
Rule 73    complicated-type -> ID template-declaration TIMES
Rule 74    complicated-type -> ID template-declaration complicated-pointer-level
Rule 75    complicated-type -> ID TIMES
Rule 76    complicated-type -> ID complicated-pointer-level
Rule 77    complicated-type -> CONST complicated-type
Rule 78    complicated-pointer-level -> complicated-pointer-level TIMES
Rule 79    complicated-pointer-level -> TIMES TIMES
Rule 80    template-declaration -> LS template-declaration-body GR
Rule 81    template-declaration -> LS ID GR
Rule 82    template-declaration -> LS complicated-type GR
Rule 83    template-declaration-body -> template-declaration-body , ID
Rule 84    template-declaration-body -> template-declaration-body , complicated-type
Rule 85    template-declaration-body -> ID , ID
Rule 86    template-declaration-body -> complicated-type , ID
Rule 87    template-declaration-body -> ID , complicated-type
Rule 88    template-declaration-body -> complicated-type , complicated-type
Rule 89    function-arguments -> ( function-arguments-body )
Rule 90    function-arguments -> ( )
Rule 91    function-arguments-body -> function-arguments-body , function-argument
Rule 92    function-arguments-body -> function-argument
Rule 93    function-argument -> ID ID
Rule 94    function-argument -> complicated-type ID
Rule 95    function-body -> { expression-lines }
Rule 96    main -> STRUCT ID struct-body
Rule 97    main -> STRUCT ID template-declaration struct-body
Rule 98    main -> EXTERN STRUCT ID struct-body
Rule 99    struct-body -> { struct-fields }
Rule 100   struct-fields -> struct-fields struct-field
Rule 101   struct-fields -> <empty>
Rule 102   struct-field -> ID ID ;
Rule 103   struct-field -> complicated-type ID ;
Rule 104   struct-field -> ACCMOD ID ID ;
Rule 105   struct-field -> ACCMOD complicated-type ID ;
Rule 106   expression-lines -> expression-lines expression-line
Rule 107   expression-lines -> expression-line
Rule 108   expression-lines -> <empty>
Rule 109   expression-line -> complicated-expression ;
Rule 110   expression-line -> return-statement
Rule 111   expression-line -> variable-declaration
Rule 112   expression-line -> if-statement
Rule 113   expression-line -> while-statement
Rule 114   expression-line -> unsafe-area
Rule 115   expression-line -> visibility-area
Rule 116   expression-line -> set-statement
Rule 117   expression-line -> ID ;
Rule 118   return-statement -> RETURN complicated-expression ;
Rule 119   return-statement -> RETURN ID ;
Rule 120   variable-declaration -> ID ID ;
Rule 121   variable-declaration -> complicated-type ID ;
Rule 122   variable-declaration -> ID ID = ID ;
Rule 123   variable-declaration -> complicated-type ID = ID ;
Rule 124   variable-declaration -> ID ID = complicated-expression ;
Rule 125   variable-declaration -> complicated-type ID = complicated-expression ;
Rule 126   variable-declaration -> VAR ID = ID ;
Rule 127   variable-declaration -> VAR ID = complicated-expression ;
Rule 128   if-statement -> IF complicated-expression visibility-area
Rule 129   if-statement -> IF complicated-expression visibility-area ELSE visibility-area
Rule 130   if-statement -> IF complicated-expression visibility-area ELSE if-statement
Rule 131   if-statement -> IF ID visibility-area
Rule 132   if-statement -> IF ID visibility-area ELSE visibility-area
Rule 133   if-statement -> IF ID visibility-area ELSE if-statement
Rule 134   while-statement -> WHILE complicated-expression visibility-area
Rule 135   while-statement -> WHILE ID visibility-area
Rule 136   unsafe-area -> UNSAFE visibility-area
Rule 137   complicated-expression -> UNSAFE complicated-expression
Rule 138   complicated-expression -> [ ]
Rule 139   complicated-expression -> [ ID ]
Rule 140   complicated-expression -> [ complicated-expression ]
Rule 141   complicated-expression -> [ invoke-arguments-list ]
Rule 142   complicated-expression -> ID { invoke-arguments-list }
Rule 143   complicated-expression -> complicated-type { invoke-arguments-list }
Rule 144   complicated-expression -> ID { ID }
Rule 145   complicated-expression -> ID { complicated-expression }
Rule 146   complicated-expression -> complicated-type { ID }
Rule 147   complicated-expression -> complicated-type { complicated-expression }
Rule 148   complicated-expression -> ID { }
Rule 149   complicated-expression -> complicated-type { }
Rule 150   complicated-expression -> ID [ ID ]
Rule 151   complicated-expression -> ID [ complicated-expression ]
Rule 152   complicated-expression -> complicated-expression [ ID ]
Rule 153   complicated-expression -> complicated-expression [ complicated-expression ]
Rule 154   set-statement -> ID = ID ;
Rule 155   set-statement -> complicated-expression = ID ;
Rule 156   set-statement -> ID = complicated-expression ;
Rule 157   set-statement -> complicated-expression = complicated-expression ;
Rule 158   visibility-area -> function-body
Rule 159   constant-expression -> INT
Rule 160   constant-expression -> FLOAT
Rule 161   constant-expression -> STR
Rule 162   constant-expression -> BOOL
Rule 163   constant-expression -> CHAR
Rule 164   complicated-expression -> TIMES ID
Rule 165   complicated-expression -> TIMES complicated-expression
Rule 166   complicated-expression -> AND ID
Rule 167   complicated-expression -> AND complicated-expression
Rule 168   complicated-expression -> ID . ID
Rule 169   complicated-expression -> complicated-expression . ID
Rule 170   complicated-expression -> SIZEOF ( ID )
Rule 171   complicated-expression -> SIZEOF ( complicated-type )
Rule 172   complicated-expression -> ID invoke-arguments
Rule 173   complicated-expression -> ID : ID invoke-arguments
Rule 174   complicated-expression -> package-complicated-name : ID invoke-arguments
Rule 175   complicated-expression -> ID template-declaration invoke-arguments
Rule 176   complicated-expression -> ID : ID template-declaration invoke-arguments
Rule 177   complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments
Rule 178   complicated-expression -> ID . ID invoke-arguments
Rule 179   complicated-expression -> complicated-expression . ID invoke-arguments
Rule 180   complicated-expression -> ID . ID template-declaration invoke-arguments
Rule 181   complicated-expression -> complicated-expression . ID template-declaration invoke-arguments
Rule 182   invoke-arguments -> ( )
Rule 183   invoke-arguments -> ( ID )
Rule 184   invoke-arguments -> ( complicated-expression )
Rule 185   invoke-arguments -> ( invoke-arguments-list )
Rule 186   invoke-arguments-list -> invoke-arguments-list , ID
Rule 187   invoke-arguments-list -> invoke-arguments-list , complicated-expression
Rule 188   invoke-arguments-list -> ID , ID
Rule 189   invoke-arguments-list -> complicated-expression , ID
Rule 190   invoke-arguments-list -> ID , complicated-expression
Rule 191   invoke-arguments-list -> complicated-expression , complicated-expression
Rule 192   complicated-expression -> ID binary-operator ID
Rule 193   complicated-expression -> ID TIMES ID
Rule 194   complicated-expression -> ID LS ID
Rule 195   complicated-expression -> ID GR ID
Rule 196   complicated-expression -> complicated-expression binary-operator ID
Rule 197   complicated-expression -> complicated-expression LS ID
Rule 198   complicated-expression -> complicated-expression GR ID
Rule 199   complicated-expression -> complicated-expression TIMES ID
Rule 200   complicated-expression -> ID binary-operator complicated-expression
Rule 201   complicated-expression -> ID LS complicated-expression
Rule 202   complicated-expression -> ID GR complicated-expression
Rule 203   complicated-expression -> ID TIMES complicated-expression
Rule 204   complicated-expression -> complicated-expression binary-operator complicated-expression
Rule 205   complicated-expression -> complicated-expression LS complicated-expression
Rule 206   complicated-expression -> complicated-expression GR complicated-expression
Rule 207   complicated-expression -> complicated-expression TIMES complicated-expression
Rule 208   complicated-expression -> MINUS ID
Rule 209   complicated-expression -> MINUS complicated-expression
Rule 210   complicated-expression -> ! ID
Rule 211   complicated-expression -> ! complicated-expression
Rule 212   complicated-expression -> constant-expression
Rule 213   complicated-expression -> ( ID )
Rule 214   complicated-expression -> ( complicated-expression )
Rule 215   complicated-expression -> ( ID ) ID
Rule 216   complicated-expression -> ( ID ) complicated-expression
Rule 217   complicated-expression -> ( complicated-type ) ID
Rule 218   complicated-expression -> ( complicated-type ) complicated-expression
Rule 219   sub-equal-operator -> PLUSEQ
Rule 220   sub-equal-operator -> MINUSEQ
Rule 221   sub-equal-operator -> TIMESEQ
Rule 222   sub-equal-operator -> DIVIDEEQ
Rule 223   sub-equal-operator -> MODEQ
Rule 224   sub-equal-operator -> ANDEQ
Rule 225   sub-equal-operator -> OREQ
Rule 226   sub-equal-operator -> XOREQ
Rule 227   sub-equal-operator -> LSHIFTEQ
Rule 228   sub-equal-operator -> RSHIFTEQ
Rule 229   complicated-expression -> ID sub-equal-operator ID
Rule 230   complicated-expression -> complicated-expression sub-equal-operator ID
Rule 231   complicated-expression -> ID sub-equal-operator complicated-expression
Rule 232   complicated-expression -> complicated-expression sub-equal-operator complicated-expression
Rule 233   binary-operator -> PLUS
Rule 234   binary-operator -> MINUS
Rule 235   binary-operator -> DIVIDE
Rule 236   binary-operator -> MOD
Rule 237   binary-operator -> AND
Rule 238   binary-operator -> OR
Rule 239   binary-operator -> XOR
Rule 240   binary-operator -> LSHIFT
Rule 241   binary-operator -> RSHIFT
Rule 242   binary-operator -> LE
Rule 243   binary-operator -> GE
Rule 244   binary-operator -> EE
Rule 245   binary-operator -> NE

Terminals, with rules where they appear

!                    : 39 41 43 45 210 211
(                    : 38 39 40 41 42 43 44 45 46 47 89 90 170 171 182 183 184 185 213 214 215 216 217 218
)                    : 38 39 40 41 42 43 44 45 46 47 89 90 170 171 182 183 184 185 213 214 215 216 217 218
,                    : 83 84 85 86 87 88 91 186 187 188 189 190 191
.                    : 168 169 178 179 180 181
:                    : 4 5 60 61 62 63 64 65 66 67 68 69 70 71 173 174 176 177
;                    : 2 3 10 11 58 59 102 103 104 105 109 117 118 119 120 121 122 123 124 125 126 127 154 155 156 157
=                    : 54 55 56 57 122 123 124 125 126 127 154 155 156 157
ACCMOD               : 104 105
AND                  : 166 167 237
ANDEQ                : 224
BINOP                : 
BOOL                 : 162
CHAR                 : 163
CLASS                : 
COMMENT              : 
CONST                : 77
DIVIDE               : 235
DIVIDEEQ             : 222
EE                   : 244
ELSE                 : 129 130 132 133
EXTERN               : 58 59 98
FLOAT                : 160
FOR                  : 
FUNCMOD              : 
GE                   : 243
GR                   : 25 29 33 37 80 81 82 195 198 202 206
ID                   : 2 4 5 5 10 14 14 15 16 16 17 18 18 19 20 20 21 22 23 24 25 30 31 32 33 38 39 42 43 46 50 52 54 56 58 58 59 60 61 62 63 63 64 64 65 65 66 67 68 69 69 70 70 71 71 72 73 74 75 76 81 83 85 85 86 87 93 93 94 96 97 98 102 102 103 104 104 105 117 119 120 120 121 122 122 122 123 123 124 124 125 126 126 127 131 132 133 135 139 142 144 144 145 146 148 150 150 151 152 154 154 155 156 164 166 168 168 169 170 172 173 173 174 175 176 176 177 178 178 179 180 180 181 183 186 188 188 189 190 192 192 193 193 194 194 195 195 196 197 198 199 200 201 202 203 208 210 213 215 215 216 217 229 229 230 231
IF                   : 128 129 130 131 132 133
INT                  : 159
INTERFACE            : 
LCOMMENT             : 
LE                   : 242
LS                   : 24 28 32 36 80 81 82 194 197 201 205
LSHIFT               : 240
LSHIFTEQ             : 227
MACRO                : 
MINUS                : 208 209 234
MINUSEQ              : 220
MOD                  : 236
MODEQ                : 223
NE                   : 245
NUM                  : 
OPERATOR             : 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
OR                   : 238
OREQ                 : 225
PACKAGE              : 2 3
PLUS                 : 233
PLUSEQ               : 219
RETURN               : 118 119
RSHIFT               : 241
RSHIFTEQ             : 228
SIZEOF               : 170 171
STR                  : 161
STRUCT               : 96 97 98
TIMES                : 23 27 31 35 61 64 67 70 73 75 78 79 79 164 165 193 199 203 207
TIMESEQ              : 221
TYPEID               : 
TYPESTR              : 
UNSAFE               : 18 19 20 21 136 137
USING                : 10 11
VAR                  : 126 127
WHILE                : 134 135
XOR                  : 239
XOREQ                : 226
[                    : 50 51 52 53 138 139 140 141 150 151 152 153
]                    : 50 51 52 53 138 139 140 141 150 151 152 153
error                : 
{                    : 95 99 142 143 144 145 146 147 148 149
}                    : 95 99 142 143 144 145 146 147 148 149
~                    : 48 49

Nonterminals, with rules where they appear

binary-operator      : 22 26 30 34 38 40 42 44 192 196 200 204
code                 : 0
complicated-expression : 109 118 124 125 127 128 129 130 134 137 140 145 147 151 152 153 153 155 156 157 157 165 167 169 179 181 184 187 189 190 191 191 196 197 198 199 200 201 202 203 204 204 205 205 206 206 207 207 209 211 214 216 218 230 231 232 232
complicated-pointer-level : 62 65 68 71 74 76 78
complicated-type     : 15 17 19 21 26 27 28 29 34 35 36 37 40 41 44 45 47 51 53 55 57 59 77 82 84 86 87 88 88 94 103 105 121 123 125 143 146 147 149 171 217 218
constant-expression  : 212
expression-line      : 106 107
expression-lines     : 95 106
function-argument    : 91 92
function-arguments   : 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
function-arguments-body : 89 91
function-body        : 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 158
if-statement         : 112 130 133
import-declaration   : 7 8
import-declarations  : 1 7
invoke-arguments     : 172 173 174 175 176 177 178 179 180 181
invoke-arguments-list : 141 142 143 185 186 187
main                 : 12
main-code            : 1 12
package-complicated-name : 3 4 11 60 61 62 66 67 68 174 177
package-declaration  : 1
return-statement     : 110
set-statement        : 116
struct-body          : 96 97 98
struct-field         : 100
struct-fields        : 99 100
sub-equal-operator   : 229 230 231 232
template-declaration : 16 17 20 21 30 31 32 33 34 35 36 37 42 43 44 45 49 52 53 56 57 66 67 68 69 70 71 72 73 74 97 175 176 177 180 181
template-declaration-body : 80 83 84
unsafe-area          : 114
variable-declaration : 111
visibility-area      : 115 128 129 129 130 131 132 132 133 134 135 136
while-statement      : 113

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . package-declaration import-declarations main-code
    (2) package-declaration -> . PACKAGE ID ;
    (3) package-declaration -> . PACKAGE package-complicated-name ;

    PACKAGE         shift and go to state 3

    code                           shift and go to state 1
    package-declaration            shift and go to state 2

state 1

    (0) S' -> code .



state 2

    (1) code -> package-declaration . import-declarations main-code
    (7) import-declarations -> . import-declarations import-declaration
    (8) import-declarations -> . import-declaration
    (9) import-declarations -> .
    (10) import-declaration -> . USING ID ;
    (11) import-declaration -> . USING package-complicated-name ;

  ! shift/reduce conflict for USING resolved as shift
    ID              reduce using rule 9 (import-declarations -> .)
    UNSAFE          reduce using rule 9 (import-declarations -> .)
    OPERATOR        reduce using rule 9 (import-declarations -> .)
    EXTERN          reduce using rule 9 (import-declarations -> .)
    STRUCT          reduce using rule 9 (import-declarations -> .)
    CONST           reduce using rule 9 (import-declarations -> .)
    :               reduce using rule 9 (import-declarations -> .)
    $end            reduce using rule 9 (import-declarations -> .)
    USING           shift and go to state 6

  ! USING           [ reduce using rule 9 (import-declarations -> .) ]

    import-declarations            shift and go to state 4
    import-declaration             shift and go to state 5

state 3

    (2) package-declaration -> PACKAGE . ID ;
    (3) package-declaration -> PACKAGE . package-complicated-name ;
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 7
    ;               reduce using rule 6 (package-complicated-name -> .)
    :               reduce using rule 6 (package-complicated-name -> .)

    package-complicated-name       shift and go to state 8

state 4

    (1) code -> package-declaration import-declarations . main-code
    (7) import-declarations -> import-declarations . import-declaration
    (12) main-code -> . main-code main
    (13) main-code -> .
    (10) import-declaration -> . USING ID ;
    (11) import-declaration -> . USING package-complicated-name ;

    ID              reduce using rule 13 (main-code -> .)
    UNSAFE          reduce using rule 13 (main-code -> .)
    OPERATOR        reduce using rule 13 (main-code -> .)
    EXTERN          reduce using rule 13 (main-code -> .)
    STRUCT          reduce using rule 13 (main-code -> .)
    CONST           reduce using rule 13 (main-code -> .)
    :               reduce using rule 13 (main-code -> .)
    $end            reduce using rule 13 (main-code -> .)
    USING           shift and go to state 6

    main-code                      shift and go to state 9
    import-declaration             shift and go to state 10

state 5

    (8) import-declarations -> import-declaration .

    USING           reduce using rule 8 (import-declarations -> import-declaration .)
    ID              reduce using rule 8 (import-declarations -> import-declaration .)
    UNSAFE          reduce using rule 8 (import-declarations -> import-declaration .)
    OPERATOR        reduce using rule 8 (import-declarations -> import-declaration .)
    EXTERN          reduce using rule 8 (import-declarations -> import-declaration .)
    STRUCT          reduce using rule 8 (import-declarations -> import-declaration .)
    CONST           reduce using rule 8 (import-declarations -> import-declaration .)
    :               reduce using rule 8 (import-declarations -> import-declaration .)
    $end            reduce using rule 8 (import-declarations -> import-declaration .)


state 6

    (10) import-declaration -> USING . ID ;
    (11) import-declaration -> USING . package-complicated-name ;
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 11
    ;               reduce using rule 6 (package-complicated-name -> .)
    :               reduce using rule 6 (package-complicated-name -> .)

    package-complicated-name       shift and go to state 12

state 7

    (2) package-declaration -> PACKAGE ID . ;
    (5) package-complicated-name -> ID . : ID

    ;               shift and go to state 13
    :               shift and go to state 14


state 8

    (3) package-declaration -> PACKAGE package-complicated-name . ;
    (4) package-complicated-name -> package-complicated-name . : ID

    ;               shift and go to state 15
    :               shift and go to state 16


state 9

    (1) code -> package-declaration import-declarations main-code .
    (12) main-code -> main-code . main
    (14) main -> . ID ID function-arguments function-body
    (15) main -> . complicated-type ID function-arguments function-body
    (16) main -> . ID ID template-declaration function-arguments function-body
    (17) main -> . complicated-type ID template-declaration function-arguments function-body
    (18) main -> . UNSAFE ID ID function-arguments function-body
    (19) main -> . UNSAFE complicated-type ID function-arguments function-body
    (20) main -> . UNSAFE ID ID template-declaration function-arguments function-body
    (21) main -> . UNSAFE complicated-type ID template-declaration function-arguments function-body
    (22) main -> . ID OPERATOR binary-operator function-arguments function-body
    (23) main -> . ID OPERATOR TIMES function-arguments function-body
    (24) main -> . ID OPERATOR LS function-arguments function-body
    (25) main -> . ID OPERATOR GR function-arguments function-body
    (26) main -> . complicated-type OPERATOR binary-operator function-arguments function-body
    (27) main -> . complicated-type OPERATOR TIMES function-arguments function-body
    (28) main -> . complicated-type OPERATOR LS function-arguments function-body
    (29) main -> . complicated-type OPERATOR GR function-arguments function-body
    (30) main -> . ID OPERATOR binary-operator template-declaration function-arguments function-body
    (31) main -> . ID OPERATOR TIMES template-declaration function-arguments function-body
    (32) main -> . ID OPERATOR LS template-declaration function-arguments function-body
    (33) main -> . ID OPERATOR GR template-declaration function-arguments function-body
    (34) main -> . complicated-type OPERATOR binary-operator template-declaration function-arguments function-body
    (35) main -> . complicated-type OPERATOR TIMES template-declaration function-arguments function-body
    (36) main -> . complicated-type OPERATOR LS template-declaration function-arguments function-body
    (37) main -> . complicated-type OPERATOR GR template-declaration function-arguments function-body
    (38) main -> . ID OPERATOR binary-operator ( ) function-arguments function-body
    (39) main -> . ID OPERATOR ! ( ) function-arguments function-body
    (40) main -> . complicated-type OPERATOR binary-operator ( ) function-arguments function-body
    (41) main -> . complicated-type OPERATOR ! ( ) function-arguments function-body
    (42) main -> . ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body
    (43) main -> . ID OPERATOR ! ( ) template-declaration function-arguments function-body
    (44) main -> . complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body
    (45) main -> . complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body
    (46) main -> . ID OPERATOR ( ) function-arguments function-body
    (47) main -> . complicated-type OPERATOR ( ) function-arguments function-body
    (48) main -> . OPERATOR ~ function-arguments function-body
    (49) main -> . OPERATOR ~ template-declaration function-arguments function-body
    (50) main -> . ID OPERATOR [ ] function-arguments function-body
    (51) main -> . complicated-type OPERATOR [ ] function-arguments function-body
    (52) main -> . ID OPERATOR [ ] template-declaration function-arguments function-body
    (53) main -> . complicated-type OPERATOR [ ] template-declaration function-arguments function-body
    (54) main -> . ID OPERATOR = function-arguments function-body
    (55) main -> . complicated-type OPERATOR = function-arguments function-body
    (56) main -> . ID OPERATOR = template-declaration function-arguments function-body
    (57) main -> . complicated-type OPERATOR = template-declaration function-arguments function-body
    (58) main -> . EXTERN ID ID function-arguments ;
    (59) main -> . EXTERN complicated-type ID function-arguments ;
    (96) main -> . STRUCT ID struct-body
    (97) main -> . STRUCT ID template-declaration struct-body
    (98) main -> . EXTERN STRUCT ID struct-body
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    $end            reduce using rule 1 (code -> package-declaration import-declarations main-code .)
    ID              shift and go to state 18
    UNSAFE          shift and go to state 20
    OPERATOR        shift and go to state 21
    EXTERN          shift and go to state 22
    STRUCT          shift and go to state 23
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    main                           shift and go to state 17
    complicated-type               shift and go to state 19
    package-complicated-name       shift and go to state 24

state 10

    (7) import-declarations -> import-declarations import-declaration .

    USING           reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    ID              reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    UNSAFE          reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    OPERATOR        reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    EXTERN          reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    STRUCT          reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    CONST           reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    :               reduce using rule 7 (import-declarations -> import-declarations import-declaration .)
    $end            reduce using rule 7 (import-declarations -> import-declarations import-declaration .)


state 11

    (10) import-declaration -> USING ID . ;
    (5) package-complicated-name -> ID . : ID

    ;               shift and go to state 26
    :               shift and go to state 14


state 12

    (11) import-declaration -> USING package-complicated-name . ;
    (4) package-complicated-name -> package-complicated-name . : ID

    ;               shift and go to state 27
    :               shift and go to state 16


state 13

    (2) package-declaration -> PACKAGE ID ; .

    USING           reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    ID              reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    UNSAFE          reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    OPERATOR        reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    EXTERN          reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    STRUCT          reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    CONST           reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    :               reduce using rule 2 (package-declaration -> PACKAGE ID ; .)
    $end            reduce using rule 2 (package-declaration -> PACKAGE ID ; .)


state 14

    (5) package-complicated-name -> ID : . ID

    ID              shift and go to state 28


state 15

    (3) package-declaration -> PACKAGE package-complicated-name ; .

    USING           reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    ID              reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    UNSAFE          reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    OPERATOR        reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    EXTERN          reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    STRUCT          reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    CONST           reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    :               reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)
    $end            reduce using rule 3 (package-declaration -> PACKAGE package-complicated-name ; .)


state 16

    (4) package-complicated-name -> package-complicated-name : . ID

    ID              shift and go to state 29


state 17

    (12) main-code -> main-code main .

    ID              reduce using rule 12 (main-code -> main-code main .)
    UNSAFE          reduce using rule 12 (main-code -> main-code main .)
    OPERATOR        reduce using rule 12 (main-code -> main-code main .)
    EXTERN          reduce using rule 12 (main-code -> main-code main .)
    STRUCT          reduce using rule 12 (main-code -> main-code main .)
    CONST           reduce using rule 12 (main-code -> main-code main .)
    :               reduce using rule 12 (main-code -> main-code main .)
    $end            reduce using rule 12 (main-code -> main-code main .)


state 18

    (14) main -> ID . ID function-arguments function-body
    (16) main -> ID . ID template-declaration function-arguments function-body
    (22) main -> ID . OPERATOR binary-operator function-arguments function-body
    (23) main -> ID . OPERATOR TIMES function-arguments function-body
    (24) main -> ID . OPERATOR LS function-arguments function-body
    (25) main -> ID . OPERATOR GR function-arguments function-body
    (30) main -> ID . OPERATOR binary-operator template-declaration function-arguments function-body
    (31) main -> ID . OPERATOR TIMES template-declaration function-arguments function-body
    (32) main -> ID . OPERATOR LS template-declaration function-arguments function-body
    (33) main -> ID . OPERATOR GR template-declaration function-arguments function-body
    (38) main -> ID . OPERATOR binary-operator ( ) function-arguments function-body
    (39) main -> ID . OPERATOR ! ( ) function-arguments function-body
    (42) main -> ID . OPERATOR binary-operator ( ) template-declaration function-arguments function-body
    (43) main -> ID . OPERATOR ! ( ) template-declaration function-arguments function-body
    (46) main -> ID . OPERATOR ( ) function-arguments function-body
    (50) main -> ID . OPERATOR [ ] function-arguments function-body
    (52) main -> ID . OPERATOR [ ] template-declaration function-arguments function-body
    (54) main -> ID . OPERATOR = function-arguments function-body
    (56) main -> ID . OPERATOR = template-declaration function-arguments function-body
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              shift and go to state 30
    OPERATOR        shift and go to state 32
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    template-declaration           shift and go to state 31
    complicated-pointer-level      shift and go to state 36

state 19

    (15) main -> complicated-type . ID function-arguments function-body
    (17) main -> complicated-type . ID template-declaration function-arguments function-body
    (26) main -> complicated-type . OPERATOR binary-operator function-arguments function-body
    (27) main -> complicated-type . OPERATOR TIMES function-arguments function-body
    (28) main -> complicated-type . OPERATOR LS function-arguments function-body
    (29) main -> complicated-type . OPERATOR GR function-arguments function-body
    (34) main -> complicated-type . OPERATOR binary-operator template-declaration function-arguments function-body
    (35) main -> complicated-type . OPERATOR TIMES template-declaration function-arguments function-body
    (36) main -> complicated-type . OPERATOR LS template-declaration function-arguments function-body
    (37) main -> complicated-type . OPERATOR GR template-declaration function-arguments function-body
    (40) main -> complicated-type . OPERATOR binary-operator ( ) function-arguments function-body
    (41) main -> complicated-type . OPERATOR ! ( ) function-arguments function-body
    (44) main -> complicated-type . OPERATOR binary-operator ( ) template-declaration function-arguments function-body
    (45) main -> complicated-type . OPERATOR ! ( ) template-declaration function-arguments function-body
    (47) main -> complicated-type . OPERATOR ( ) function-arguments function-body
    (51) main -> complicated-type . OPERATOR [ ] function-arguments function-body
    (53) main -> complicated-type . OPERATOR [ ] template-declaration function-arguments function-body
    (55) main -> complicated-type . OPERATOR = function-arguments function-body
    (57) main -> complicated-type . OPERATOR = template-declaration function-arguments function-body

    ID              shift and go to state 37
    OPERATOR        shift and go to state 38


state 20

    (18) main -> UNSAFE . ID ID function-arguments function-body
    (19) main -> UNSAFE . complicated-type ID function-arguments function-body
    (20) main -> UNSAFE . ID ID template-declaration function-arguments function-body
    (21) main -> UNSAFE . complicated-type ID template-declaration function-arguments function-body
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 39
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 40
    package-complicated-name       shift and go to state 24

state 21

    (48) main -> OPERATOR . ~ function-arguments function-body
    (49) main -> OPERATOR . ~ template-declaration function-arguments function-body

    ~               shift and go to state 41


state 22

    (58) main -> EXTERN . ID ID function-arguments ;
    (59) main -> EXTERN . complicated-type ID function-arguments ;
    (98) main -> EXTERN . STRUCT ID struct-body
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 42
    STRUCT          shift and go to state 44
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 43
    package-complicated-name       shift and go to state 24

state 23

    (96) main -> STRUCT . ID struct-body
    (97) main -> STRUCT . ID template-declaration struct-body

    ID              shift and go to state 45


state 24

    (60) complicated-type -> package-complicated-name . : ID
    (61) complicated-type -> package-complicated-name . : ID TIMES
    (62) complicated-type -> package-complicated-name . : ID complicated-pointer-level
    (66) complicated-type -> package-complicated-name . : ID template-declaration
    (67) complicated-type -> package-complicated-name . : ID template-declaration TIMES
    (68) complicated-type -> package-complicated-name . : ID template-declaration complicated-pointer-level
    (4) package-complicated-name -> package-complicated-name . : ID

    :               shift and go to state 46


state 25

    (77) complicated-type -> CONST . complicated-type
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 48
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 47
    package-complicated-name       shift and go to state 24

state 26

    (10) import-declaration -> USING ID ; .

    USING           reduce using rule 10 (import-declaration -> USING ID ; .)
    ID              reduce using rule 10 (import-declaration -> USING ID ; .)
    UNSAFE          reduce using rule 10 (import-declaration -> USING ID ; .)
    OPERATOR        reduce using rule 10 (import-declaration -> USING ID ; .)
    EXTERN          reduce using rule 10 (import-declaration -> USING ID ; .)
    STRUCT          reduce using rule 10 (import-declaration -> USING ID ; .)
    CONST           reduce using rule 10 (import-declaration -> USING ID ; .)
    :               reduce using rule 10 (import-declaration -> USING ID ; .)
    $end            reduce using rule 10 (import-declaration -> USING ID ; .)


state 27

    (11) import-declaration -> USING package-complicated-name ; .

    USING           reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    ID              reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    UNSAFE          reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    OPERATOR        reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    EXTERN          reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    STRUCT          reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    CONST           reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    :               reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)
    $end            reduce using rule 11 (import-declaration -> USING package-complicated-name ; .)


state 28

    (5) package-complicated-name -> ID : ID .

    ;               reduce using rule 5 (package-complicated-name -> ID : ID .)
    :               reduce using rule 5 (package-complicated-name -> ID : ID .)


state 29

    (4) package-complicated-name -> package-complicated-name : ID .

    ;               reduce using rule 4 (package-complicated-name -> package-complicated-name : ID .)
    :               reduce using rule 4 (package-complicated-name -> package-complicated-name : ID .)


state 30

    (14) main -> ID ID . function-arguments function-body
    (16) main -> ID ID . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 49
    template-declaration           shift and go to state 50

state 31

    (72) complicated-type -> ID template-declaration .
    (73) complicated-type -> ID template-declaration . TIMES
    (74) complicated-type -> ID template-declaration . complicated-pointer-level
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              reduce using rule 72 (complicated-type -> ID template-declaration .)
    OPERATOR        reduce using rule 72 (complicated-type -> ID template-declaration .)
    GR              reduce using rule 72 (complicated-type -> ID template-declaration .)
    ,               reduce using rule 72 (complicated-type -> ID template-declaration .)
    {               reduce using rule 72 (complicated-type -> ID template-declaration .)
    )               reduce using rule 72 (complicated-type -> ID template-declaration .)
    TIMES           shift and go to state 52

    complicated-pointer-level      shift and go to state 53

state 32

    (22) main -> ID OPERATOR . binary-operator function-arguments function-body
    (23) main -> ID OPERATOR . TIMES function-arguments function-body
    (24) main -> ID OPERATOR . LS function-arguments function-body
    (25) main -> ID OPERATOR . GR function-arguments function-body
    (30) main -> ID OPERATOR . binary-operator template-declaration function-arguments function-body
    (31) main -> ID OPERATOR . TIMES template-declaration function-arguments function-body
    (32) main -> ID OPERATOR . LS template-declaration function-arguments function-body
    (33) main -> ID OPERATOR . GR template-declaration function-arguments function-body
    (38) main -> ID OPERATOR . binary-operator ( ) function-arguments function-body
    (39) main -> ID OPERATOR . ! ( ) function-arguments function-body
    (42) main -> ID OPERATOR . binary-operator ( ) template-declaration function-arguments function-body
    (43) main -> ID OPERATOR . ! ( ) template-declaration function-arguments function-body
    (46) main -> ID OPERATOR . ( ) function-arguments function-body
    (50) main -> ID OPERATOR . [ ] function-arguments function-body
    (52) main -> ID OPERATOR . [ ] template-declaration function-arguments function-body
    (54) main -> ID OPERATOR . = function-arguments function-body
    (56) main -> ID OPERATOR . = template-declaration function-arguments function-body
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE

    TIMES           shift and go to state 55
    LS              shift and go to state 56
    GR              shift and go to state 57
    !               shift and go to state 59
    (               shift and go to state 58
    [               shift and go to state 60
    =               shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74

    binary-operator                shift and go to state 54

state 33

    (75) complicated-type -> ID TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES

    ID              reduce using rule 75 (complicated-type -> ID TIMES .)
    OPERATOR        reduce using rule 75 (complicated-type -> ID TIMES .)
    GR              reduce using rule 75 (complicated-type -> ID TIMES .)
    ,               reduce using rule 75 (complicated-type -> ID TIMES .)
    {               reduce using rule 75 (complicated-type -> ID TIMES .)
    )               reduce using rule 75 (complicated-type -> ID TIMES .)
    TIMES           shift and go to state 75


state 34

    (80) template-declaration -> LS . template-declaration-body GR
    (81) template-declaration -> LS . ID GR
    (82) template-declaration -> LS . complicated-type GR
    (83) template-declaration-body -> . template-declaration-body , ID
    (84) template-declaration-body -> . template-declaration-body , complicated-type
    (85) template-declaration-body -> . ID , ID
    (86) template-declaration-body -> . complicated-type , ID
    (87) template-declaration-body -> . ID , complicated-type
    (88) template-declaration-body -> . complicated-type , complicated-type
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 77
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    template-declaration-body      shift and go to state 76
    complicated-type               shift and go to state 78
    package-complicated-name       shift and go to state 24

state 35

    (63) complicated-type -> ID : . ID
    (64) complicated-type -> ID : . ID TIMES
    (65) complicated-type -> ID : . ID complicated-pointer-level
    (69) complicated-type -> ID : . ID template-declaration
    (70) complicated-type -> ID : . ID template-declaration TIMES
    (71) complicated-type -> ID : . ID template-declaration complicated-pointer-level
    (5) package-complicated-name -> ID : . ID

    ID              shift and go to state 79


state 36

    (76) complicated-type -> ID complicated-pointer-level .
    (78) complicated-pointer-level -> complicated-pointer-level . TIMES

    ID              reduce using rule 76 (complicated-type -> ID complicated-pointer-level .)
    OPERATOR        reduce using rule 76 (complicated-type -> ID complicated-pointer-level .)
    GR              reduce using rule 76 (complicated-type -> ID complicated-pointer-level .)
    ,               reduce using rule 76 (complicated-type -> ID complicated-pointer-level .)
    {               reduce using rule 76 (complicated-type -> ID complicated-pointer-level .)
    )               reduce using rule 76 (complicated-type -> ID complicated-pointer-level .)
    TIMES           shift and go to state 80


state 37

    (15) main -> complicated-type ID . function-arguments function-body
    (17) main -> complicated-type ID . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 81
    template-declaration           shift and go to state 82

state 38

    (26) main -> complicated-type OPERATOR . binary-operator function-arguments function-body
    (27) main -> complicated-type OPERATOR . TIMES function-arguments function-body
    (28) main -> complicated-type OPERATOR . LS function-arguments function-body
    (29) main -> complicated-type OPERATOR . GR function-arguments function-body
    (34) main -> complicated-type OPERATOR . binary-operator template-declaration function-arguments function-body
    (35) main -> complicated-type OPERATOR . TIMES template-declaration function-arguments function-body
    (36) main -> complicated-type OPERATOR . LS template-declaration function-arguments function-body
    (37) main -> complicated-type OPERATOR . GR template-declaration function-arguments function-body
    (40) main -> complicated-type OPERATOR . binary-operator ( ) function-arguments function-body
    (41) main -> complicated-type OPERATOR . ! ( ) function-arguments function-body
    (44) main -> complicated-type OPERATOR . binary-operator ( ) template-declaration function-arguments function-body
    (45) main -> complicated-type OPERATOR . ! ( ) template-declaration function-arguments function-body
    (47) main -> complicated-type OPERATOR . ( ) function-arguments function-body
    (51) main -> complicated-type OPERATOR . [ ] function-arguments function-body
    (53) main -> complicated-type OPERATOR . [ ] template-declaration function-arguments function-body
    (55) main -> complicated-type OPERATOR . = function-arguments function-body
    (57) main -> complicated-type OPERATOR . = template-declaration function-arguments function-body
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE

    TIMES           shift and go to state 84
    LS              shift and go to state 85
    GR              shift and go to state 86
    !               shift and go to state 88
    (               shift and go to state 87
    [               shift and go to state 89
    =               shift and go to state 90
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74

    binary-operator                shift and go to state 83

state 39

    (18) main -> UNSAFE ID . ID function-arguments function-body
    (20) main -> UNSAFE ID . ID template-declaration function-arguments function-body
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              shift and go to state 91
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    template-declaration           shift and go to state 31
    complicated-pointer-level      shift and go to state 36

state 40

    (19) main -> UNSAFE complicated-type . ID function-arguments function-body
    (21) main -> UNSAFE complicated-type . ID template-declaration function-arguments function-body

    ID              shift and go to state 92


state 41

    (48) main -> OPERATOR ~ . function-arguments function-body
    (49) main -> OPERATOR ~ . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 93
    template-declaration           shift and go to state 94

state 42

    (58) main -> EXTERN ID . ID function-arguments ;
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              shift and go to state 95
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 43

    (59) main -> EXTERN complicated-type . ID function-arguments ;

    ID              shift and go to state 96


state 44

    (98) main -> EXTERN STRUCT . ID struct-body

    ID              shift and go to state 97


state 45

    (96) main -> STRUCT ID . struct-body
    (97) main -> STRUCT ID . template-declaration struct-body
    (99) struct-body -> . { struct-fields }
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    {               shift and go to state 100
    LS              shift and go to state 34

    struct-body                    shift and go to state 98
    template-declaration           shift and go to state 99

state 46

    (60) complicated-type -> package-complicated-name : . ID
    (61) complicated-type -> package-complicated-name : . ID TIMES
    (62) complicated-type -> package-complicated-name : . ID complicated-pointer-level
    (66) complicated-type -> package-complicated-name : . ID template-declaration
    (67) complicated-type -> package-complicated-name : . ID template-declaration TIMES
    (68) complicated-type -> package-complicated-name : . ID template-declaration complicated-pointer-level
    (4) package-complicated-name -> package-complicated-name : . ID

    ID              shift and go to state 101


state 47

    (77) complicated-type -> CONST complicated-type .

    ID              reduce using rule 77 (complicated-type -> CONST complicated-type .)
    OPERATOR        reduce using rule 77 (complicated-type -> CONST complicated-type .)
    GR              reduce using rule 77 (complicated-type -> CONST complicated-type .)
    ,               reduce using rule 77 (complicated-type -> CONST complicated-type .)
    {               reduce using rule 77 (complicated-type -> CONST complicated-type .)
    )               reduce using rule 77 (complicated-type -> CONST complicated-type .)


state 48

    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 49

    (14) main -> ID ID function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 102

state 50

    (16) main -> ID ID template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 104

state 51

    (89) function-arguments -> ( . function-arguments-body )
    (90) function-arguments -> ( . )
    (91) function-arguments-body -> . function-arguments-body , function-argument
    (92) function-arguments-body -> . function-argument
    (93) function-argument -> . ID ID
    (94) function-argument -> . complicated-type ID
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    )               shift and go to state 106
    ID              shift and go to state 108
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    function-arguments-body        shift and go to state 105
    function-argument              shift and go to state 107
    complicated-type               shift and go to state 109
    package-complicated-name       shift and go to state 24

state 52

    (73) complicated-type -> ID template-declaration TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES

    ID              reduce using rule 73 (complicated-type -> ID template-declaration TIMES .)
    OPERATOR        reduce using rule 73 (complicated-type -> ID template-declaration TIMES .)
    GR              reduce using rule 73 (complicated-type -> ID template-declaration TIMES .)
    ,               reduce using rule 73 (complicated-type -> ID template-declaration TIMES .)
    {               reduce using rule 73 (complicated-type -> ID template-declaration TIMES .)
    )               reduce using rule 73 (complicated-type -> ID template-declaration TIMES .)
    TIMES           shift and go to state 75


state 53

    (74) complicated-type -> ID template-declaration complicated-pointer-level .
    (78) complicated-pointer-level -> complicated-pointer-level . TIMES

    ID              reduce using rule 74 (complicated-type -> ID template-declaration complicated-pointer-level .)
    OPERATOR        reduce using rule 74 (complicated-type -> ID template-declaration complicated-pointer-level .)
    GR              reduce using rule 74 (complicated-type -> ID template-declaration complicated-pointer-level .)
    ,               reduce using rule 74 (complicated-type -> ID template-declaration complicated-pointer-level .)
    {               reduce using rule 74 (complicated-type -> ID template-declaration complicated-pointer-level .)
    )               reduce using rule 74 (complicated-type -> ID template-declaration complicated-pointer-level .)
    TIMES           shift and go to state 80


state 54

    (22) main -> ID OPERATOR binary-operator . function-arguments function-body
    (30) main -> ID OPERATOR binary-operator . template-declaration function-arguments function-body
    (38) main -> ID OPERATOR binary-operator . ( ) function-arguments function-body
    (42) main -> ID OPERATOR binary-operator . ( ) template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 112
    LS              shift and go to state 34

    function-arguments             shift and go to state 110
    template-declaration           shift and go to state 111

state 55

    (23) main -> ID OPERATOR TIMES . function-arguments function-body
    (31) main -> ID OPERATOR TIMES . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 113
    template-declaration           shift and go to state 114

state 56

    (24) main -> ID OPERATOR LS . function-arguments function-body
    (32) main -> ID OPERATOR LS . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 115
    template-declaration           shift and go to state 116

state 57

    (25) main -> ID OPERATOR GR . function-arguments function-body
    (33) main -> ID OPERATOR GR . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 117
    template-declaration           shift and go to state 118

state 58

    (46) main -> ID OPERATOR ( . ) function-arguments function-body

    )               shift and go to state 119


state 59

    (39) main -> ID OPERATOR ! . ( ) function-arguments function-body
    (43) main -> ID OPERATOR ! . ( ) template-declaration function-arguments function-body

    (               shift and go to state 120


state 60

    (50) main -> ID OPERATOR [ . ] function-arguments function-body
    (52) main -> ID OPERATOR [ . ] template-declaration function-arguments function-body

    ]               shift and go to state 121


state 61

    (54) main -> ID OPERATOR = . function-arguments function-body
    (56) main -> ID OPERATOR = . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 122
    template-declaration           shift and go to state 123

state 62

    (233) binary-operator -> PLUS .

    (               reduce using rule 233 (binary-operator -> PLUS .)
    LS              reduce using rule 233 (binary-operator -> PLUS .)
    ID              reduce using rule 233 (binary-operator -> PLUS .)
    UNSAFE          reduce using rule 233 (binary-operator -> PLUS .)
    [               reduce using rule 233 (binary-operator -> PLUS .)
    TIMES           reduce using rule 233 (binary-operator -> PLUS .)
    AND             reduce using rule 233 (binary-operator -> PLUS .)
    SIZEOF          reduce using rule 233 (binary-operator -> PLUS .)
    MINUS           reduce using rule 233 (binary-operator -> PLUS .)
    !               reduce using rule 233 (binary-operator -> PLUS .)
    CONST           reduce using rule 233 (binary-operator -> PLUS .)
    INT             reduce using rule 233 (binary-operator -> PLUS .)
    FLOAT           reduce using rule 233 (binary-operator -> PLUS .)
    STR             reduce using rule 233 (binary-operator -> PLUS .)
    BOOL            reduce using rule 233 (binary-operator -> PLUS .)
    CHAR            reduce using rule 233 (binary-operator -> PLUS .)
    :               reduce using rule 233 (binary-operator -> PLUS .)


state 63

    (234) binary-operator -> MINUS .

    (               reduce using rule 234 (binary-operator -> MINUS .)
    LS              reduce using rule 234 (binary-operator -> MINUS .)
    ID              reduce using rule 234 (binary-operator -> MINUS .)
    UNSAFE          reduce using rule 234 (binary-operator -> MINUS .)
    [               reduce using rule 234 (binary-operator -> MINUS .)
    TIMES           reduce using rule 234 (binary-operator -> MINUS .)
    AND             reduce using rule 234 (binary-operator -> MINUS .)
    SIZEOF          reduce using rule 234 (binary-operator -> MINUS .)
    MINUS           reduce using rule 234 (binary-operator -> MINUS .)
    !               reduce using rule 234 (binary-operator -> MINUS .)
    CONST           reduce using rule 234 (binary-operator -> MINUS .)
    INT             reduce using rule 234 (binary-operator -> MINUS .)
    FLOAT           reduce using rule 234 (binary-operator -> MINUS .)
    STR             reduce using rule 234 (binary-operator -> MINUS .)
    BOOL            reduce using rule 234 (binary-operator -> MINUS .)
    CHAR            reduce using rule 234 (binary-operator -> MINUS .)
    :               reduce using rule 234 (binary-operator -> MINUS .)


state 64

    (235) binary-operator -> DIVIDE .

    (               reduce using rule 235 (binary-operator -> DIVIDE .)
    LS              reduce using rule 235 (binary-operator -> DIVIDE .)
    ID              reduce using rule 235 (binary-operator -> DIVIDE .)
    UNSAFE          reduce using rule 235 (binary-operator -> DIVIDE .)
    [               reduce using rule 235 (binary-operator -> DIVIDE .)
    TIMES           reduce using rule 235 (binary-operator -> DIVIDE .)
    AND             reduce using rule 235 (binary-operator -> DIVIDE .)
    SIZEOF          reduce using rule 235 (binary-operator -> DIVIDE .)
    MINUS           reduce using rule 235 (binary-operator -> DIVIDE .)
    !               reduce using rule 235 (binary-operator -> DIVIDE .)
    CONST           reduce using rule 235 (binary-operator -> DIVIDE .)
    INT             reduce using rule 235 (binary-operator -> DIVIDE .)
    FLOAT           reduce using rule 235 (binary-operator -> DIVIDE .)
    STR             reduce using rule 235 (binary-operator -> DIVIDE .)
    BOOL            reduce using rule 235 (binary-operator -> DIVIDE .)
    CHAR            reduce using rule 235 (binary-operator -> DIVIDE .)
    :               reduce using rule 235 (binary-operator -> DIVIDE .)


state 65

    (236) binary-operator -> MOD .

    (               reduce using rule 236 (binary-operator -> MOD .)
    LS              reduce using rule 236 (binary-operator -> MOD .)
    ID              reduce using rule 236 (binary-operator -> MOD .)
    UNSAFE          reduce using rule 236 (binary-operator -> MOD .)
    [               reduce using rule 236 (binary-operator -> MOD .)
    TIMES           reduce using rule 236 (binary-operator -> MOD .)
    AND             reduce using rule 236 (binary-operator -> MOD .)
    SIZEOF          reduce using rule 236 (binary-operator -> MOD .)
    MINUS           reduce using rule 236 (binary-operator -> MOD .)
    !               reduce using rule 236 (binary-operator -> MOD .)
    CONST           reduce using rule 236 (binary-operator -> MOD .)
    INT             reduce using rule 236 (binary-operator -> MOD .)
    FLOAT           reduce using rule 236 (binary-operator -> MOD .)
    STR             reduce using rule 236 (binary-operator -> MOD .)
    BOOL            reduce using rule 236 (binary-operator -> MOD .)
    CHAR            reduce using rule 236 (binary-operator -> MOD .)
    :               reduce using rule 236 (binary-operator -> MOD .)


state 66

    (237) binary-operator -> AND .

    (               reduce using rule 237 (binary-operator -> AND .)
    LS              reduce using rule 237 (binary-operator -> AND .)
    ID              reduce using rule 237 (binary-operator -> AND .)
    UNSAFE          reduce using rule 237 (binary-operator -> AND .)
    [               reduce using rule 237 (binary-operator -> AND .)
    TIMES           reduce using rule 237 (binary-operator -> AND .)
    AND             reduce using rule 237 (binary-operator -> AND .)
    SIZEOF          reduce using rule 237 (binary-operator -> AND .)
    MINUS           reduce using rule 237 (binary-operator -> AND .)
    !               reduce using rule 237 (binary-operator -> AND .)
    CONST           reduce using rule 237 (binary-operator -> AND .)
    INT             reduce using rule 237 (binary-operator -> AND .)
    FLOAT           reduce using rule 237 (binary-operator -> AND .)
    STR             reduce using rule 237 (binary-operator -> AND .)
    BOOL            reduce using rule 237 (binary-operator -> AND .)
    CHAR            reduce using rule 237 (binary-operator -> AND .)
    :               reduce using rule 237 (binary-operator -> AND .)


state 67

    (238) binary-operator -> OR .

    (               reduce using rule 238 (binary-operator -> OR .)
    LS              reduce using rule 238 (binary-operator -> OR .)
    ID              reduce using rule 238 (binary-operator -> OR .)
    UNSAFE          reduce using rule 238 (binary-operator -> OR .)
    [               reduce using rule 238 (binary-operator -> OR .)
    TIMES           reduce using rule 238 (binary-operator -> OR .)
    AND             reduce using rule 238 (binary-operator -> OR .)
    SIZEOF          reduce using rule 238 (binary-operator -> OR .)
    MINUS           reduce using rule 238 (binary-operator -> OR .)
    !               reduce using rule 238 (binary-operator -> OR .)
    CONST           reduce using rule 238 (binary-operator -> OR .)
    INT             reduce using rule 238 (binary-operator -> OR .)
    FLOAT           reduce using rule 238 (binary-operator -> OR .)
    STR             reduce using rule 238 (binary-operator -> OR .)
    BOOL            reduce using rule 238 (binary-operator -> OR .)
    CHAR            reduce using rule 238 (binary-operator -> OR .)
    :               reduce using rule 238 (binary-operator -> OR .)


state 68

    (239) binary-operator -> XOR .

    (               reduce using rule 239 (binary-operator -> XOR .)
    LS              reduce using rule 239 (binary-operator -> XOR .)
    ID              reduce using rule 239 (binary-operator -> XOR .)
    UNSAFE          reduce using rule 239 (binary-operator -> XOR .)
    [               reduce using rule 239 (binary-operator -> XOR .)
    TIMES           reduce using rule 239 (binary-operator -> XOR .)
    AND             reduce using rule 239 (binary-operator -> XOR .)
    SIZEOF          reduce using rule 239 (binary-operator -> XOR .)
    MINUS           reduce using rule 239 (binary-operator -> XOR .)
    !               reduce using rule 239 (binary-operator -> XOR .)
    CONST           reduce using rule 239 (binary-operator -> XOR .)
    INT             reduce using rule 239 (binary-operator -> XOR .)
    FLOAT           reduce using rule 239 (binary-operator -> XOR .)
    STR             reduce using rule 239 (binary-operator -> XOR .)
    BOOL            reduce using rule 239 (binary-operator -> XOR .)
    CHAR            reduce using rule 239 (binary-operator -> XOR .)
    :               reduce using rule 239 (binary-operator -> XOR .)


state 69

    (240) binary-operator -> LSHIFT .

    (               reduce using rule 240 (binary-operator -> LSHIFT .)
    LS              reduce using rule 240 (binary-operator -> LSHIFT .)
    ID              reduce using rule 240 (binary-operator -> LSHIFT .)
    UNSAFE          reduce using rule 240 (binary-operator -> LSHIFT .)
    [               reduce using rule 240 (binary-operator -> LSHIFT .)
    TIMES           reduce using rule 240 (binary-operator -> LSHIFT .)
    AND             reduce using rule 240 (binary-operator -> LSHIFT .)
    SIZEOF          reduce using rule 240 (binary-operator -> LSHIFT .)
    MINUS           reduce using rule 240 (binary-operator -> LSHIFT .)
    !               reduce using rule 240 (binary-operator -> LSHIFT .)
    CONST           reduce using rule 240 (binary-operator -> LSHIFT .)
    INT             reduce using rule 240 (binary-operator -> LSHIFT .)
    FLOAT           reduce using rule 240 (binary-operator -> LSHIFT .)
    STR             reduce using rule 240 (binary-operator -> LSHIFT .)
    BOOL            reduce using rule 240 (binary-operator -> LSHIFT .)
    CHAR            reduce using rule 240 (binary-operator -> LSHIFT .)
    :               reduce using rule 240 (binary-operator -> LSHIFT .)


state 70

    (241) binary-operator -> RSHIFT .

    (               reduce using rule 241 (binary-operator -> RSHIFT .)
    LS              reduce using rule 241 (binary-operator -> RSHIFT .)
    ID              reduce using rule 241 (binary-operator -> RSHIFT .)
    UNSAFE          reduce using rule 241 (binary-operator -> RSHIFT .)
    [               reduce using rule 241 (binary-operator -> RSHIFT .)
    TIMES           reduce using rule 241 (binary-operator -> RSHIFT .)
    AND             reduce using rule 241 (binary-operator -> RSHIFT .)
    SIZEOF          reduce using rule 241 (binary-operator -> RSHIFT .)
    MINUS           reduce using rule 241 (binary-operator -> RSHIFT .)
    !               reduce using rule 241 (binary-operator -> RSHIFT .)
    CONST           reduce using rule 241 (binary-operator -> RSHIFT .)
    INT             reduce using rule 241 (binary-operator -> RSHIFT .)
    FLOAT           reduce using rule 241 (binary-operator -> RSHIFT .)
    STR             reduce using rule 241 (binary-operator -> RSHIFT .)
    BOOL            reduce using rule 241 (binary-operator -> RSHIFT .)
    CHAR            reduce using rule 241 (binary-operator -> RSHIFT .)
    :               reduce using rule 241 (binary-operator -> RSHIFT .)


state 71

    (242) binary-operator -> LE .

    (               reduce using rule 242 (binary-operator -> LE .)
    LS              reduce using rule 242 (binary-operator -> LE .)
    ID              reduce using rule 242 (binary-operator -> LE .)
    UNSAFE          reduce using rule 242 (binary-operator -> LE .)
    [               reduce using rule 242 (binary-operator -> LE .)
    TIMES           reduce using rule 242 (binary-operator -> LE .)
    AND             reduce using rule 242 (binary-operator -> LE .)
    SIZEOF          reduce using rule 242 (binary-operator -> LE .)
    MINUS           reduce using rule 242 (binary-operator -> LE .)
    !               reduce using rule 242 (binary-operator -> LE .)
    CONST           reduce using rule 242 (binary-operator -> LE .)
    INT             reduce using rule 242 (binary-operator -> LE .)
    FLOAT           reduce using rule 242 (binary-operator -> LE .)
    STR             reduce using rule 242 (binary-operator -> LE .)
    BOOL            reduce using rule 242 (binary-operator -> LE .)
    CHAR            reduce using rule 242 (binary-operator -> LE .)
    :               reduce using rule 242 (binary-operator -> LE .)


state 72

    (243) binary-operator -> GE .

    (               reduce using rule 243 (binary-operator -> GE .)
    LS              reduce using rule 243 (binary-operator -> GE .)
    ID              reduce using rule 243 (binary-operator -> GE .)
    UNSAFE          reduce using rule 243 (binary-operator -> GE .)
    [               reduce using rule 243 (binary-operator -> GE .)
    TIMES           reduce using rule 243 (binary-operator -> GE .)
    AND             reduce using rule 243 (binary-operator -> GE .)
    SIZEOF          reduce using rule 243 (binary-operator -> GE .)
    MINUS           reduce using rule 243 (binary-operator -> GE .)
    !               reduce using rule 243 (binary-operator -> GE .)
    CONST           reduce using rule 243 (binary-operator -> GE .)
    INT             reduce using rule 243 (binary-operator -> GE .)
    FLOAT           reduce using rule 243 (binary-operator -> GE .)
    STR             reduce using rule 243 (binary-operator -> GE .)
    BOOL            reduce using rule 243 (binary-operator -> GE .)
    CHAR            reduce using rule 243 (binary-operator -> GE .)
    :               reduce using rule 243 (binary-operator -> GE .)


state 73

    (244) binary-operator -> EE .

    (               reduce using rule 244 (binary-operator -> EE .)
    LS              reduce using rule 244 (binary-operator -> EE .)
    ID              reduce using rule 244 (binary-operator -> EE .)
    UNSAFE          reduce using rule 244 (binary-operator -> EE .)
    [               reduce using rule 244 (binary-operator -> EE .)
    TIMES           reduce using rule 244 (binary-operator -> EE .)
    AND             reduce using rule 244 (binary-operator -> EE .)
    SIZEOF          reduce using rule 244 (binary-operator -> EE .)
    MINUS           reduce using rule 244 (binary-operator -> EE .)
    !               reduce using rule 244 (binary-operator -> EE .)
    CONST           reduce using rule 244 (binary-operator -> EE .)
    INT             reduce using rule 244 (binary-operator -> EE .)
    FLOAT           reduce using rule 244 (binary-operator -> EE .)
    STR             reduce using rule 244 (binary-operator -> EE .)
    BOOL            reduce using rule 244 (binary-operator -> EE .)
    CHAR            reduce using rule 244 (binary-operator -> EE .)
    :               reduce using rule 244 (binary-operator -> EE .)


state 74

    (245) binary-operator -> NE .

    (               reduce using rule 245 (binary-operator -> NE .)
    LS              reduce using rule 245 (binary-operator -> NE .)
    ID              reduce using rule 245 (binary-operator -> NE .)
    UNSAFE          reduce using rule 245 (binary-operator -> NE .)
    [               reduce using rule 245 (binary-operator -> NE .)
    TIMES           reduce using rule 245 (binary-operator -> NE .)
    AND             reduce using rule 245 (binary-operator -> NE .)
    SIZEOF          reduce using rule 245 (binary-operator -> NE .)
    MINUS           reduce using rule 245 (binary-operator -> NE .)
    !               reduce using rule 245 (binary-operator -> NE .)
    CONST           reduce using rule 245 (binary-operator -> NE .)
    INT             reduce using rule 245 (binary-operator -> NE .)
    FLOAT           reduce using rule 245 (binary-operator -> NE .)
    STR             reduce using rule 245 (binary-operator -> NE .)
    BOOL            reduce using rule 245 (binary-operator -> NE .)
    CHAR            reduce using rule 245 (binary-operator -> NE .)
    :               reduce using rule 245 (binary-operator -> NE .)


state 75

    (79) complicated-pointer-level -> TIMES TIMES .

    TIMES           reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    ID              reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    OPERATOR        reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    GR              reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    ,               reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    {               reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    )               reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)


state 76

    (80) template-declaration -> LS template-declaration-body . GR
    (83) template-declaration-body -> template-declaration-body . , ID
    (84) template-declaration-body -> template-declaration-body . , complicated-type

    GR              shift and go to state 124
    ,               shift and go to state 125


state 77

    (81) template-declaration -> LS ID . GR
    (85) template-declaration-body -> ID . , ID
    (87) template-declaration-body -> ID . , complicated-type
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    GR              shift and go to state 126
    ,               shift and go to state 127
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 78

    (82) template-declaration -> LS complicated-type . GR
    (86) template-declaration-body -> complicated-type . , ID
    (88) template-declaration-body -> complicated-type . , complicated-type

    GR              shift and go to state 128
    ,               shift and go to state 129


state 79

    (63) complicated-type -> ID : ID .
    (64) complicated-type -> ID : ID . TIMES
    (65) complicated-type -> ID : ID . complicated-pointer-level
    (69) complicated-type -> ID : ID . template-declaration
    (70) complicated-type -> ID : ID . template-declaration TIMES
    (71) complicated-type -> ID : ID . template-declaration complicated-pointer-level
    (5) package-complicated-name -> ID : ID .
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    ID              reduce using rule 63 (complicated-type -> ID : ID .)
    OPERATOR        reduce using rule 63 (complicated-type -> ID : ID .)
    GR              reduce using rule 63 (complicated-type -> ID : ID .)
    ,               reduce using rule 63 (complicated-type -> ID : ID .)
    {               reduce using rule 63 (complicated-type -> ID : ID .)
    )               reduce using rule 63 (complicated-type -> ID : ID .)
    TIMES           shift and go to state 130
    :               reduce using rule 5 (package-complicated-name -> ID : ID .)
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 131
    template-declaration           shift and go to state 132

state 80

    (78) complicated-pointer-level -> complicated-pointer-level TIMES .

    TIMES           reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)
    ID              reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)
    OPERATOR        reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)
    GR              reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)
    ,               reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)
    {               reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)
    )               reduce using rule 78 (complicated-pointer-level -> complicated-pointer-level TIMES .)


state 81

    (15) main -> complicated-type ID function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 133

state 82

    (17) main -> complicated-type ID template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 134

state 83

    (26) main -> complicated-type OPERATOR binary-operator . function-arguments function-body
    (34) main -> complicated-type OPERATOR binary-operator . template-declaration function-arguments function-body
    (40) main -> complicated-type OPERATOR binary-operator . ( ) function-arguments function-body
    (44) main -> complicated-type OPERATOR binary-operator . ( ) template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 137
    LS              shift and go to state 34

    function-arguments             shift and go to state 135
    template-declaration           shift and go to state 136

state 84

    (27) main -> complicated-type OPERATOR TIMES . function-arguments function-body
    (35) main -> complicated-type OPERATOR TIMES . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 138
    template-declaration           shift and go to state 139

state 85

    (28) main -> complicated-type OPERATOR LS . function-arguments function-body
    (36) main -> complicated-type OPERATOR LS . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 140
    template-declaration           shift and go to state 141

state 86

    (29) main -> complicated-type OPERATOR GR . function-arguments function-body
    (37) main -> complicated-type OPERATOR GR . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 142
    template-declaration           shift and go to state 143

state 87

    (47) main -> complicated-type OPERATOR ( . ) function-arguments function-body

    )               shift and go to state 144


state 88

    (41) main -> complicated-type OPERATOR ! . ( ) function-arguments function-body
    (45) main -> complicated-type OPERATOR ! . ( ) template-declaration function-arguments function-body

    (               shift and go to state 145


state 89

    (51) main -> complicated-type OPERATOR [ . ] function-arguments function-body
    (53) main -> complicated-type OPERATOR [ . ] template-declaration function-arguments function-body

    ]               shift and go to state 146


state 90

    (55) main -> complicated-type OPERATOR = . function-arguments function-body
    (57) main -> complicated-type OPERATOR = . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 147
    template-declaration           shift and go to state 148

state 91

    (18) main -> UNSAFE ID ID . function-arguments function-body
    (20) main -> UNSAFE ID ID . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 149
    template-declaration           shift and go to state 150

state 92

    (19) main -> UNSAFE complicated-type ID . function-arguments function-body
    (21) main -> UNSAFE complicated-type ID . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 151
    template-declaration           shift and go to state 152

state 93

    (48) main -> OPERATOR ~ function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 153

state 94

    (49) main -> OPERATOR ~ template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 154

state 95

    (58) main -> EXTERN ID ID . function-arguments ;
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 155

state 96

    (59) main -> EXTERN complicated-type ID . function-arguments ;
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 156

state 97

    (98) main -> EXTERN STRUCT ID . struct-body
    (99) struct-body -> . { struct-fields }

    {               shift and go to state 100

    struct-body                    shift and go to state 157

state 98

    (96) main -> STRUCT ID struct-body .

    ID              reduce using rule 96 (main -> STRUCT ID struct-body .)
    UNSAFE          reduce using rule 96 (main -> STRUCT ID struct-body .)
    OPERATOR        reduce using rule 96 (main -> STRUCT ID struct-body .)
    EXTERN          reduce using rule 96 (main -> STRUCT ID struct-body .)
    STRUCT          reduce using rule 96 (main -> STRUCT ID struct-body .)
    CONST           reduce using rule 96 (main -> STRUCT ID struct-body .)
    :               reduce using rule 96 (main -> STRUCT ID struct-body .)
    $end            reduce using rule 96 (main -> STRUCT ID struct-body .)


state 99

    (97) main -> STRUCT ID template-declaration . struct-body
    (99) struct-body -> . { struct-fields }

    {               shift and go to state 100

    struct-body                    shift and go to state 158

state 100

    (99) struct-body -> { . struct-fields }
    (100) struct-fields -> . struct-fields struct-field
    (101) struct-fields -> .

    }               reduce using rule 101 (struct-fields -> .)
    ID              reduce using rule 101 (struct-fields -> .)
    ACCMOD          reduce using rule 101 (struct-fields -> .)
    CONST           reduce using rule 101 (struct-fields -> .)
    :               reduce using rule 101 (struct-fields -> .)

    struct-fields                  shift and go to state 159

state 101

    (60) complicated-type -> package-complicated-name : ID .
    (61) complicated-type -> package-complicated-name : ID . TIMES
    (62) complicated-type -> package-complicated-name : ID . complicated-pointer-level
    (66) complicated-type -> package-complicated-name : ID . template-declaration
    (67) complicated-type -> package-complicated-name : ID . template-declaration TIMES
    (68) complicated-type -> package-complicated-name : ID . template-declaration complicated-pointer-level
    (4) package-complicated-name -> package-complicated-name : ID .
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    ID              reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    OPERATOR        reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    GR              reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    ,               reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    {               reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    )               reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    TIMES           shift and go to state 160
    :               reduce using rule 4 (package-complicated-name -> package-complicated-name : ID .)
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 161
    template-declaration           shift and go to state 162

state 102

    (14) main -> ID ID function-arguments function-body .

    ID              reduce using rule 14 (main -> ID ID function-arguments function-body .)
    UNSAFE          reduce using rule 14 (main -> ID ID function-arguments function-body .)
    OPERATOR        reduce using rule 14 (main -> ID ID function-arguments function-body .)
    EXTERN          reduce using rule 14 (main -> ID ID function-arguments function-body .)
    STRUCT          reduce using rule 14 (main -> ID ID function-arguments function-body .)
    CONST           reduce using rule 14 (main -> ID ID function-arguments function-body .)
    :               reduce using rule 14 (main -> ID ID function-arguments function-body .)
    $end            reduce using rule 14 (main -> ID ID function-arguments function-body .)


state 103

    (95) function-body -> { . expression-lines }
    (106) expression-lines -> . expression-lines expression-line
    (107) expression-lines -> . expression-line
    (108) expression-lines -> .
    (109) expression-line -> . complicated-expression ;
    (110) expression-line -> . return-statement
    (111) expression-line -> . variable-declaration
    (112) expression-line -> . if-statement
    (113) expression-line -> . while-statement
    (114) expression-line -> . unsafe-area
    (115) expression-line -> . visibility-area
    (116) expression-line -> . set-statement
    (117) expression-line -> . ID ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (118) return-statement -> . RETURN complicated-expression ;
    (119) return-statement -> . RETURN ID ;
    (120) variable-declaration -> . ID ID ;
    (121) variable-declaration -> . complicated-type ID ;
    (122) variable-declaration -> . ID ID = ID ;
    (123) variable-declaration -> . complicated-type ID = ID ;
    (124) variable-declaration -> . ID ID = complicated-expression ;
    (125) variable-declaration -> . complicated-type ID = complicated-expression ;
    (126) variable-declaration -> . VAR ID = ID ;
    (127) variable-declaration -> . VAR ID = complicated-expression ;
    (128) if-statement -> . IF complicated-expression visibility-area
    (129) if-statement -> . IF complicated-expression visibility-area ELSE visibility-area
    (130) if-statement -> . IF complicated-expression visibility-area ELSE if-statement
    (131) if-statement -> . IF ID visibility-area
    (132) if-statement -> . IF ID visibility-area ELSE visibility-area
    (133) if-statement -> . IF ID visibility-area ELSE if-statement
    (134) while-statement -> . WHILE complicated-expression visibility-area
    (135) while-statement -> . WHILE ID visibility-area
    (136) unsafe-area -> . UNSAFE visibility-area
    (158) visibility-area -> . function-body
    (154) set-statement -> . ID = ID ;
    (155) set-statement -> . complicated-expression = ID ;
    (156) set-statement -> . ID = complicated-expression ;
    (157) set-statement -> . complicated-expression = complicated-expression ;
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR
    (95) function-body -> . { expression-lines }

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNSAFE resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for : resolved using rule 6 (package-complicated-name -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               reduce using rule 108 (expression-lines -> .)
    ID              shift and go to state 173
    UNSAFE          shift and go to state 174
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    RETURN          shift and go to state 185
    VAR             shift and go to state 186
    IF              shift and go to state 187
    WHILE           shift and go to state 188
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194
    {               shift and go to state 103

  ! ID              [ reduce using rule 108 (expression-lines -> .) ]
  ! UNSAFE          [ reduce using rule 108 (expression-lines -> .) ]
  ! [               [ reduce using rule 108 (expression-lines -> .) ]
  ! TIMES           [ reduce using rule 108 (expression-lines -> .) ]
  ! AND             [ reduce using rule 108 (expression-lines -> .) ]
  ! SIZEOF          [ reduce using rule 108 (expression-lines -> .) ]
  ! MINUS           [ reduce using rule 108 (expression-lines -> .) ]
  ! !               [ reduce using rule 108 (expression-lines -> .) ]
  ! (               [ reduce using rule 108 (expression-lines -> .) ]
  ! RETURN          [ reduce using rule 108 (expression-lines -> .) ]
  ! VAR             [ reduce using rule 108 (expression-lines -> .) ]
  ! IF              [ reduce using rule 108 (expression-lines -> .) ]
  ! WHILE           [ reduce using rule 108 (expression-lines -> .) ]
  ! CONST           [ reduce using rule 108 (expression-lines -> .) ]
  ! INT             [ reduce using rule 108 (expression-lines -> .) ]
  ! FLOAT           [ reduce using rule 108 (expression-lines -> .) ]
  ! STR             [ reduce using rule 108 (expression-lines -> .) ]
  ! BOOL            [ reduce using rule 108 (expression-lines -> .) ]
  ! CHAR            [ reduce using rule 108 (expression-lines -> .) ]
  ! {               [ reduce using rule 108 (expression-lines -> .) ]
  ! :               [ reduce using rule 108 (expression-lines -> .) ]

    expression-lines               shift and go to state 163
    expression-line                shift and go to state 164
    complicated-expression         shift and go to state 165
    return-statement               shift and go to state 166
    variable-declaration           shift and go to state 167
    if-statement                   shift and go to state 168
    while-statement                shift and go to state 169
    unsafe-area                    shift and go to state 170
    visibility-area                shift and go to state 171
    set-statement                  shift and go to state 172
    complicated-type               shift and go to state 176
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184
    function-body                  shift and go to state 189

state 104

    (16) main -> ID ID template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 195

state 105

    (89) function-arguments -> ( function-arguments-body . )
    (91) function-arguments-body -> function-arguments-body . , function-argument

    )               shift and go to state 196
    ,               shift and go to state 197


state 106

    (90) function-arguments -> ( ) .

    {               reduce using rule 90 (function-arguments -> ( ) .)
    ;               reduce using rule 90 (function-arguments -> ( ) .)


state 107

    (92) function-arguments-body -> function-argument .

    )               reduce using rule 92 (function-arguments-body -> function-argument .)
    ,               reduce using rule 92 (function-arguments-body -> function-argument .)


state 108

    (93) function-argument -> ID . ID
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              shift and go to state 198
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 109

    (94) function-argument -> complicated-type . ID

    ID              shift and go to state 199


state 110

    (22) main -> ID OPERATOR binary-operator function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 200

state 111

    (30) main -> ID OPERATOR binary-operator template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 201

state 112

    (38) main -> ID OPERATOR binary-operator ( . ) function-arguments function-body
    (42) main -> ID OPERATOR binary-operator ( . ) template-declaration function-arguments function-body
    (89) function-arguments -> ( . function-arguments-body )
    (90) function-arguments -> ( . )
    (91) function-arguments-body -> . function-arguments-body , function-argument
    (92) function-arguments-body -> . function-argument
    (93) function-argument -> . ID ID
    (94) function-argument -> . complicated-type ID
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    )               shift and go to state 202
    ID              shift and go to state 108
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    function-arguments-body        shift and go to state 105
    function-argument              shift and go to state 107
    complicated-type               shift and go to state 109
    package-complicated-name       shift and go to state 24

state 113

    (23) main -> ID OPERATOR TIMES function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 203

state 114

    (31) main -> ID OPERATOR TIMES template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 204

state 115

    (24) main -> ID OPERATOR LS function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 205

state 116

    (32) main -> ID OPERATOR LS template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 206

state 117

    (25) main -> ID OPERATOR GR function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 207

state 118

    (33) main -> ID OPERATOR GR template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 208

state 119

    (46) main -> ID OPERATOR ( ) . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 209

state 120

    (39) main -> ID OPERATOR ! ( . ) function-arguments function-body
    (43) main -> ID OPERATOR ! ( . ) template-declaration function-arguments function-body

    )               shift and go to state 210


state 121

    (50) main -> ID OPERATOR [ ] . function-arguments function-body
    (52) main -> ID OPERATOR [ ] . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 211
    template-declaration           shift and go to state 212

state 122

    (54) main -> ID OPERATOR = function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 213

state 123

    (56) main -> ID OPERATOR = template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 214

state 124

    (80) template-declaration -> LS template-declaration-body GR .

    TIMES           reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    ID              reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    OPERATOR        reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    (               reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    {               reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    GR              reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    ,               reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)
    )               reduce using rule 80 (template-declaration -> LS template-declaration-body GR .)


state 125

    (83) template-declaration-body -> template-declaration-body , . ID
    (84) template-declaration-body -> template-declaration-body , . complicated-type
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 215
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 216
    package-complicated-name       shift and go to state 24

state 126

    (81) template-declaration -> LS ID GR .

    TIMES           reduce using rule 81 (template-declaration -> LS ID GR .)
    ID              reduce using rule 81 (template-declaration -> LS ID GR .)
    OPERATOR        reduce using rule 81 (template-declaration -> LS ID GR .)
    (               reduce using rule 81 (template-declaration -> LS ID GR .)
    {               reduce using rule 81 (template-declaration -> LS ID GR .)
    GR              reduce using rule 81 (template-declaration -> LS ID GR .)
    ,               reduce using rule 81 (template-declaration -> LS ID GR .)
    )               reduce using rule 81 (template-declaration -> LS ID GR .)


state 127

    (85) template-declaration-body -> ID , . ID
    (87) template-declaration-body -> ID , . complicated-type
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 217
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 218
    package-complicated-name       shift and go to state 24

state 128

    (82) template-declaration -> LS complicated-type GR .

    TIMES           reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    ID              reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    OPERATOR        reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    (               reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    {               reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    GR              reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    ,               reduce using rule 82 (template-declaration -> LS complicated-type GR .)
    )               reduce using rule 82 (template-declaration -> LS complicated-type GR .)


state 129

    (86) template-declaration-body -> complicated-type , . ID
    (88) template-declaration-body -> complicated-type , . complicated-type
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 220
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 219
    package-complicated-name       shift and go to state 24

state 130

    (64) complicated-type -> ID : ID TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES

    ID              reduce using rule 64 (complicated-type -> ID : ID TIMES .)
    OPERATOR        reduce using rule 64 (complicated-type -> ID : ID TIMES .)
    GR              reduce using rule 64 (complicated-type -> ID : ID TIMES .)
    ,               reduce using rule 64 (complicated-type -> ID : ID TIMES .)
    {               reduce using rule 64 (complicated-type -> ID : ID TIMES .)
    )               reduce using rule 64 (complicated-type -> ID : ID TIMES .)
    TIMES           shift and go to state 75


state 131

    (65) complicated-type -> ID : ID complicated-pointer-level .
    (78) complicated-pointer-level -> complicated-pointer-level . TIMES

    ID              reduce using rule 65 (complicated-type -> ID : ID complicated-pointer-level .)
    OPERATOR        reduce using rule 65 (complicated-type -> ID : ID complicated-pointer-level .)
    GR              reduce using rule 65 (complicated-type -> ID : ID complicated-pointer-level .)
    ,               reduce using rule 65 (complicated-type -> ID : ID complicated-pointer-level .)
    {               reduce using rule 65 (complicated-type -> ID : ID complicated-pointer-level .)
    )               reduce using rule 65 (complicated-type -> ID : ID complicated-pointer-level .)
    TIMES           shift and go to state 80


state 132

    (69) complicated-type -> ID : ID template-declaration .
    (70) complicated-type -> ID : ID template-declaration . TIMES
    (71) complicated-type -> ID : ID template-declaration . complicated-pointer-level
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    OPERATOR        reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    GR              reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    ,               reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    {               reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    )               reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    TIMES           shift and go to state 221

    complicated-pointer-level      shift and go to state 222

state 133

    (15) main -> complicated-type ID function-arguments function-body .

    ID              reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    UNSAFE          reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    OPERATOR        reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    EXTERN          reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    STRUCT          reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    CONST           reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    :               reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)
    $end            reduce using rule 15 (main -> complicated-type ID function-arguments function-body .)


state 134

    (17) main -> complicated-type ID template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 223

state 135

    (26) main -> complicated-type OPERATOR binary-operator function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 224

state 136

    (34) main -> complicated-type OPERATOR binary-operator template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 225

state 137

    (40) main -> complicated-type OPERATOR binary-operator ( . ) function-arguments function-body
    (44) main -> complicated-type OPERATOR binary-operator ( . ) template-declaration function-arguments function-body
    (89) function-arguments -> ( . function-arguments-body )
    (90) function-arguments -> ( . )
    (91) function-arguments-body -> . function-arguments-body , function-argument
    (92) function-arguments-body -> . function-argument
    (93) function-argument -> . ID ID
    (94) function-argument -> . complicated-type ID
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    )               shift and go to state 226
    ID              shift and go to state 108
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 109
    function-arguments-body        shift and go to state 105
    function-argument              shift and go to state 107
    package-complicated-name       shift and go to state 24

state 138

    (27) main -> complicated-type OPERATOR TIMES function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 227

state 139

    (35) main -> complicated-type OPERATOR TIMES template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 228

state 140

    (28) main -> complicated-type OPERATOR LS function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 229

state 141

    (36) main -> complicated-type OPERATOR LS template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 230

state 142

    (29) main -> complicated-type OPERATOR GR function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 231

state 143

    (37) main -> complicated-type OPERATOR GR template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 232

state 144

    (47) main -> complicated-type OPERATOR ( ) . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 233

state 145

    (41) main -> complicated-type OPERATOR ! ( . ) function-arguments function-body
    (45) main -> complicated-type OPERATOR ! ( . ) template-declaration function-arguments function-body

    )               shift and go to state 234


state 146

    (51) main -> complicated-type OPERATOR [ ] . function-arguments function-body
    (53) main -> complicated-type OPERATOR [ ] . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 235
    template-declaration           shift and go to state 236

state 147

    (55) main -> complicated-type OPERATOR = function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 237

state 148

    (57) main -> complicated-type OPERATOR = template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 238

state 149

    (18) main -> UNSAFE ID ID function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 239

state 150

    (20) main -> UNSAFE ID ID template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 240

state 151

    (19) main -> UNSAFE complicated-type ID function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 241

state 152

    (21) main -> UNSAFE complicated-type ID template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 242

state 153

    (48) main -> OPERATOR ~ function-arguments function-body .

    ID              reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    UNSAFE          reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    OPERATOR        reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    EXTERN          reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    STRUCT          reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    CONST           reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    :               reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)
    $end            reduce using rule 48 (main -> OPERATOR ~ function-arguments function-body .)


state 154

    (49) main -> OPERATOR ~ template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 243

state 155

    (58) main -> EXTERN ID ID function-arguments . ;

    ;               shift and go to state 244


state 156

    (59) main -> EXTERN complicated-type ID function-arguments . ;

    ;               shift and go to state 245


state 157

    (98) main -> EXTERN STRUCT ID struct-body .

    ID              reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    UNSAFE          reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    OPERATOR        reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    EXTERN          reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    STRUCT          reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    CONST           reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    :               reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)
    $end            reduce using rule 98 (main -> EXTERN STRUCT ID struct-body .)


state 158

    (97) main -> STRUCT ID template-declaration struct-body .

    ID              reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    UNSAFE          reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    OPERATOR        reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    EXTERN          reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    STRUCT          reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    CONST           reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    :               reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)
    $end            reduce using rule 97 (main -> STRUCT ID template-declaration struct-body .)


state 159

    (99) struct-body -> { struct-fields . }
    (100) struct-fields -> struct-fields . struct-field
    (102) struct-field -> . ID ID ;
    (103) struct-field -> . complicated-type ID ;
    (104) struct-field -> . ACCMOD ID ID ;
    (105) struct-field -> . ACCMOD complicated-type ID ;
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    }               shift and go to state 246
    ID              shift and go to state 248
    ACCMOD          shift and go to state 250
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    struct-field                   shift and go to state 247
    complicated-type               shift and go to state 249
    package-complicated-name       shift and go to state 24

state 160

    (61) complicated-type -> package-complicated-name : ID TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES

    ID              reduce using rule 61 (complicated-type -> package-complicated-name : ID TIMES .)
    OPERATOR        reduce using rule 61 (complicated-type -> package-complicated-name : ID TIMES .)
    GR              reduce using rule 61 (complicated-type -> package-complicated-name : ID TIMES .)
    ,               reduce using rule 61 (complicated-type -> package-complicated-name : ID TIMES .)
    {               reduce using rule 61 (complicated-type -> package-complicated-name : ID TIMES .)
    )               reduce using rule 61 (complicated-type -> package-complicated-name : ID TIMES .)
    TIMES           shift and go to state 75


state 161

    (62) complicated-type -> package-complicated-name : ID complicated-pointer-level .
    (78) complicated-pointer-level -> complicated-pointer-level . TIMES

    ID              reduce using rule 62 (complicated-type -> package-complicated-name : ID complicated-pointer-level .)
    OPERATOR        reduce using rule 62 (complicated-type -> package-complicated-name : ID complicated-pointer-level .)
    GR              reduce using rule 62 (complicated-type -> package-complicated-name : ID complicated-pointer-level .)
    ,               reduce using rule 62 (complicated-type -> package-complicated-name : ID complicated-pointer-level .)
    {               reduce using rule 62 (complicated-type -> package-complicated-name : ID complicated-pointer-level .)
    )               reduce using rule 62 (complicated-type -> package-complicated-name : ID complicated-pointer-level .)
    TIMES           shift and go to state 80


state 162

    (66) complicated-type -> package-complicated-name : ID template-declaration .
    (67) complicated-type -> package-complicated-name : ID template-declaration . TIMES
    (68) complicated-type -> package-complicated-name : ID template-declaration . complicated-pointer-level
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    OPERATOR        reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    GR              reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    ,               reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    {               reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    )               reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    TIMES           shift and go to state 251

    complicated-pointer-level      shift and go to state 252

state 163

    (95) function-body -> { expression-lines . }
    (106) expression-lines -> expression-lines . expression-line
    (109) expression-line -> . complicated-expression ;
    (110) expression-line -> . return-statement
    (111) expression-line -> . variable-declaration
    (112) expression-line -> . if-statement
    (113) expression-line -> . while-statement
    (114) expression-line -> . unsafe-area
    (115) expression-line -> . visibility-area
    (116) expression-line -> . set-statement
    (117) expression-line -> . ID ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (118) return-statement -> . RETURN complicated-expression ;
    (119) return-statement -> . RETURN ID ;
    (120) variable-declaration -> . ID ID ;
    (121) variable-declaration -> . complicated-type ID ;
    (122) variable-declaration -> . ID ID = ID ;
    (123) variable-declaration -> . complicated-type ID = ID ;
    (124) variable-declaration -> . ID ID = complicated-expression ;
    (125) variable-declaration -> . complicated-type ID = complicated-expression ;
    (126) variable-declaration -> . VAR ID = ID ;
    (127) variable-declaration -> . VAR ID = complicated-expression ;
    (128) if-statement -> . IF complicated-expression visibility-area
    (129) if-statement -> . IF complicated-expression visibility-area ELSE visibility-area
    (130) if-statement -> . IF complicated-expression visibility-area ELSE if-statement
    (131) if-statement -> . IF ID visibility-area
    (132) if-statement -> . IF ID visibility-area ELSE visibility-area
    (133) if-statement -> . IF ID visibility-area ELSE if-statement
    (134) while-statement -> . WHILE complicated-expression visibility-area
    (135) while-statement -> . WHILE ID visibility-area
    (136) unsafe-area -> . UNSAFE visibility-area
    (158) visibility-area -> . function-body
    (154) set-statement -> . ID = ID ;
    (155) set-statement -> . complicated-expression = ID ;
    (156) set-statement -> . ID = complicated-expression ;
    (157) set-statement -> . complicated-expression = complicated-expression ;
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR
    (95) function-body -> . { expression-lines }

    }               shift and go to state 253
    ID              shift and go to state 173
    UNSAFE          shift and go to state 174
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    RETURN          shift and go to state 185
    VAR             shift and go to state 186
    IF              shift and go to state 187
    WHILE           shift and go to state 188
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194
    {               shift and go to state 103

    expression-line                shift and go to state 254
    complicated-expression         shift and go to state 165
    return-statement               shift and go to state 166
    variable-declaration           shift and go to state 167
    if-statement                   shift and go to state 168
    while-statement                shift and go to state 169
    unsafe-area                    shift and go to state 170
    visibility-area                shift and go to state 171
    set-statement                  shift and go to state 172
    complicated-type               shift and go to state 176
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184
    function-body                  shift and go to state 189

state 164

    (107) expression-lines -> expression-line .

    }               reduce using rule 107 (expression-lines -> expression-line .)
    ID              reduce using rule 107 (expression-lines -> expression-line .)
    UNSAFE          reduce using rule 107 (expression-lines -> expression-line .)
    [               reduce using rule 107 (expression-lines -> expression-line .)
    TIMES           reduce using rule 107 (expression-lines -> expression-line .)
    AND             reduce using rule 107 (expression-lines -> expression-line .)
    SIZEOF          reduce using rule 107 (expression-lines -> expression-line .)
    MINUS           reduce using rule 107 (expression-lines -> expression-line .)
    !               reduce using rule 107 (expression-lines -> expression-line .)
    (               reduce using rule 107 (expression-lines -> expression-line .)
    RETURN          reduce using rule 107 (expression-lines -> expression-line .)
    VAR             reduce using rule 107 (expression-lines -> expression-line .)
    IF              reduce using rule 107 (expression-lines -> expression-line .)
    WHILE           reduce using rule 107 (expression-lines -> expression-line .)
    CONST           reduce using rule 107 (expression-lines -> expression-line .)
    INT             reduce using rule 107 (expression-lines -> expression-line .)
    FLOAT           reduce using rule 107 (expression-lines -> expression-line .)
    STR             reduce using rule 107 (expression-lines -> expression-line .)
    BOOL            reduce using rule 107 (expression-lines -> expression-line .)
    CHAR            reduce using rule 107 (expression-lines -> expression-line .)
    {               reduce using rule 107 (expression-lines -> expression-line .)
    :               reduce using rule 107 (expression-lines -> expression-line .)


state 165

    (109) expression-line -> complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (155) set-statement -> complicated-expression . = ID ;
    (157) set-statement -> complicated-expression . = complicated-expression ;
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 255
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    =               shift and go to state 263
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 166

    (110) expression-line -> return-statement .

    }               reduce using rule 110 (expression-line -> return-statement .)
    ID              reduce using rule 110 (expression-line -> return-statement .)
    UNSAFE          reduce using rule 110 (expression-line -> return-statement .)
    [               reduce using rule 110 (expression-line -> return-statement .)
    TIMES           reduce using rule 110 (expression-line -> return-statement .)
    AND             reduce using rule 110 (expression-line -> return-statement .)
    SIZEOF          reduce using rule 110 (expression-line -> return-statement .)
    MINUS           reduce using rule 110 (expression-line -> return-statement .)
    !               reduce using rule 110 (expression-line -> return-statement .)
    (               reduce using rule 110 (expression-line -> return-statement .)
    RETURN          reduce using rule 110 (expression-line -> return-statement .)
    VAR             reduce using rule 110 (expression-line -> return-statement .)
    IF              reduce using rule 110 (expression-line -> return-statement .)
    WHILE           reduce using rule 110 (expression-line -> return-statement .)
    CONST           reduce using rule 110 (expression-line -> return-statement .)
    INT             reduce using rule 110 (expression-line -> return-statement .)
    FLOAT           reduce using rule 110 (expression-line -> return-statement .)
    STR             reduce using rule 110 (expression-line -> return-statement .)
    BOOL            reduce using rule 110 (expression-line -> return-statement .)
    CHAR            reduce using rule 110 (expression-line -> return-statement .)
    {               reduce using rule 110 (expression-line -> return-statement .)
    :               reduce using rule 110 (expression-line -> return-statement .)


state 167

    (111) expression-line -> variable-declaration .

    }               reduce using rule 111 (expression-line -> variable-declaration .)
    ID              reduce using rule 111 (expression-line -> variable-declaration .)
    UNSAFE          reduce using rule 111 (expression-line -> variable-declaration .)
    [               reduce using rule 111 (expression-line -> variable-declaration .)
    TIMES           reduce using rule 111 (expression-line -> variable-declaration .)
    AND             reduce using rule 111 (expression-line -> variable-declaration .)
    SIZEOF          reduce using rule 111 (expression-line -> variable-declaration .)
    MINUS           reduce using rule 111 (expression-line -> variable-declaration .)
    !               reduce using rule 111 (expression-line -> variable-declaration .)
    (               reduce using rule 111 (expression-line -> variable-declaration .)
    RETURN          reduce using rule 111 (expression-line -> variable-declaration .)
    VAR             reduce using rule 111 (expression-line -> variable-declaration .)
    IF              reduce using rule 111 (expression-line -> variable-declaration .)
    WHILE           reduce using rule 111 (expression-line -> variable-declaration .)
    CONST           reduce using rule 111 (expression-line -> variable-declaration .)
    INT             reduce using rule 111 (expression-line -> variable-declaration .)
    FLOAT           reduce using rule 111 (expression-line -> variable-declaration .)
    STR             reduce using rule 111 (expression-line -> variable-declaration .)
    BOOL            reduce using rule 111 (expression-line -> variable-declaration .)
    CHAR            reduce using rule 111 (expression-line -> variable-declaration .)
    {               reduce using rule 111 (expression-line -> variable-declaration .)
    :               reduce using rule 111 (expression-line -> variable-declaration .)


state 168

    (112) expression-line -> if-statement .

    }               reduce using rule 112 (expression-line -> if-statement .)
    ID              reduce using rule 112 (expression-line -> if-statement .)
    UNSAFE          reduce using rule 112 (expression-line -> if-statement .)
    [               reduce using rule 112 (expression-line -> if-statement .)
    TIMES           reduce using rule 112 (expression-line -> if-statement .)
    AND             reduce using rule 112 (expression-line -> if-statement .)
    SIZEOF          reduce using rule 112 (expression-line -> if-statement .)
    MINUS           reduce using rule 112 (expression-line -> if-statement .)
    !               reduce using rule 112 (expression-line -> if-statement .)
    (               reduce using rule 112 (expression-line -> if-statement .)
    RETURN          reduce using rule 112 (expression-line -> if-statement .)
    VAR             reduce using rule 112 (expression-line -> if-statement .)
    IF              reduce using rule 112 (expression-line -> if-statement .)
    WHILE           reduce using rule 112 (expression-line -> if-statement .)
    CONST           reduce using rule 112 (expression-line -> if-statement .)
    INT             reduce using rule 112 (expression-line -> if-statement .)
    FLOAT           reduce using rule 112 (expression-line -> if-statement .)
    STR             reduce using rule 112 (expression-line -> if-statement .)
    BOOL            reduce using rule 112 (expression-line -> if-statement .)
    CHAR            reduce using rule 112 (expression-line -> if-statement .)
    {               reduce using rule 112 (expression-line -> if-statement .)
    :               reduce using rule 112 (expression-line -> if-statement .)


state 169

    (113) expression-line -> while-statement .

    }               reduce using rule 113 (expression-line -> while-statement .)
    ID              reduce using rule 113 (expression-line -> while-statement .)
    UNSAFE          reduce using rule 113 (expression-line -> while-statement .)
    [               reduce using rule 113 (expression-line -> while-statement .)
    TIMES           reduce using rule 113 (expression-line -> while-statement .)
    AND             reduce using rule 113 (expression-line -> while-statement .)
    SIZEOF          reduce using rule 113 (expression-line -> while-statement .)
    MINUS           reduce using rule 113 (expression-line -> while-statement .)
    !               reduce using rule 113 (expression-line -> while-statement .)
    (               reduce using rule 113 (expression-line -> while-statement .)
    RETURN          reduce using rule 113 (expression-line -> while-statement .)
    VAR             reduce using rule 113 (expression-line -> while-statement .)
    IF              reduce using rule 113 (expression-line -> while-statement .)
    WHILE           reduce using rule 113 (expression-line -> while-statement .)
    CONST           reduce using rule 113 (expression-line -> while-statement .)
    INT             reduce using rule 113 (expression-line -> while-statement .)
    FLOAT           reduce using rule 113 (expression-line -> while-statement .)
    STR             reduce using rule 113 (expression-line -> while-statement .)
    BOOL            reduce using rule 113 (expression-line -> while-statement .)
    CHAR            reduce using rule 113 (expression-line -> while-statement .)
    {               reduce using rule 113 (expression-line -> while-statement .)
    :               reduce using rule 113 (expression-line -> while-statement .)


state 170

    (114) expression-line -> unsafe-area .

    }               reduce using rule 114 (expression-line -> unsafe-area .)
    ID              reduce using rule 114 (expression-line -> unsafe-area .)
    UNSAFE          reduce using rule 114 (expression-line -> unsafe-area .)
    [               reduce using rule 114 (expression-line -> unsafe-area .)
    TIMES           reduce using rule 114 (expression-line -> unsafe-area .)
    AND             reduce using rule 114 (expression-line -> unsafe-area .)
    SIZEOF          reduce using rule 114 (expression-line -> unsafe-area .)
    MINUS           reduce using rule 114 (expression-line -> unsafe-area .)
    !               reduce using rule 114 (expression-line -> unsafe-area .)
    (               reduce using rule 114 (expression-line -> unsafe-area .)
    RETURN          reduce using rule 114 (expression-line -> unsafe-area .)
    VAR             reduce using rule 114 (expression-line -> unsafe-area .)
    IF              reduce using rule 114 (expression-line -> unsafe-area .)
    WHILE           reduce using rule 114 (expression-line -> unsafe-area .)
    CONST           reduce using rule 114 (expression-line -> unsafe-area .)
    INT             reduce using rule 114 (expression-line -> unsafe-area .)
    FLOAT           reduce using rule 114 (expression-line -> unsafe-area .)
    STR             reduce using rule 114 (expression-line -> unsafe-area .)
    BOOL            reduce using rule 114 (expression-line -> unsafe-area .)
    CHAR            reduce using rule 114 (expression-line -> unsafe-area .)
    {               reduce using rule 114 (expression-line -> unsafe-area .)
    :               reduce using rule 114 (expression-line -> unsafe-area .)


state 171

    (115) expression-line -> visibility-area .

    }               reduce using rule 115 (expression-line -> visibility-area .)
    ID              reduce using rule 115 (expression-line -> visibility-area .)
    UNSAFE          reduce using rule 115 (expression-line -> visibility-area .)
    [               reduce using rule 115 (expression-line -> visibility-area .)
    TIMES           reduce using rule 115 (expression-line -> visibility-area .)
    AND             reduce using rule 115 (expression-line -> visibility-area .)
    SIZEOF          reduce using rule 115 (expression-line -> visibility-area .)
    MINUS           reduce using rule 115 (expression-line -> visibility-area .)
    !               reduce using rule 115 (expression-line -> visibility-area .)
    (               reduce using rule 115 (expression-line -> visibility-area .)
    RETURN          reduce using rule 115 (expression-line -> visibility-area .)
    VAR             reduce using rule 115 (expression-line -> visibility-area .)
    IF              reduce using rule 115 (expression-line -> visibility-area .)
    WHILE           reduce using rule 115 (expression-line -> visibility-area .)
    CONST           reduce using rule 115 (expression-line -> visibility-area .)
    INT             reduce using rule 115 (expression-line -> visibility-area .)
    FLOAT           reduce using rule 115 (expression-line -> visibility-area .)
    STR             reduce using rule 115 (expression-line -> visibility-area .)
    BOOL            reduce using rule 115 (expression-line -> visibility-area .)
    CHAR            reduce using rule 115 (expression-line -> visibility-area .)
    {               reduce using rule 115 (expression-line -> visibility-area .)
    :               reduce using rule 115 (expression-line -> visibility-area .)


state 172

    (116) expression-line -> set-statement .

    }               reduce using rule 116 (expression-line -> set-statement .)
    ID              reduce using rule 116 (expression-line -> set-statement .)
    UNSAFE          reduce using rule 116 (expression-line -> set-statement .)
    [               reduce using rule 116 (expression-line -> set-statement .)
    TIMES           reduce using rule 116 (expression-line -> set-statement .)
    AND             reduce using rule 116 (expression-line -> set-statement .)
    SIZEOF          reduce using rule 116 (expression-line -> set-statement .)
    MINUS           reduce using rule 116 (expression-line -> set-statement .)
    !               reduce using rule 116 (expression-line -> set-statement .)
    (               reduce using rule 116 (expression-line -> set-statement .)
    RETURN          reduce using rule 116 (expression-line -> set-statement .)
    VAR             reduce using rule 116 (expression-line -> set-statement .)
    IF              reduce using rule 116 (expression-line -> set-statement .)
    WHILE           reduce using rule 116 (expression-line -> set-statement .)
    CONST           reduce using rule 116 (expression-line -> set-statement .)
    INT             reduce using rule 116 (expression-line -> set-statement .)
    FLOAT           reduce using rule 116 (expression-line -> set-statement .)
    STR             reduce using rule 116 (expression-line -> set-statement .)
    BOOL            reduce using rule 116 (expression-line -> set-statement .)
    CHAR            reduce using rule 116 (expression-line -> set-statement .)
    {               reduce using rule 116 (expression-line -> set-statement .)
    :               reduce using rule 116 (expression-line -> set-statement .)


state 173

    (117) expression-line -> ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (120) variable-declaration -> ID . ID ;
    (122) variable-declaration -> ID . ID = ID ;
    (124) variable-declaration -> ID . ID = complicated-expression ;
    (154) set-statement -> ID . = ID ;
    (156) set-statement -> ID . = complicated-expression ;
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 275
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    ID              shift and go to state 274
    =               shift and go to state 287
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 174

    (137) complicated-expression -> UNSAFE . complicated-expression
    (136) unsafe-area -> UNSAFE . visibility-area
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (158) visibility-area -> . function-body
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR
    (95) function-body -> . { expression-lines }

    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    ID              shift and go to state 292
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194
    {               shift and go to state 103

    complicated-expression         shift and go to state 290
    visibility-area                shift and go to state 291
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184
    function-body                  shift and go to state 189

state 175

    (138) complicated-expression -> [ . ]
    (139) complicated-expression -> [ . ID ]
    (140) complicated-expression -> [ . complicated-expression ]
    (141) complicated-expression -> [ . invoke-arguments-list ]
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (186) invoke-arguments-list -> . invoke-arguments-list , ID
    (187) invoke-arguments-list -> . invoke-arguments-list , complicated-expression
    (188) invoke-arguments-list -> . ID , ID
    (189) invoke-arguments-list -> . complicated-expression , ID
    (190) invoke-arguments-list -> . ID , complicated-expression
    (191) invoke-arguments-list -> . complicated-expression , complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ]               shift and go to state 294
    ID              shift and go to state 295
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 296
    invoke-arguments-list          shift and go to state 297
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 176

    (143) complicated-expression -> complicated-type . { invoke-arguments-list }
    (146) complicated-expression -> complicated-type . { ID }
    (147) complicated-expression -> complicated-type . { complicated-expression }
    (149) complicated-expression -> complicated-type . { }
    (121) variable-declaration -> complicated-type . ID ;
    (123) variable-declaration -> complicated-type . ID = ID ;
    (125) variable-declaration -> complicated-type . ID = complicated-expression ;

    {               shift and go to state 298
    ID              shift and go to state 299


state 177

    (164) complicated-expression -> TIMES . ID
    (165) complicated-expression -> TIMES . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 300
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 301
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 178

    (166) complicated-expression -> AND . ID
    (167) complicated-expression -> AND . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 302
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 303
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 179

    (170) complicated-expression -> SIZEOF . ( ID )
    (171) complicated-expression -> SIZEOF . ( complicated-type )

    (               shift and go to state 304


state 180

    (213) complicated-expression -> ( . ID )
    (214) complicated-expression -> ( . complicated-expression )
    (215) complicated-expression -> ( . ID ) ID
    (216) complicated-expression -> ( . ID ) complicated-expression
    (217) complicated-expression -> ( . complicated-type ) ID
    (218) complicated-expression -> ( . complicated-type ) complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 305
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 306
    complicated-type               shift and go to state 307
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 181

    (174) complicated-expression -> package-complicated-name . : ID invoke-arguments
    (177) complicated-expression -> package-complicated-name . : ID template-declaration invoke-arguments
    (60) complicated-type -> package-complicated-name . : ID
    (61) complicated-type -> package-complicated-name . : ID TIMES
    (62) complicated-type -> package-complicated-name . : ID complicated-pointer-level
    (66) complicated-type -> package-complicated-name . : ID template-declaration
    (67) complicated-type -> package-complicated-name . : ID template-declaration TIMES
    (68) complicated-type -> package-complicated-name . : ID template-declaration complicated-pointer-level
    (4) package-complicated-name -> package-complicated-name . : ID

    :               shift and go to state 308


state 182

    (208) complicated-expression -> MINUS . ID
    (209) complicated-expression -> MINUS . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 309
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 310
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 183

    (210) complicated-expression -> ! . ID
    (211) complicated-expression -> ! . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 311
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 312
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 184

    (212) complicated-expression -> constant-expression .

    ;               reduce using rule 212 (complicated-expression -> constant-expression .)
    [               reduce using rule 212 (complicated-expression -> constant-expression .)
    .               reduce using rule 212 (complicated-expression -> constant-expression .)
    LS              reduce using rule 212 (complicated-expression -> constant-expression .)
    GR              reduce using rule 212 (complicated-expression -> constant-expression .)
    TIMES           reduce using rule 212 (complicated-expression -> constant-expression .)
    =               reduce using rule 212 (complicated-expression -> constant-expression .)
    PLUS            reduce using rule 212 (complicated-expression -> constant-expression .)
    MINUS           reduce using rule 212 (complicated-expression -> constant-expression .)
    DIVIDE          reduce using rule 212 (complicated-expression -> constant-expression .)
    MOD             reduce using rule 212 (complicated-expression -> constant-expression .)
    AND             reduce using rule 212 (complicated-expression -> constant-expression .)
    OR              reduce using rule 212 (complicated-expression -> constant-expression .)
    XOR             reduce using rule 212 (complicated-expression -> constant-expression .)
    LSHIFT          reduce using rule 212 (complicated-expression -> constant-expression .)
    RSHIFT          reduce using rule 212 (complicated-expression -> constant-expression .)
    LE              reduce using rule 212 (complicated-expression -> constant-expression .)
    GE              reduce using rule 212 (complicated-expression -> constant-expression .)
    EE              reduce using rule 212 (complicated-expression -> constant-expression .)
    NE              reduce using rule 212 (complicated-expression -> constant-expression .)
    PLUSEQ          reduce using rule 212 (complicated-expression -> constant-expression .)
    MINUSEQ         reduce using rule 212 (complicated-expression -> constant-expression .)
    TIMESEQ         reduce using rule 212 (complicated-expression -> constant-expression .)
    DIVIDEEQ        reduce using rule 212 (complicated-expression -> constant-expression .)
    MODEQ           reduce using rule 212 (complicated-expression -> constant-expression .)
    ANDEQ           reduce using rule 212 (complicated-expression -> constant-expression .)
    OREQ            reduce using rule 212 (complicated-expression -> constant-expression .)
    XOREQ           reduce using rule 212 (complicated-expression -> constant-expression .)
    LSHIFTEQ        reduce using rule 212 (complicated-expression -> constant-expression .)
    RSHIFTEQ        reduce using rule 212 (complicated-expression -> constant-expression .)
    }               reduce using rule 212 (complicated-expression -> constant-expression .)
    ,               reduce using rule 212 (complicated-expression -> constant-expression .)
    ]               reduce using rule 212 (complicated-expression -> constant-expression .)
    )               reduce using rule 212 (complicated-expression -> constant-expression .)
    {               reduce using rule 212 (complicated-expression -> constant-expression .)


state 185

    (118) return-statement -> RETURN . complicated-expression ;
    (119) return-statement -> RETURN . ID ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 314
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 313
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 186

    (126) variable-declaration -> VAR . ID = ID ;
    (127) variable-declaration -> VAR . ID = complicated-expression ;

    ID              shift and go to state 315


state 187

    (128) if-statement -> IF . complicated-expression visibility-area
    (129) if-statement -> IF . complicated-expression visibility-area ELSE visibility-area
    (130) if-statement -> IF . complicated-expression visibility-area ELSE if-statement
    (131) if-statement -> IF . ID visibility-area
    (132) if-statement -> IF . ID visibility-area ELSE visibility-area
    (133) if-statement -> IF . ID visibility-area ELSE if-statement
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 317
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 316
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 188

    (134) while-statement -> WHILE . complicated-expression visibility-area
    (135) while-statement -> WHILE . ID visibility-area
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 319
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 318
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 189

    (158) visibility-area -> function-body .

    }               reduce using rule 158 (visibility-area -> function-body .)
    ID              reduce using rule 158 (visibility-area -> function-body .)
    UNSAFE          reduce using rule 158 (visibility-area -> function-body .)
    [               reduce using rule 158 (visibility-area -> function-body .)
    TIMES           reduce using rule 158 (visibility-area -> function-body .)
    AND             reduce using rule 158 (visibility-area -> function-body .)
    SIZEOF          reduce using rule 158 (visibility-area -> function-body .)
    MINUS           reduce using rule 158 (visibility-area -> function-body .)
    !               reduce using rule 158 (visibility-area -> function-body .)
    (               reduce using rule 158 (visibility-area -> function-body .)
    RETURN          reduce using rule 158 (visibility-area -> function-body .)
    VAR             reduce using rule 158 (visibility-area -> function-body .)
    IF              reduce using rule 158 (visibility-area -> function-body .)
    WHILE           reduce using rule 158 (visibility-area -> function-body .)
    CONST           reduce using rule 158 (visibility-area -> function-body .)
    INT             reduce using rule 158 (visibility-area -> function-body .)
    FLOAT           reduce using rule 158 (visibility-area -> function-body .)
    STR             reduce using rule 158 (visibility-area -> function-body .)
    BOOL            reduce using rule 158 (visibility-area -> function-body .)
    CHAR            reduce using rule 158 (visibility-area -> function-body .)
    {               reduce using rule 158 (visibility-area -> function-body .)
    :               reduce using rule 158 (visibility-area -> function-body .)
    ELSE            reduce using rule 158 (visibility-area -> function-body .)


state 190

    (159) constant-expression -> INT .

    ;               reduce using rule 159 (constant-expression -> INT .)
    [               reduce using rule 159 (constant-expression -> INT .)
    .               reduce using rule 159 (constant-expression -> INT .)
    LS              reduce using rule 159 (constant-expression -> INT .)
    GR              reduce using rule 159 (constant-expression -> INT .)
    TIMES           reduce using rule 159 (constant-expression -> INT .)
    =               reduce using rule 159 (constant-expression -> INT .)
    PLUS            reduce using rule 159 (constant-expression -> INT .)
    MINUS           reduce using rule 159 (constant-expression -> INT .)
    DIVIDE          reduce using rule 159 (constant-expression -> INT .)
    MOD             reduce using rule 159 (constant-expression -> INT .)
    AND             reduce using rule 159 (constant-expression -> INT .)
    OR              reduce using rule 159 (constant-expression -> INT .)
    XOR             reduce using rule 159 (constant-expression -> INT .)
    LSHIFT          reduce using rule 159 (constant-expression -> INT .)
    RSHIFT          reduce using rule 159 (constant-expression -> INT .)
    LE              reduce using rule 159 (constant-expression -> INT .)
    GE              reduce using rule 159 (constant-expression -> INT .)
    EE              reduce using rule 159 (constant-expression -> INT .)
    NE              reduce using rule 159 (constant-expression -> INT .)
    PLUSEQ          reduce using rule 159 (constant-expression -> INT .)
    MINUSEQ         reduce using rule 159 (constant-expression -> INT .)
    TIMESEQ         reduce using rule 159 (constant-expression -> INT .)
    DIVIDEEQ        reduce using rule 159 (constant-expression -> INT .)
    MODEQ           reduce using rule 159 (constant-expression -> INT .)
    ANDEQ           reduce using rule 159 (constant-expression -> INT .)
    OREQ            reduce using rule 159 (constant-expression -> INT .)
    XOREQ           reduce using rule 159 (constant-expression -> INT .)
    LSHIFTEQ        reduce using rule 159 (constant-expression -> INT .)
    RSHIFTEQ        reduce using rule 159 (constant-expression -> INT .)
    }               reduce using rule 159 (constant-expression -> INT .)
    ,               reduce using rule 159 (constant-expression -> INT .)
    ]               reduce using rule 159 (constant-expression -> INT .)
    )               reduce using rule 159 (constant-expression -> INT .)
    {               reduce using rule 159 (constant-expression -> INT .)


state 191

    (160) constant-expression -> FLOAT .

    ;               reduce using rule 160 (constant-expression -> FLOAT .)
    [               reduce using rule 160 (constant-expression -> FLOAT .)
    .               reduce using rule 160 (constant-expression -> FLOAT .)
    LS              reduce using rule 160 (constant-expression -> FLOAT .)
    GR              reduce using rule 160 (constant-expression -> FLOAT .)
    TIMES           reduce using rule 160 (constant-expression -> FLOAT .)
    =               reduce using rule 160 (constant-expression -> FLOAT .)
    PLUS            reduce using rule 160 (constant-expression -> FLOAT .)
    MINUS           reduce using rule 160 (constant-expression -> FLOAT .)
    DIVIDE          reduce using rule 160 (constant-expression -> FLOAT .)
    MOD             reduce using rule 160 (constant-expression -> FLOAT .)
    AND             reduce using rule 160 (constant-expression -> FLOAT .)
    OR              reduce using rule 160 (constant-expression -> FLOAT .)
    XOR             reduce using rule 160 (constant-expression -> FLOAT .)
    LSHIFT          reduce using rule 160 (constant-expression -> FLOAT .)
    RSHIFT          reduce using rule 160 (constant-expression -> FLOAT .)
    LE              reduce using rule 160 (constant-expression -> FLOAT .)
    GE              reduce using rule 160 (constant-expression -> FLOAT .)
    EE              reduce using rule 160 (constant-expression -> FLOAT .)
    NE              reduce using rule 160 (constant-expression -> FLOAT .)
    PLUSEQ          reduce using rule 160 (constant-expression -> FLOAT .)
    MINUSEQ         reduce using rule 160 (constant-expression -> FLOAT .)
    TIMESEQ         reduce using rule 160 (constant-expression -> FLOAT .)
    DIVIDEEQ        reduce using rule 160 (constant-expression -> FLOAT .)
    MODEQ           reduce using rule 160 (constant-expression -> FLOAT .)
    ANDEQ           reduce using rule 160 (constant-expression -> FLOAT .)
    OREQ            reduce using rule 160 (constant-expression -> FLOAT .)
    XOREQ           reduce using rule 160 (constant-expression -> FLOAT .)
    LSHIFTEQ        reduce using rule 160 (constant-expression -> FLOAT .)
    RSHIFTEQ        reduce using rule 160 (constant-expression -> FLOAT .)
    }               reduce using rule 160 (constant-expression -> FLOAT .)
    ,               reduce using rule 160 (constant-expression -> FLOAT .)
    ]               reduce using rule 160 (constant-expression -> FLOAT .)
    )               reduce using rule 160 (constant-expression -> FLOAT .)
    {               reduce using rule 160 (constant-expression -> FLOAT .)


state 192

    (161) constant-expression -> STR .

    ;               reduce using rule 161 (constant-expression -> STR .)
    [               reduce using rule 161 (constant-expression -> STR .)
    .               reduce using rule 161 (constant-expression -> STR .)
    LS              reduce using rule 161 (constant-expression -> STR .)
    GR              reduce using rule 161 (constant-expression -> STR .)
    TIMES           reduce using rule 161 (constant-expression -> STR .)
    =               reduce using rule 161 (constant-expression -> STR .)
    PLUS            reduce using rule 161 (constant-expression -> STR .)
    MINUS           reduce using rule 161 (constant-expression -> STR .)
    DIVIDE          reduce using rule 161 (constant-expression -> STR .)
    MOD             reduce using rule 161 (constant-expression -> STR .)
    AND             reduce using rule 161 (constant-expression -> STR .)
    OR              reduce using rule 161 (constant-expression -> STR .)
    XOR             reduce using rule 161 (constant-expression -> STR .)
    LSHIFT          reduce using rule 161 (constant-expression -> STR .)
    RSHIFT          reduce using rule 161 (constant-expression -> STR .)
    LE              reduce using rule 161 (constant-expression -> STR .)
    GE              reduce using rule 161 (constant-expression -> STR .)
    EE              reduce using rule 161 (constant-expression -> STR .)
    NE              reduce using rule 161 (constant-expression -> STR .)
    PLUSEQ          reduce using rule 161 (constant-expression -> STR .)
    MINUSEQ         reduce using rule 161 (constant-expression -> STR .)
    TIMESEQ         reduce using rule 161 (constant-expression -> STR .)
    DIVIDEEQ        reduce using rule 161 (constant-expression -> STR .)
    MODEQ           reduce using rule 161 (constant-expression -> STR .)
    ANDEQ           reduce using rule 161 (constant-expression -> STR .)
    OREQ            reduce using rule 161 (constant-expression -> STR .)
    XOREQ           reduce using rule 161 (constant-expression -> STR .)
    LSHIFTEQ        reduce using rule 161 (constant-expression -> STR .)
    RSHIFTEQ        reduce using rule 161 (constant-expression -> STR .)
    }               reduce using rule 161 (constant-expression -> STR .)
    ,               reduce using rule 161 (constant-expression -> STR .)
    ]               reduce using rule 161 (constant-expression -> STR .)
    )               reduce using rule 161 (constant-expression -> STR .)
    {               reduce using rule 161 (constant-expression -> STR .)


state 193

    (162) constant-expression -> BOOL .

    ;               reduce using rule 162 (constant-expression -> BOOL .)
    [               reduce using rule 162 (constant-expression -> BOOL .)
    .               reduce using rule 162 (constant-expression -> BOOL .)
    LS              reduce using rule 162 (constant-expression -> BOOL .)
    GR              reduce using rule 162 (constant-expression -> BOOL .)
    TIMES           reduce using rule 162 (constant-expression -> BOOL .)
    =               reduce using rule 162 (constant-expression -> BOOL .)
    PLUS            reduce using rule 162 (constant-expression -> BOOL .)
    MINUS           reduce using rule 162 (constant-expression -> BOOL .)
    DIVIDE          reduce using rule 162 (constant-expression -> BOOL .)
    MOD             reduce using rule 162 (constant-expression -> BOOL .)
    AND             reduce using rule 162 (constant-expression -> BOOL .)
    OR              reduce using rule 162 (constant-expression -> BOOL .)
    XOR             reduce using rule 162 (constant-expression -> BOOL .)
    LSHIFT          reduce using rule 162 (constant-expression -> BOOL .)
    RSHIFT          reduce using rule 162 (constant-expression -> BOOL .)
    LE              reduce using rule 162 (constant-expression -> BOOL .)
    GE              reduce using rule 162 (constant-expression -> BOOL .)
    EE              reduce using rule 162 (constant-expression -> BOOL .)
    NE              reduce using rule 162 (constant-expression -> BOOL .)
    PLUSEQ          reduce using rule 162 (constant-expression -> BOOL .)
    MINUSEQ         reduce using rule 162 (constant-expression -> BOOL .)
    TIMESEQ         reduce using rule 162 (constant-expression -> BOOL .)
    DIVIDEEQ        reduce using rule 162 (constant-expression -> BOOL .)
    MODEQ           reduce using rule 162 (constant-expression -> BOOL .)
    ANDEQ           reduce using rule 162 (constant-expression -> BOOL .)
    OREQ            reduce using rule 162 (constant-expression -> BOOL .)
    XOREQ           reduce using rule 162 (constant-expression -> BOOL .)
    LSHIFTEQ        reduce using rule 162 (constant-expression -> BOOL .)
    RSHIFTEQ        reduce using rule 162 (constant-expression -> BOOL .)
    }               reduce using rule 162 (constant-expression -> BOOL .)
    ,               reduce using rule 162 (constant-expression -> BOOL .)
    ]               reduce using rule 162 (constant-expression -> BOOL .)
    )               reduce using rule 162 (constant-expression -> BOOL .)
    {               reduce using rule 162 (constant-expression -> BOOL .)


state 194

    (163) constant-expression -> CHAR .

    ;               reduce using rule 163 (constant-expression -> CHAR .)
    [               reduce using rule 163 (constant-expression -> CHAR .)
    .               reduce using rule 163 (constant-expression -> CHAR .)
    LS              reduce using rule 163 (constant-expression -> CHAR .)
    GR              reduce using rule 163 (constant-expression -> CHAR .)
    TIMES           reduce using rule 163 (constant-expression -> CHAR .)
    =               reduce using rule 163 (constant-expression -> CHAR .)
    PLUS            reduce using rule 163 (constant-expression -> CHAR .)
    MINUS           reduce using rule 163 (constant-expression -> CHAR .)
    DIVIDE          reduce using rule 163 (constant-expression -> CHAR .)
    MOD             reduce using rule 163 (constant-expression -> CHAR .)
    AND             reduce using rule 163 (constant-expression -> CHAR .)
    OR              reduce using rule 163 (constant-expression -> CHAR .)
    XOR             reduce using rule 163 (constant-expression -> CHAR .)
    LSHIFT          reduce using rule 163 (constant-expression -> CHAR .)
    RSHIFT          reduce using rule 163 (constant-expression -> CHAR .)
    LE              reduce using rule 163 (constant-expression -> CHAR .)
    GE              reduce using rule 163 (constant-expression -> CHAR .)
    EE              reduce using rule 163 (constant-expression -> CHAR .)
    NE              reduce using rule 163 (constant-expression -> CHAR .)
    PLUSEQ          reduce using rule 163 (constant-expression -> CHAR .)
    MINUSEQ         reduce using rule 163 (constant-expression -> CHAR .)
    TIMESEQ         reduce using rule 163 (constant-expression -> CHAR .)
    DIVIDEEQ        reduce using rule 163 (constant-expression -> CHAR .)
    MODEQ           reduce using rule 163 (constant-expression -> CHAR .)
    ANDEQ           reduce using rule 163 (constant-expression -> CHAR .)
    OREQ            reduce using rule 163 (constant-expression -> CHAR .)
    XOREQ           reduce using rule 163 (constant-expression -> CHAR .)
    LSHIFTEQ        reduce using rule 163 (constant-expression -> CHAR .)
    RSHIFTEQ        reduce using rule 163 (constant-expression -> CHAR .)
    }               reduce using rule 163 (constant-expression -> CHAR .)
    ,               reduce using rule 163 (constant-expression -> CHAR .)
    ]               reduce using rule 163 (constant-expression -> CHAR .)
    )               reduce using rule 163 (constant-expression -> CHAR .)
    {               reduce using rule 163 (constant-expression -> CHAR .)


state 195

    (16) main -> ID ID template-declaration function-arguments function-body .

    ID              reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    CONST           reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    :               reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)
    $end            reduce using rule 16 (main -> ID ID template-declaration function-arguments function-body .)


state 196

    (89) function-arguments -> ( function-arguments-body ) .

    {               reduce using rule 89 (function-arguments -> ( function-arguments-body ) .)
    ;               reduce using rule 89 (function-arguments -> ( function-arguments-body ) .)


state 197

    (91) function-arguments-body -> function-arguments-body , . function-argument
    (93) function-argument -> . ID ID
    (94) function-argument -> . complicated-type ID
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 108
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    function-argument              shift and go to state 320
    complicated-type               shift and go to state 109
    package-complicated-name       shift and go to state 24

state 198

    (93) function-argument -> ID ID .

    )               reduce using rule 93 (function-argument -> ID ID .)
    ,               reduce using rule 93 (function-argument -> ID ID .)


state 199

    (94) function-argument -> complicated-type ID .

    )               reduce using rule 94 (function-argument -> complicated-type ID .)
    ,               reduce using rule 94 (function-argument -> complicated-type ID .)


state 200

    (22) main -> ID OPERATOR binary-operator function-arguments function-body .

    ID              reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    UNSAFE          reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    OPERATOR        reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    EXTERN          reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    STRUCT          reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    CONST           reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    :               reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)
    $end            reduce using rule 22 (main -> ID OPERATOR binary-operator function-arguments function-body .)


state 201

    (30) main -> ID OPERATOR binary-operator template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 321

state 202

    (38) main -> ID OPERATOR binary-operator ( ) . function-arguments function-body
    (42) main -> ID OPERATOR binary-operator ( ) . template-declaration function-arguments function-body
    (90) function-arguments -> ( ) .
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    {               reduce using rule 90 (function-arguments -> ( ) .)
    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 322
    template-declaration           shift and go to state 323

state 203

    (23) main -> ID OPERATOR TIMES function-arguments function-body .

    ID              reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    UNSAFE          reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    OPERATOR        reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    EXTERN          reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    STRUCT          reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    CONST           reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    :               reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)
    $end            reduce using rule 23 (main -> ID OPERATOR TIMES function-arguments function-body .)


state 204

    (31) main -> ID OPERATOR TIMES template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 324

state 205

    (24) main -> ID OPERATOR LS function-arguments function-body .

    ID              reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    UNSAFE          reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    OPERATOR        reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    EXTERN          reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    STRUCT          reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    CONST           reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    :               reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)
    $end            reduce using rule 24 (main -> ID OPERATOR LS function-arguments function-body .)


state 206

    (32) main -> ID OPERATOR LS template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 325

state 207

    (25) main -> ID OPERATOR GR function-arguments function-body .

    ID              reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    UNSAFE          reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    OPERATOR        reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    EXTERN          reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    STRUCT          reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    CONST           reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    :               reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)
    $end            reduce using rule 25 (main -> ID OPERATOR GR function-arguments function-body .)


state 208

    (33) main -> ID OPERATOR GR template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 326

state 209

    (46) main -> ID OPERATOR ( ) function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 327

state 210

    (39) main -> ID OPERATOR ! ( ) . function-arguments function-body
    (43) main -> ID OPERATOR ! ( ) . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 328
    template-declaration           shift and go to state 329

state 211

    (50) main -> ID OPERATOR [ ] function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 330

state 212

    (52) main -> ID OPERATOR [ ] template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 331

state 213

    (54) main -> ID OPERATOR = function-arguments function-body .

    ID              reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    UNSAFE          reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    OPERATOR        reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    EXTERN          reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    STRUCT          reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    CONST           reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    :               reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)
    $end            reduce using rule 54 (main -> ID OPERATOR = function-arguments function-body .)


state 214

    (56) main -> ID OPERATOR = template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 332

state 215

    (83) template-declaration-body -> template-declaration-body , ID .
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    GR              reduce using rule 83 (template-declaration-body -> template-declaration-body , ID .)
    ,               reduce using rule 83 (template-declaration-body -> template-declaration-body , ID .)
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 216

    (84) template-declaration-body -> template-declaration-body , complicated-type .

    GR              reduce using rule 84 (template-declaration-body -> template-declaration-body , complicated-type .)
    ,               reduce using rule 84 (template-declaration-body -> template-declaration-body , complicated-type .)


state 217

    (85) template-declaration-body -> ID , ID .
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    GR              reduce using rule 85 (template-declaration-body -> ID , ID .)
    ,               reduce using rule 85 (template-declaration-body -> ID , ID .)
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 218

    (87) template-declaration-body -> ID , complicated-type .

    GR              reduce using rule 87 (template-declaration-body -> ID , complicated-type .)
    ,               reduce using rule 87 (template-declaration-body -> ID , complicated-type .)


state 219

    (88) template-declaration-body -> complicated-type , complicated-type .

    GR              reduce using rule 88 (template-declaration-body -> complicated-type , complicated-type .)
    ,               reduce using rule 88 (template-declaration-body -> complicated-type , complicated-type .)


state 220

    (86) template-declaration-body -> complicated-type , ID .
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    GR              reduce using rule 86 (template-declaration-body -> complicated-type , ID .)
    ,               reduce using rule 86 (template-declaration-body -> complicated-type , ID .)
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 221

    (70) complicated-type -> ID : ID template-declaration TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES

    ID              reduce using rule 70 (complicated-type -> ID : ID template-declaration TIMES .)
    OPERATOR        reduce using rule 70 (complicated-type -> ID : ID template-declaration TIMES .)
    GR              reduce using rule 70 (complicated-type -> ID : ID template-declaration TIMES .)
    ,               reduce using rule 70 (complicated-type -> ID : ID template-declaration TIMES .)
    {               reduce using rule 70 (complicated-type -> ID : ID template-declaration TIMES .)
    )               reduce using rule 70 (complicated-type -> ID : ID template-declaration TIMES .)
    TIMES           shift and go to state 75


state 222

    (71) complicated-type -> ID : ID template-declaration complicated-pointer-level .
    (78) complicated-pointer-level -> complicated-pointer-level . TIMES

    ID              reduce using rule 71 (complicated-type -> ID : ID template-declaration complicated-pointer-level .)
    OPERATOR        reduce using rule 71 (complicated-type -> ID : ID template-declaration complicated-pointer-level .)
    GR              reduce using rule 71 (complicated-type -> ID : ID template-declaration complicated-pointer-level .)
    ,               reduce using rule 71 (complicated-type -> ID : ID template-declaration complicated-pointer-level .)
    {               reduce using rule 71 (complicated-type -> ID : ID template-declaration complicated-pointer-level .)
    )               reduce using rule 71 (complicated-type -> ID : ID template-declaration complicated-pointer-level .)
    TIMES           shift and go to state 80


state 223

    (17) main -> complicated-type ID template-declaration function-arguments function-body .

    ID              reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    CONST           reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    :               reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)
    $end            reduce using rule 17 (main -> complicated-type ID template-declaration function-arguments function-body .)


state 224

    (26) main -> complicated-type OPERATOR binary-operator function-arguments function-body .

    ID              reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    UNSAFE          reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    OPERATOR        reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    EXTERN          reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    STRUCT          reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    CONST           reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    :               reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)
    $end            reduce using rule 26 (main -> complicated-type OPERATOR binary-operator function-arguments function-body .)


state 225

    (34) main -> complicated-type OPERATOR binary-operator template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 333

state 226

    (40) main -> complicated-type OPERATOR binary-operator ( ) . function-arguments function-body
    (44) main -> complicated-type OPERATOR binary-operator ( ) . template-declaration function-arguments function-body
    (90) function-arguments -> ( ) .
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    {               reduce using rule 90 (function-arguments -> ( ) .)
    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 334
    template-declaration           shift and go to state 335

state 227

    (27) main -> complicated-type OPERATOR TIMES function-arguments function-body .

    ID              reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    UNSAFE          reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    OPERATOR        reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    EXTERN          reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    STRUCT          reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    CONST           reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    :               reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)
    $end            reduce using rule 27 (main -> complicated-type OPERATOR TIMES function-arguments function-body .)


state 228

    (35) main -> complicated-type OPERATOR TIMES template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 336

state 229

    (28) main -> complicated-type OPERATOR LS function-arguments function-body .

    ID              reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    UNSAFE          reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    OPERATOR        reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    EXTERN          reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    STRUCT          reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    CONST           reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    :               reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)
    $end            reduce using rule 28 (main -> complicated-type OPERATOR LS function-arguments function-body .)


state 230

    (36) main -> complicated-type OPERATOR LS template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 337

state 231

    (29) main -> complicated-type OPERATOR GR function-arguments function-body .

    ID              reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    UNSAFE          reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    OPERATOR        reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    EXTERN          reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    STRUCT          reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    CONST           reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    :               reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)
    $end            reduce using rule 29 (main -> complicated-type OPERATOR GR function-arguments function-body .)


state 232

    (37) main -> complicated-type OPERATOR GR template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 338

state 233

    (47) main -> complicated-type OPERATOR ( ) function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 339

state 234

    (41) main -> complicated-type OPERATOR ! ( ) . function-arguments function-body
    (45) main -> complicated-type OPERATOR ! ( ) . template-declaration function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    (               shift and go to state 51
    LS              shift and go to state 34

    function-arguments             shift and go to state 340
    template-declaration           shift and go to state 341

state 235

    (51) main -> complicated-type OPERATOR [ ] function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 342

state 236

    (53) main -> complicated-type OPERATOR [ ] template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 343

state 237

    (55) main -> complicated-type OPERATOR = function-arguments function-body .

    ID              reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    UNSAFE          reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    OPERATOR        reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    EXTERN          reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    STRUCT          reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    CONST           reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    :               reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)
    $end            reduce using rule 55 (main -> complicated-type OPERATOR = function-arguments function-body .)


state 238

    (57) main -> complicated-type OPERATOR = template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 344

state 239

    (18) main -> UNSAFE ID ID function-arguments function-body .

    ID              reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    UNSAFE          reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    OPERATOR        reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    EXTERN          reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    STRUCT          reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    CONST           reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    :               reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)
    $end            reduce using rule 18 (main -> UNSAFE ID ID function-arguments function-body .)


state 240

    (20) main -> UNSAFE ID ID template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 345

state 241

    (19) main -> UNSAFE complicated-type ID function-arguments function-body .

    ID              reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    UNSAFE          reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    OPERATOR        reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    EXTERN          reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    STRUCT          reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    CONST           reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    :               reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)
    $end            reduce using rule 19 (main -> UNSAFE complicated-type ID function-arguments function-body .)


state 242

    (21) main -> UNSAFE complicated-type ID template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 346

state 243

    (49) main -> OPERATOR ~ template-declaration function-arguments function-body .

    ID              reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    CONST           reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    :               reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)
    $end            reduce using rule 49 (main -> OPERATOR ~ template-declaration function-arguments function-body .)


state 244

    (58) main -> EXTERN ID ID function-arguments ; .

    ID              reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    UNSAFE          reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    OPERATOR        reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    EXTERN          reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    STRUCT          reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    CONST           reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    :               reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)
    $end            reduce using rule 58 (main -> EXTERN ID ID function-arguments ; .)


state 245

    (59) main -> EXTERN complicated-type ID function-arguments ; .

    ID              reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    UNSAFE          reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    OPERATOR        reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    EXTERN          reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    STRUCT          reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    CONST           reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    :               reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)
    $end            reduce using rule 59 (main -> EXTERN complicated-type ID function-arguments ; .)


state 246

    (99) struct-body -> { struct-fields } .

    ID              reduce using rule 99 (struct-body -> { struct-fields } .)
    UNSAFE          reduce using rule 99 (struct-body -> { struct-fields } .)
    OPERATOR        reduce using rule 99 (struct-body -> { struct-fields } .)
    EXTERN          reduce using rule 99 (struct-body -> { struct-fields } .)
    STRUCT          reduce using rule 99 (struct-body -> { struct-fields } .)
    CONST           reduce using rule 99 (struct-body -> { struct-fields } .)
    :               reduce using rule 99 (struct-body -> { struct-fields } .)
    $end            reduce using rule 99 (struct-body -> { struct-fields } .)


state 247

    (100) struct-fields -> struct-fields struct-field .

    }               reduce using rule 100 (struct-fields -> struct-fields struct-field .)
    ID              reduce using rule 100 (struct-fields -> struct-fields struct-field .)
    ACCMOD          reduce using rule 100 (struct-fields -> struct-fields struct-field .)
    CONST           reduce using rule 100 (struct-fields -> struct-fields struct-field .)
    :               reduce using rule 100 (struct-fields -> struct-fields struct-field .)


state 248

    (102) struct-field -> ID . ID ;
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              shift and go to state 347
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 249

    (103) struct-field -> complicated-type . ID ;

    ID              shift and go to state 348


state 250

    (104) struct-field -> ACCMOD . ID ID ;
    (105) struct-field -> ACCMOD . complicated-type ID ;
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 349
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 350
    package-complicated-name       shift and go to state 24

state 251

    (67) complicated-type -> package-complicated-name : ID template-declaration TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES

    ID              reduce using rule 67 (complicated-type -> package-complicated-name : ID template-declaration TIMES .)
    OPERATOR        reduce using rule 67 (complicated-type -> package-complicated-name : ID template-declaration TIMES .)
    GR              reduce using rule 67 (complicated-type -> package-complicated-name : ID template-declaration TIMES .)
    ,               reduce using rule 67 (complicated-type -> package-complicated-name : ID template-declaration TIMES .)
    {               reduce using rule 67 (complicated-type -> package-complicated-name : ID template-declaration TIMES .)
    )               reduce using rule 67 (complicated-type -> package-complicated-name : ID template-declaration TIMES .)
    TIMES           shift and go to state 75


state 252

    (68) complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .
    (78) complicated-pointer-level -> complicated-pointer-level . TIMES

    ID              reduce using rule 68 (complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .)
    OPERATOR        reduce using rule 68 (complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .)
    GR              reduce using rule 68 (complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .)
    ,               reduce using rule 68 (complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .)
    {               reduce using rule 68 (complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .)
    )               reduce using rule 68 (complicated-type -> package-complicated-name : ID template-declaration complicated-pointer-level .)
    TIMES           shift and go to state 80


state 253

    (95) function-body -> { expression-lines } .

    ID              reduce using rule 95 (function-body -> { expression-lines } .)
    UNSAFE          reduce using rule 95 (function-body -> { expression-lines } .)
    OPERATOR        reduce using rule 95 (function-body -> { expression-lines } .)
    EXTERN          reduce using rule 95 (function-body -> { expression-lines } .)
    STRUCT          reduce using rule 95 (function-body -> { expression-lines } .)
    CONST           reduce using rule 95 (function-body -> { expression-lines } .)
    :               reduce using rule 95 (function-body -> { expression-lines } .)
    $end            reduce using rule 95 (function-body -> { expression-lines } .)
    }               reduce using rule 95 (function-body -> { expression-lines } .)
    [               reduce using rule 95 (function-body -> { expression-lines } .)
    TIMES           reduce using rule 95 (function-body -> { expression-lines } .)
    AND             reduce using rule 95 (function-body -> { expression-lines } .)
    SIZEOF          reduce using rule 95 (function-body -> { expression-lines } .)
    MINUS           reduce using rule 95 (function-body -> { expression-lines } .)
    !               reduce using rule 95 (function-body -> { expression-lines } .)
    (               reduce using rule 95 (function-body -> { expression-lines } .)
    RETURN          reduce using rule 95 (function-body -> { expression-lines } .)
    VAR             reduce using rule 95 (function-body -> { expression-lines } .)
    IF              reduce using rule 95 (function-body -> { expression-lines } .)
    WHILE           reduce using rule 95 (function-body -> { expression-lines } .)
    INT             reduce using rule 95 (function-body -> { expression-lines } .)
    FLOAT           reduce using rule 95 (function-body -> { expression-lines } .)
    STR             reduce using rule 95 (function-body -> { expression-lines } .)
    BOOL            reduce using rule 95 (function-body -> { expression-lines } .)
    CHAR            reduce using rule 95 (function-body -> { expression-lines } .)
    {               reduce using rule 95 (function-body -> { expression-lines } .)
    ELSE            reduce using rule 95 (function-body -> { expression-lines } .)


state 254

    (106) expression-lines -> expression-lines expression-line .

    }               reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    ID              reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    UNSAFE          reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    [               reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    TIMES           reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    AND             reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    SIZEOF          reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    MINUS           reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    !               reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    (               reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    RETURN          reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    VAR             reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    IF              reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    WHILE           reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    CONST           reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    INT             reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    FLOAT           reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    STR             reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    BOOL            reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    CHAR            reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    {               reduce using rule 106 (expression-lines -> expression-lines expression-line .)
    :               reduce using rule 106 (expression-lines -> expression-lines expression-line .)


state 255

    (109) expression-line -> complicated-expression ; .

    }               reduce using rule 109 (expression-line -> complicated-expression ; .)
    ID              reduce using rule 109 (expression-line -> complicated-expression ; .)
    UNSAFE          reduce using rule 109 (expression-line -> complicated-expression ; .)
    [               reduce using rule 109 (expression-line -> complicated-expression ; .)
    TIMES           reduce using rule 109 (expression-line -> complicated-expression ; .)
    AND             reduce using rule 109 (expression-line -> complicated-expression ; .)
    SIZEOF          reduce using rule 109 (expression-line -> complicated-expression ; .)
    MINUS           reduce using rule 109 (expression-line -> complicated-expression ; .)
    !               reduce using rule 109 (expression-line -> complicated-expression ; .)
    (               reduce using rule 109 (expression-line -> complicated-expression ; .)
    RETURN          reduce using rule 109 (expression-line -> complicated-expression ; .)
    VAR             reduce using rule 109 (expression-line -> complicated-expression ; .)
    IF              reduce using rule 109 (expression-line -> complicated-expression ; .)
    WHILE           reduce using rule 109 (expression-line -> complicated-expression ; .)
    CONST           reduce using rule 109 (expression-line -> complicated-expression ; .)
    INT             reduce using rule 109 (expression-line -> complicated-expression ; .)
    FLOAT           reduce using rule 109 (expression-line -> complicated-expression ; .)
    STR             reduce using rule 109 (expression-line -> complicated-expression ; .)
    BOOL            reduce using rule 109 (expression-line -> complicated-expression ; .)
    CHAR            reduce using rule 109 (expression-line -> complicated-expression ; .)
    {               reduce using rule 109 (expression-line -> complicated-expression ; .)
    :               reduce using rule 109 (expression-line -> complicated-expression ; .)


state 256

    (152) complicated-expression -> complicated-expression [ . ID ]
    (153) complicated-expression -> complicated-expression [ . complicated-expression ]
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 352
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 351
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 257

    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments

    ID              shift and go to state 353


state 258

    (196) complicated-expression -> complicated-expression binary-operator . ID
    (204) complicated-expression -> complicated-expression binary-operator . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 355
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 354
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 259

    (197) complicated-expression -> complicated-expression LS . ID
    (205) complicated-expression -> complicated-expression LS . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 357
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 356
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 260

    (198) complicated-expression -> complicated-expression GR . ID
    (206) complicated-expression -> complicated-expression GR . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 359
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 358
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 261

    (199) complicated-expression -> complicated-expression TIMES . ID
    (207) complicated-expression -> complicated-expression TIMES . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 361
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 360
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 262

    (230) complicated-expression -> complicated-expression sub-equal-operator . ID
    (232) complicated-expression -> complicated-expression sub-equal-operator . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 363
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 362
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 263

    (155) set-statement -> complicated-expression = . ID ;
    (157) set-statement -> complicated-expression = . complicated-expression ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 365
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 364
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 264

    (219) sub-equal-operator -> PLUSEQ .

    ID              reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    UNSAFE          reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    [               reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    TIMES           reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    AND             reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    SIZEOF          reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    MINUS           reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    !               reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    (               reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    CONST           reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    INT             reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    FLOAT           reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    STR             reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    BOOL            reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    CHAR            reduce using rule 219 (sub-equal-operator -> PLUSEQ .)
    :               reduce using rule 219 (sub-equal-operator -> PLUSEQ .)


state 265

    (220) sub-equal-operator -> MINUSEQ .

    ID              reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    UNSAFE          reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    [               reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    TIMES           reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    AND             reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    SIZEOF          reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    MINUS           reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    !               reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    (               reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    CONST           reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    INT             reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    FLOAT           reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    STR             reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    BOOL            reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    CHAR            reduce using rule 220 (sub-equal-operator -> MINUSEQ .)
    :               reduce using rule 220 (sub-equal-operator -> MINUSEQ .)


state 266

    (221) sub-equal-operator -> TIMESEQ .

    ID              reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    UNSAFE          reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    [               reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    TIMES           reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    AND             reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    SIZEOF          reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    MINUS           reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    !               reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    (               reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    CONST           reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    INT             reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    FLOAT           reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    STR             reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    BOOL            reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    CHAR            reduce using rule 221 (sub-equal-operator -> TIMESEQ .)
    :               reduce using rule 221 (sub-equal-operator -> TIMESEQ .)


state 267

    (222) sub-equal-operator -> DIVIDEEQ .

    ID              reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    UNSAFE          reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    [               reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    TIMES           reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    AND             reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    SIZEOF          reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    MINUS           reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    !               reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    (               reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    CONST           reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    INT             reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    FLOAT           reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    STR             reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    BOOL            reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    CHAR            reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)
    :               reduce using rule 222 (sub-equal-operator -> DIVIDEEQ .)


state 268

    (223) sub-equal-operator -> MODEQ .

    ID              reduce using rule 223 (sub-equal-operator -> MODEQ .)
    UNSAFE          reduce using rule 223 (sub-equal-operator -> MODEQ .)
    [               reduce using rule 223 (sub-equal-operator -> MODEQ .)
    TIMES           reduce using rule 223 (sub-equal-operator -> MODEQ .)
    AND             reduce using rule 223 (sub-equal-operator -> MODEQ .)
    SIZEOF          reduce using rule 223 (sub-equal-operator -> MODEQ .)
    MINUS           reduce using rule 223 (sub-equal-operator -> MODEQ .)
    !               reduce using rule 223 (sub-equal-operator -> MODEQ .)
    (               reduce using rule 223 (sub-equal-operator -> MODEQ .)
    CONST           reduce using rule 223 (sub-equal-operator -> MODEQ .)
    INT             reduce using rule 223 (sub-equal-operator -> MODEQ .)
    FLOAT           reduce using rule 223 (sub-equal-operator -> MODEQ .)
    STR             reduce using rule 223 (sub-equal-operator -> MODEQ .)
    BOOL            reduce using rule 223 (sub-equal-operator -> MODEQ .)
    CHAR            reduce using rule 223 (sub-equal-operator -> MODEQ .)
    :               reduce using rule 223 (sub-equal-operator -> MODEQ .)


state 269

    (224) sub-equal-operator -> ANDEQ .

    ID              reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    UNSAFE          reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    [               reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    TIMES           reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    AND             reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    SIZEOF          reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    MINUS           reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    !               reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    (               reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    CONST           reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    INT             reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    FLOAT           reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    STR             reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    BOOL            reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    CHAR            reduce using rule 224 (sub-equal-operator -> ANDEQ .)
    :               reduce using rule 224 (sub-equal-operator -> ANDEQ .)


state 270

    (225) sub-equal-operator -> OREQ .

    ID              reduce using rule 225 (sub-equal-operator -> OREQ .)
    UNSAFE          reduce using rule 225 (sub-equal-operator -> OREQ .)
    [               reduce using rule 225 (sub-equal-operator -> OREQ .)
    TIMES           reduce using rule 225 (sub-equal-operator -> OREQ .)
    AND             reduce using rule 225 (sub-equal-operator -> OREQ .)
    SIZEOF          reduce using rule 225 (sub-equal-operator -> OREQ .)
    MINUS           reduce using rule 225 (sub-equal-operator -> OREQ .)
    !               reduce using rule 225 (sub-equal-operator -> OREQ .)
    (               reduce using rule 225 (sub-equal-operator -> OREQ .)
    CONST           reduce using rule 225 (sub-equal-operator -> OREQ .)
    INT             reduce using rule 225 (sub-equal-operator -> OREQ .)
    FLOAT           reduce using rule 225 (sub-equal-operator -> OREQ .)
    STR             reduce using rule 225 (sub-equal-operator -> OREQ .)
    BOOL            reduce using rule 225 (sub-equal-operator -> OREQ .)
    CHAR            reduce using rule 225 (sub-equal-operator -> OREQ .)
    :               reduce using rule 225 (sub-equal-operator -> OREQ .)


state 271

    (226) sub-equal-operator -> XOREQ .

    ID              reduce using rule 226 (sub-equal-operator -> XOREQ .)
    UNSAFE          reduce using rule 226 (sub-equal-operator -> XOREQ .)
    [               reduce using rule 226 (sub-equal-operator -> XOREQ .)
    TIMES           reduce using rule 226 (sub-equal-operator -> XOREQ .)
    AND             reduce using rule 226 (sub-equal-operator -> XOREQ .)
    SIZEOF          reduce using rule 226 (sub-equal-operator -> XOREQ .)
    MINUS           reduce using rule 226 (sub-equal-operator -> XOREQ .)
    !               reduce using rule 226 (sub-equal-operator -> XOREQ .)
    (               reduce using rule 226 (sub-equal-operator -> XOREQ .)
    CONST           reduce using rule 226 (sub-equal-operator -> XOREQ .)
    INT             reduce using rule 226 (sub-equal-operator -> XOREQ .)
    FLOAT           reduce using rule 226 (sub-equal-operator -> XOREQ .)
    STR             reduce using rule 226 (sub-equal-operator -> XOREQ .)
    BOOL            reduce using rule 226 (sub-equal-operator -> XOREQ .)
    CHAR            reduce using rule 226 (sub-equal-operator -> XOREQ .)
    :               reduce using rule 226 (sub-equal-operator -> XOREQ .)


state 272

    (227) sub-equal-operator -> LSHIFTEQ .

    ID              reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    UNSAFE          reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    [               reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    TIMES           reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    AND             reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    SIZEOF          reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    MINUS           reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    !               reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    (               reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    CONST           reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    INT             reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    FLOAT           reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    STR             reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    BOOL            reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    CHAR            reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)
    :               reduce using rule 227 (sub-equal-operator -> LSHIFTEQ .)


state 273

    (228) sub-equal-operator -> RSHIFTEQ .

    ID              reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    UNSAFE          reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    [               reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    TIMES           reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    AND             reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    SIZEOF          reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    MINUS           reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    !               reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    (               reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    CONST           reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    INT             reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    FLOAT           reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    STR             reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    BOOL            reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    CHAR            reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)
    :               reduce using rule 228 (sub-equal-operator -> RSHIFTEQ .)


state 274

    (120) variable-declaration -> ID ID . ;
    (122) variable-declaration -> ID ID . = ID ;
    (124) variable-declaration -> ID ID . = complicated-expression ;

    ;               shift and go to state 366
    =               shift and go to state 367


state 275

    (117) expression-line -> ID ; .

    }               reduce using rule 117 (expression-line -> ID ; .)
    ID              reduce using rule 117 (expression-line -> ID ; .)
    UNSAFE          reduce using rule 117 (expression-line -> ID ; .)
    [               reduce using rule 117 (expression-line -> ID ; .)
    TIMES           reduce using rule 117 (expression-line -> ID ; .)
    AND             reduce using rule 117 (expression-line -> ID ; .)
    SIZEOF          reduce using rule 117 (expression-line -> ID ; .)
    MINUS           reduce using rule 117 (expression-line -> ID ; .)
    !               reduce using rule 117 (expression-line -> ID ; .)
    (               reduce using rule 117 (expression-line -> ID ; .)
    RETURN          reduce using rule 117 (expression-line -> ID ; .)
    VAR             reduce using rule 117 (expression-line -> ID ; .)
    IF              reduce using rule 117 (expression-line -> ID ; .)
    WHILE           reduce using rule 117 (expression-line -> ID ; .)
    CONST           reduce using rule 117 (expression-line -> ID ; .)
    INT             reduce using rule 117 (expression-line -> ID ; .)
    FLOAT           reduce using rule 117 (expression-line -> ID ; .)
    STR             reduce using rule 117 (expression-line -> ID ; .)
    BOOL            reduce using rule 117 (expression-line -> ID ; .)
    CHAR            reduce using rule 117 (expression-line -> ID ; .)
    {               reduce using rule 117 (expression-line -> ID ; .)
    :               reduce using rule 117 (expression-line -> ID ; .)


state 276

    (142) complicated-expression -> ID { . invoke-arguments-list }
    (144) complicated-expression -> ID { . ID }
    (145) complicated-expression -> ID { . complicated-expression }
    (148) complicated-expression -> ID { . }
    (186) invoke-arguments-list -> . invoke-arguments-list , ID
    (187) invoke-arguments-list -> . invoke-arguments-list , complicated-expression
    (188) invoke-arguments-list -> . ID , ID
    (189) invoke-arguments-list -> . complicated-expression , ID
    (190) invoke-arguments-list -> . ID , complicated-expression
    (191) invoke-arguments-list -> . complicated-expression , complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 368
    }               shift and go to state 370
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    invoke-arguments-list          shift and go to state 369
    complicated-expression         shift and go to state 371
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 277

    (150) complicated-expression -> ID [ . ID ]
    (151) complicated-expression -> ID [ . complicated-expression ]
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 372
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 373
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 278

    (168) complicated-expression -> ID . . ID
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments

    ID              shift and go to state 374


state 279

    (172) complicated-expression -> ID invoke-arguments .

    ;               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    [               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    .               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    LS              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    GR              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    TIMES           reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    =               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    PLUS            reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    MINUS           reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    DIVIDE          reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    MOD             reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    AND             reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    OR              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    XOR             reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    LSHIFT          reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    RSHIFT          reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    LE              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    GE              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    EE              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    NE              reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    PLUSEQ          reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    MINUSEQ         reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    TIMESEQ         reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    DIVIDEEQ        reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    MODEQ           reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    ANDEQ           reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    OREQ            reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    XOREQ           reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    LSHIFTEQ        reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    RSHIFTEQ        reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    }               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    ,               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    ]               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    )               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)
    {               reduce using rule 172 (complicated-expression -> ID invoke-arguments .)


state 280

    (173) complicated-expression -> ID : . ID invoke-arguments
    (176) complicated-expression -> ID : . ID template-declaration invoke-arguments
    (63) complicated-type -> ID : . ID
    (64) complicated-type -> ID : . ID TIMES
    (65) complicated-type -> ID : . ID complicated-pointer-level
    (69) complicated-type -> ID : . ID template-declaration
    (70) complicated-type -> ID : . ID template-declaration TIMES
    (71) complicated-type -> ID : . ID template-declaration complicated-pointer-level
    (5) package-complicated-name -> ID : . ID

    ID              shift and go to state 375


state 281

    (175) complicated-expression -> ID template-declaration . invoke-arguments
    (72) complicated-type -> ID template-declaration .
    (73) complicated-type -> ID template-declaration . TIMES
    (74) complicated-type -> ID template-declaration . complicated-pointer-level
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    {               reduce using rule 72 (complicated-type -> ID template-declaration .)
    ID              reduce using rule 72 (complicated-type -> ID template-declaration .)
    )               reduce using rule 72 (complicated-type -> ID template-declaration .)
    GR              reduce using rule 72 (complicated-type -> ID template-declaration .)
    ,               reduce using rule 72 (complicated-type -> ID template-declaration .)
    TIMES           shift and go to state 52
    (               shift and go to state 288

    invoke-arguments               shift and go to state 376
    complicated-pointer-level      shift and go to state 53

state 282

    (192) complicated-expression -> ID binary-operator . ID
    (200) complicated-expression -> ID binary-operator . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 377
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 378
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 283

    (193) complicated-expression -> ID TIMES . ID
    (203) complicated-expression -> ID TIMES . complicated-expression
    (75) complicated-type -> ID TIMES .
    (79) complicated-pointer-level -> TIMES . TIMES
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    {               reduce using rule 75 (complicated-type -> ID TIMES .)
    ID              reduce using rule 75 (complicated-type -> ID TIMES .)
    )               reduce using rule 75 (complicated-type -> ID TIMES .)
    GR              reduce using rule 75 (complicated-type -> ID TIMES .)
    ,               reduce using rule 75 (complicated-type -> ID TIMES .)
    TIMES           shift and go to state 380
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

  ! ID              [ shift and go to state 379 ]

    complicated-expression         shift and go to state 381
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 284

    (194) complicated-expression -> ID LS . ID
    (201) complicated-expression -> ID LS . complicated-expression
    (80) template-declaration -> LS . template-declaration-body GR
    (81) template-declaration -> LS . ID GR
    (82) template-declaration -> LS . complicated-type GR
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (83) template-declaration-body -> . template-declaration-body , ID
    (84) template-declaration-body -> . template-declaration-body , complicated-type
    (85) template-declaration-body -> . ID , ID
    (86) template-declaration-body -> . complicated-type , ID
    (87) template-declaration-body -> . ID , complicated-type
    (88) template-declaration-body -> . complicated-type , complicated-type
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 382
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 383
    template-declaration-body      shift and go to state 76
    complicated-type               shift and go to state 384
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 285

    (195) complicated-expression -> ID GR . ID
    (202) complicated-expression -> ID GR . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 385
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 386
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 286

    (229) complicated-expression -> ID sub-equal-operator . ID
    (231) complicated-expression -> ID sub-equal-operator . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 387
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 388
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 287

    (154) set-statement -> ID = . ID ;
    (156) set-statement -> ID = . complicated-expression ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 389
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 390
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 288

    (182) invoke-arguments -> ( . )
    (183) invoke-arguments -> ( . ID )
    (184) invoke-arguments -> ( . complicated-expression )
    (185) invoke-arguments -> ( . invoke-arguments-list )
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (186) invoke-arguments-list -> . invoke-arguments-list , ID
    (187) invoke-arguments-list -> . invoke-arguments-list , complicated-expression
    (188) invoke-arguments-list -> . ID , ID
    (189) invoke-arguments-list -> . complicated-expression , ID
    (190) invoke-arguments-list -> . ID , complicated-expression
    (191) invoke-arguments-list -> . complicated-expression , complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    )               shift and go to state 391
    ID              shift and go to state 392
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 393
    invoke-arguments-list          shift and go to state 394
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 289

    (137) complicated-expression -> UNSAFE . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    ID              shift and go to state 292
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 290
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 290

    (137) complicated-expression -> UNSAFE complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    =               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    }               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    ,               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    ]               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    )               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    {               reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! .               [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! LS              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! GR              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! TIMES           [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! PLUS            [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! MINUS           [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! MOD             [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! AND             [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! OR              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! XOR             [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! LE              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! GE              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! EE              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! NE              [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! PLUSEQ          [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! MINUSEQ         [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! TIMESEQ         [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! DIVIDEEQ        [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! MODEQ           [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! ANDEQ           [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! OREQ            [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! XOREQ           [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! LSHIFTEQ        [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]
  ! RSHIFTEQ        [ reduce using rule 137 (complicated-expression -> UNSAFE complicated-expression .) ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 291

    (136) unsafe-area -> UNSAFE visibility-area .

    }               reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    ID              reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    UNSAFE          reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    [               reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    TIMES           reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    AND             reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    SIZEOF          reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    MINUS           reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    !               reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    (               reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    RETURN          reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    VAR             reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    IF              reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    WHILE           reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    CONST           reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    INT             reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    FLOAT           reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    STR             reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    BOOL            reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    CHAR            reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    {               reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)
    :               reduce using rule 136 (unsafe-area -> UNSAFE visibility-area .)


state 292

    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 293

    (143) complicated-expression -> complicated-type . { invoke-arguments-list }
    (146) complicated-expression -> complicated-type . { ID }
    (147) complicated-expression -> complicated-type . { complicated-expression }
    (149) complicated-expression -> complicated-type . { }

    {               shift and go to state 298


state 294

    (138) complicated-expression -> [ ] .

    ;               reduce using rule 138 (complicated-expression -> [ ] .)
    [               reduce using rule 138 (complicated-expression -> [ ] .)
    .               reduce using rule 138 (complicated-expression -> [ ] .)
    LS              reduce using rule 138 (complicated-expression -> [ ] .)
    GR              reduce using rule 138 (complicated-expression -> [ ] .)
    TIMES           reduce using rule 138 (complicated-expression -> [ ] .)
    =               reduce using rule 138 (complicated-expression -> [ ] .)
    PLUS            reduce using rule 138 (complicated-expression -> [ ] .)
    MINUS           reduce using rule 138 (complicated-expression -> [ ] .)
    DIVIDE          reduce using rule 138 (complicated-expression -> [ ] .)
    MOD             reduce using rule 138 (complicated-expression -> [ ] .)
    AND             reduce using rule 138 (complicated-expression -> [ ] .)
    OR              reduce using rule 138 (complicated-expression -> [ ] .)
    XOR             reduce using rule 138 (complicated-expression -> [ ] .)
    LSHIFT          reduce using rule 138 (complicated-expression -> [ ] .)
    RSHIFT          reduce using rule 138 (complicated-expression -> [ ] .)
    LE              reduce using rule 138 (complicated-expression -> [ ] .)
    GE              reduce using rule 138 (complicated-expression -> [ ] .)
    EE              reduce using rule 138 (complicated-expression -> [ ] .)
    NE              reduce using rule 138 (complicated-expression -> [ ] .)
    PLUSEQ          reduce using rule 138 (complicated-expression -> [ ] .)
    MINUSEQ         reduce using rule 138 (complicated-expression -> [ ] .)
    TIMESEQ         reduce using rule 138 (complicated-expression -> [ ] .)
    DIVIDEEQ        reduce using rule 138 (complicated-expression -> [ ] .)
    MODEQ           reduce using rule 138 (complicated-expression -> [ ] .)
    ANDEQ           reduce using rule 138 (complicated-expression -> [ ] .)
    OREQ            reduce using rule 138 (complicated-expression -> [ ] .)
    XOREQ           reduce using rule 138 (complicated-expression -> [ ] .)
    LSHIFTEQ        reduce using rule 138 (complicated-expression -> [ ] .)
    RSHIFTEQ        reduce using rule 138 (complicated-expression -> [ ] .)
    }               reduce using rule 138 (complicated-expression -> [ ] .)
    ,               reduce using rule 138 (complicated-expression -> [ ] .)
    ]               reduce using rule 138 (complicated-expression -> [ ] .)
    )               reduce using rule 138 (complicated-expression -> [ ] .)
    {               reduce using rule 138 (complicated-expression -> [ ] .)


state 295

    (139) complicated-expression -> [ ID . ]
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (188) invoke-arguments-list -> ID . , ID
    (190) invoke-arguments-list -> ID . , complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ]               shift and go to state 395
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    ,               shift and go to state 396
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 296

    (140) complicated-expression -> [ complicated-expression . ]
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (189) invoke-arguments-list -> complicated-expression . , ID
    (191) invoke-arguments-list -> complicated-expression . , complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ]               shift and go to state 397
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    ,               shift and go to state 398
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 297

    (141) complicated-expression -> [ invoke-arguments-list . ]
    (186) invoke-arguments-list -> invoke-arguments-list . , ID
    (187) invoke-arguments-list -> invoke-arguments-list . , complicated-expression

    ]               shift and go to state 399
    ,               shift and go to state 400


state 298

    (143) complicated-expression -> complicated-type { . invoke-arguments-list }
    (146) complicated-expression -> complicated-type { . ID }
    (147) complicated-expression -> complicated-type { . complicated-expression }
    (149) complicated-expression -> complicated-type { . }
    (186) invoke-arguments-list -> . invoke-arguments-list , ID
    (187) invoke-arguments-list -> . invoke-arguments-list , complicated-expression
    (188) invoke-arguments-list -> . ID , ID
    (189) invoke-arguments-list -> . complicated-expression , ID
    (190) invoke-arguments-list -> . ID , complicated-expression
    (191) invoke-arguments-list -> . complicated-expression , complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 403
    }               shift and go to state 402
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-type               shift and go to state 293
    invoke-arguments-list          shift and go to state 401
    complicated-expression         shift and go to state 404
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 299

    (121) variable-declaration -> complicated-type ID . ;
    (123) variable-declaration -> complicated-type ID . = ID ;
    (125) variable-declaration -> complicated-type ID . = complicated-expression ;

    ;               shift and go to state 405
    =               shift and go to state 406


state 300

    (164) complicated-expression -> TIMES ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 164 (complicated-expression -> TIMES ID .)
    =               reduce using rule 164 (complicated-expression -> TIMES ID .)
    }               reduce using rule 164 (complicated-expression -> TIMES ID .)
    ,               reduce using rule 164 (complicated-expression -> TIMES ID .)
    ]               reduce using rule 164 (complicated-expression -> TIMES ID .)
    )               reduce using rule 164 (complicated-expression -> TIMES ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! .               [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! LS              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! GR              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! TIMES           [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! PLUS            [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! MINUS           [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! DIVIDE          [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! MOD             [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! AND             [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! OR              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! XOR             [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! LSHIFT          [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! RSHIFT          [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! LE              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! GE              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! EE              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! NE              [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! PLUSEQ          [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! MINUSEQ         [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! TIMESEQ         [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! DIVIDEEQ        [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! MODEQ           [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! ANDEQ           [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! OREQ            [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! XOREQ           [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! LSHIFTEQ        [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! RSHIFTEQ        [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]
  ! {               [ reduce using rule 164 (complicated-expression -> TIMES ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 301

    (165) complicated-expression -> TIMES complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    [               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    LS              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    GR              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    TIMES           reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    =               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    PLUS            reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    MINUS           reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    DIVIDE          reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    MOD             reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    AND             reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    OR              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    XOR             reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    LSHIFT          reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    RSHIFT          reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    LE              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    GE              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    EE              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    NE              reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    PLUSEQ          reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    MINUSEQ         reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    TIMESEQ         reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    DIVIDEEQ        reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    MODEQ           reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    ANDEQ           reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    OREQ            reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    XOREQ           reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    LSHIFTEQ        reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    RSHIFTEQ        reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    }               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    ,               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    ]               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    )               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    {               reduce using rule 165 (complicated-expression -> TIMES complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 165 (complicated-expression -> TIMES complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 302

    (166) complicated-expression -> AND ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 166 (complicated-expression -> AND ID .)
    =               reduce using rule 166 (complicated-expression -> AND ID .)
    }               reduce using rule 166 (complicated-expression -> AND ID .)
    ,               reduce using rule 166 (complicated-expression -> AND ID .)
    ]               reduce using rule 166 (complicated-expression -> AND ID .)
    )               reduce using rule 166 (complicated-expression -> AND ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! .               [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! LS              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! GR              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! TIMES           [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! PLUS            [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! MINUS           [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! DIVIDE          [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! MOD             [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! AND             [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! OR              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! XOR             [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! LSHIFT          [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! RSHIFT          [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! LE              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! GE              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! EE              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! NE              [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! PLUSEQ          [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! MINUSEQ         [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! TIMESEQ         [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! DIVIDEEQ        [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! MODEQ           [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! ANDEQ           [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! OREQ            [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! XOREQ           [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! LSHIFTEQ        [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! RSHIFTEQ        [ reduce using rule 166 (complicated-expression -> AND ID .) ]
  ! {               [ reduce using rule 166 (complicated-expression -> AND ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 303

    (167) complicated-expression -> AND complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    [               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    LS              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    GR              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    =               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    AND             reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    OR              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    XOR             reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    LE              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    GE              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    EE              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    NE              reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    PLUSEQ          reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    MINUSEQ         reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    TIMESEQ         reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    DIVIDEEQ        reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    MODEQ           reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    ANDEQ           reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    OREQ            reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    XOREQ           reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    LSHIFTEQ        reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    RSHIFTEQ        reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    }               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    ,               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    ]               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    )               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    {               reduce using rule 167 (complicated-expression -> AND complicated-expression .)
    .               shift and go to state 257
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70

  ! .               [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! TIMES           [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! PLUS            [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! MINUS           [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! MOD             [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 167 (complicated-expression -> AND complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 304

    (170) complicated-expression -> SIZEOF ( . ID )
    (171) complicated-expression -> SIZEOF ( . complicated-type )
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .

    ID              shift and go to state 407
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)

    complicated-type               shift and go to state 408
    package-complicated-name       shift and go to state 24

state 305

    (213) complicated-expression -> ( ID . )
    (215) complicated-expression -> ( ID . ) ID
    (216) complicated-expression -> ( ID . ) complicated-expression
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    )               shift and go to state 409
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 306

    (214) complicated-expression -> ( complicated-expression . )
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    )               shift and go to state 410
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 307

    (217) complicated-expression -> ( complicated-type . ) ID
    (218) complicated-expression -> ( complicated-type . ) complicated-expression
    (143) complicated-expression -> complicated-type . { invoke-arguments-list }
    (146) complicated-expression -> complicated-type . { ID }
    (147) complicated-expression -> complicated-type . { complicated-expression }
    (149) complicated-expression -> complicated-type . { }

    )               shift and go to state 411
    {               shift and go to state 298


state 308

    (174) complicated-expression -> package-complicated-name : . ID invoke-arguments
    (177) complicated-expression -> package-complicated-name : . ID template-declaration invoke-arguments
    (60) complicated-type -> package-complicated-name : . ID
    (61) complicated-type -> package-complicated-name : . ID TIMES
    (62) complicated-type -> package-complicated-name : . ID complicated-pointer-level
    (66) complicated-type -> package-complicated-name : . ID template-declaration
    (67) complicated-type -> package-complicated-name : . ID template-declaration TIMES
    (68) complicated-type -> package-complicated-name : . ID template-declaration complicated-pointer-level
    (4) package-complicated-name -> package-complicated-name : . ID

    ID              shift and go to state 412


state 309

    (208) complicated-expression -> MINUS ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               reduce using rule 208 (complicated-expression -> MINUS ID .)
    [               reduce using rule 208 (complicated-expression -> MINUS ID .)
    LS              reduce using rule 208 (complicated-expression -> MINUS ID .)
    GR              reduce using rule 208 (complicated-expression -> MINUS ID .)
    TIMES           reduce using rule 208 (complicated-expression -> MINUS ID .)
    =               reduce using rule 208 (complicated-expression -> MINUS ID .)
    PLUS            reduce using rule 208 (complicated-expression -> MINUS ID .)
    MINUS           reduce using rule 208 (complicated-expression -> MINUS ID .)
    DIVIDE          reduce using rule 208 (complicated-expression -> MINUS ID .)
    MOD             reduce using rule 208 (complicated-expression -> MINUS ID .)
    AND             reduce using rule 208 (complicated-expression -> MINUS ID .)
    OR              reduce using rule 208 (complicated-expression -> MINUS ID .)
    XOR             reduce using rule 208 (complicated-expression -> MINUS ID .)
    LSHIFT          reduce using rule 208 (complicated-expression -> MINUS ID .)
    RSHIFT          reduce using rule 208 (complicated-expression -> MINUS ID .)
    LE              reduce using rule 208 (complicated-expression -> MINUS ID .)
    GE              reduce using rule 208 (complicated-expression -> MINUS ID .)
    EE              reduce using rule 208 (complicated-expression -> MINUS ID .)
    NE              reduce using rule 208 (complicated-expression -> MINUS ID .)
    PLUSEQ          reduce using rule 208 (complicated-expression -> MINUS ID .)
    MINUSEQ         reduce using rule 208 (complicated-expression -> MINUS ID .)
    TIMESEQ         reduce using rule 208 (complicated-expression -> MINUS ID .)
    DIVIDEEQ        reduce using rule 208 (complicated-expression -> MINUS ID .)
    MODEQ           reduce using rule 208 (complicated-expression -> MINUS ID .)
    ANDEQ           reduce using rule 208 (complicated-expression -> MINUS ID .)
    OREQ            reduce using rule 208 (complicated-expression -> MINUS ID .)
    XOREQ           reduce using rule 208 (complicated-expression -> MINUS ID .)
    LSHIFTEQ        reduce using rule 208 (complicated-expression -> MINUS ID .)
    RSHIFTEQ        reduce using rule 208 (complicated-expression -> MINUS ID .)
    }               reduce using rule 208 (complicated-expression -> MINUS ID .)
    ,               reduce using rule 208 (complicated-expression -> MINUS ID .)
    ]               reduce using rule 208 (complicated-expression -> MINUS ID .)
    )               reduce using rule 208 (complicated-expression -> MINUS ID .)
    {               reduce using rule 208 (complicated-expression -> MINUS ID .)
    .               shift and go to state 278
    :               shift and go to state 280
    (               shift and go to state 288

  ! .               [ reduce using rule 208 (complicated-expression -> MINUS ID .) ]
  ! {               [ shift and go to state 276 ]
  ! [               [ shift and go to state 277 ]
  ! TIMES           [ shift and go to state 283 ]
  ! LS              [ shift and go to state 284 ]
  ! GR              [ shift and go to state 285 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 310

    (209) complicated-expression -> MINUS complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    [               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    LS              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    GR              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    TIMES           reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    =               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    PLUS            reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    MINUS           reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    DIVIDE          reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    MOD             reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    AND             reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    OR              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    XOR             reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    LSHIFT          reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    RSHIFT          reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    LE              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    GE              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    EE              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    NE              reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    PLUSEQ          reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    MINUSEQ         reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    TIMESEQ         reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    DIVIDEEQ        reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    MODEQ           reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    ANDEQ           reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    OREQ            reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    XOREQ           reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    LSHIFTEQ        reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    RSHIFTEQ        reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    }               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    ,               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    ]               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    )               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    {               reduce using rule 209 (complicated-expression -> MINUS complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 209 (complicated-expression -> MINUS complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 311

    (210) complicated-expression -> ! ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               reduce using rule 210 (complicated-expression -> ! ID .)
    [               reduce using rule 210 (complicated-expression -> ! ID .)
    LS              reduce using rule 210 (complicated-expression -> ! ID .)
    GR              reduce using rule 210 (complicated-expression -> ! ID .)
    TIMES           reduce using rule 210 (complicated-expression -> ! ID .)
    =               reduce using rule 210 (complicated-expression -> ! ID .)
    PLUS            reduce using rule 210 (complicated-expression -> ! ID .)
    MINUS           reduce using rule 210 (complicated-expression -> ! ID .)
    DIVIDE          reduce using rule 210 (complicated-expression -> ! ID .)
    MOD             reduce using rule 210 (complicated-expression -> ! ID .)
    AND             reduce using rule 210 (complicated-expression -> ! ID .)
    OR              reduce using rule 210 (complicated-expression -> ! ID .)
    XOR             reduce using rule 210 (complicated-expression -> ! ID .)
    LSHIFT          reduce using rule 210 (complicated-expression -> ! ID .)
    RSHIFT          reduce using rule 210 (complicated-expression -> ! ID .)
    LE              reduce using rule 210 (complicated-expression -> ! ID .)
    GE              reduce using rule 210 (complicated-expression -> ! ID .)
    EE              reduce using rule 210 (complicated-expression -> ! ID .)
    NE              reduce using rule 210 (complicated-expression -> ! ID .)
    PLUSEQ          reduce using rule 210 (complicated-expression -> ! ID .)
    MINUSEQ         reduce using rule 210 (complicated-expression -> ! ID .)
    TIMESEQ         reduce using rule 210 (complicated-expression -> ! ID .)
    DIVIDEEQ        reduce using rule 210 (complicated-expression -> ! ID .)
    MODEQ           reduce using rule 210 (complicated-expression -> ! ID .)
    ANDEQ           reduce using rule 210 (complicated-expression -> ! ID .)
    OREQ            reduce using rule 210 (complicated-expression -> ! ID .)
    XOREQ           reduce using rule 210 (complicated-expression -> ! ID .)
    LSHIFTEQ        reduce using rule 210 (complicated-expression -> ! ID .)
    RSHIFTEQ        reduce using rule 210 (complicated-expression -> ! ID .)
    }               reduce using rule 210 (complicated-expression -> ! ID .)
    ,               reduce using rule 210 (complicated-expression -> ! ID .)
    ]               reduce using rule 210 (complicated-expression -> ! ID .)
    )               reduce using rule 210 (complicated-expression -> ! ID .)
    {               reduce using rule 210 (complicated-expression -> ! ID .)
    .               shift and go to state 278
    :               shift and go to state 280
    (               shift and go to state 288

  ! .               [ reduce using rule 210 (complicated-expression -> ! ID .) ]
  ! {               [ shift and go to state 276 ]
  ! [               [ shift and go to state 277 ]
  ! TIMES           [ shift and go to state 283 ]
  ! LS              [ shift and go to state 284 ]
  ! GR              [ shift and go to state 285 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 312

    (211) complicated-expression -> ! complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    [               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    LS              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    GR              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    TIMES           reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    =               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    PLUS            reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    MINUS           reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    DIVIDE          reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    MOD             reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    AND             reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    OR              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    XOR             reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    LSHIFT          reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    RSHIFT          reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    LE              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    GE              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    EE              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    NE              reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    PLUSEQ          reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    MINUSEQ         reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    TIMESEQ         reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    DIVIDEEQ        reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    MODEQ           reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    ANDEQ           reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    OREQ            reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    XOREQ           reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    LSHIFTEQ        reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    RSHIFTEQ        reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    }               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    ,               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    ]               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    )               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    {               reduce using rule 211 (complicated-expression -> ! complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 211 (complicated-expression -> ! complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 313

    (118) return-statement -> RETURN complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 413
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 314

    (119) return-statement -> RETURN ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 414
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 315

    (126) variable-declaration -> VAR ID . = ID ;
    (127) variable-declaration -> VAR ID . = complicated-expression ;

    =               shift and go to state 415


state 316

    (128) if-statement -> IF complicated-expression . visibility-area
    (129) if-statement -> IF complicated-expression . visibility-area ELSE visibility-area
    (130) if-statement -> IF complicated-expression . visibility-area ELSE if-statement
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (158) visibility-area -> . function-body
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (95) function-body -> . { expression-lines }

    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273
    {               shift and go to state 103

    visibility-area                shift and go to state 416
    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262
    function-body                  shift and go to state 189

state 317

    (131) if-statement -> IF ID . visibility-area
    (132) if-statement -> IF ID . visibility-area ELSE visibility-area
    (133) if-statement -> IF ID . visibility-area ELSE if-statement
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (158) visibility-area -> . function-body
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES
    (95) function-body -> . { expression-lines }

    {               shift and go to state 418
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    visibility-area                shift and go to state 417
    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36
    function-body                  shift and go to state 189

state 318

    (134) while-statement -> WHILE complicated-expression . visibility-area
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (158) visibility-area -> . function-body
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (95) function-body -> . { expression-lines }

    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273
    {               shift and go to state 103

    visibility-area                shift and go to state 419
    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262
    function-body                  shift and go to state 189

state 319

    (135) while-statement -> WHILE ID . visibility-area
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (158) visibility-area -> . function-body
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES
    (95) function-body -> . { expression-lines }

    {               shift and go to state 418
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    visibility-area                shift and go to state 420
    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36
    function-body                  shift and go to state 189

state 320

    (91) function-arguments-body -> function-arguments-body , function-argument .

    )               reduce using rule 91 (function-arguments-body -> function-arguments-body , function-argument .)
    ,               reduce using rule 91 (function-arguments-body -> function-arguments-body , function-argument .)


state 321

    (30) main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .

    ID              reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    CONST           reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    :               reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)
    $end            reduce using rule 30 (main -> ID OPERATOR binary-operator template-declaration function-arguments function-body .)


state 322

    (38) main -> ID OPERATOR binary-operator ( ) function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 421

state 323

    (42) main -> ID OPERATOR binary-operator ( ) template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 422

state 324

    (31) main -> ID OPERATOR TIMES template-declaration function-arguments function-body .

    ID              reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    CONST           reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    :               reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)
    $end            reduce using rule 31 (main -> ID OPERATOR TIMES template-declaration function-arguments function-body .)


state 325

    (32) main -> ID OPERATOR LS template-declaration function-arguments function-body .

    ID              reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    CONST           reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    :               reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)
    $end            reduce using rule 32 (main -> ID OPERATOR LS template-declaration function-arguments function-body .)


state 326

    (33) main -> ID OPERATOR GR template-declaration function-arguments function-body .

    ID              reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    CONST           reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    :               reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)
    $end            reduce using rule 33 (main -> ID OPERATOR GR template-declaration function-arguments function-body .)


state 327

    (46) main -> ID OPERATOR ( ) function-arguments function-body .

    ID              reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    UNSAFE          reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    OPERATOR        reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    EXTERN          reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    STRUCT          reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    CONST           reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    :               reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)
    $end            reduce using rule 46 (main -> ID OPERATOR ( ) function-arguments function-body .)


state 328

    (39) main -> ID OPERATOR ! ( ) function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 423

state 329

    (43) main -> ID OPERATOR ! ( ) template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 424

state 330

    (50) main -> ID OPERATOR [ ] function-arguments function-body .

    ID              reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    UNSAFE          reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    OPERATOR        reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    EXTERN          reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    STRUCT          reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    CONST           reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    :               reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)
    $end            reduce using rule 50 (main -> ID OPERATOR [ ] function-arguments function-body .)


state 331

    (52) main -> ID OPERATOR [ ] template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 425

state 332

    (56) main -> ID OPERATOR = template-declaration function-arguments function-body .

    ID              reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    CONST           reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    :               reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)
    $end            reduce using rule 56 (main -> ID OPERATOR = template-declaration function-arguments function-body .)


state 333

    (34) main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .

    ID              reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    CONST           reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    :               reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)
    $end            reduce using rule 34 (main -> complicated-type OPERATOR binary-operator template-declaration function-arguments function-body .)


state 334

    (40) main -> complicated-type OPERATOR binary-operator ( ) function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 426

state 335

    (44) main -> complicated-type OPERATOR binary-operator ( ) template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 427

state 336

    (35) main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .

    ID              reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    CONST           reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    :               reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)
    $end            reduce using rule 35 (main -> complicated-type OPERATOR TIMES template-declaration function-arguments function-body .)


state 337

    (36) main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .

    ID              reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    CONST           reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    :               reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)
    $end            reduce using rule 36 (main -> complicated-type OPERATOR LS template-declaration function-arguments function-body .)


state 338

    (37) main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .

    ID              reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    CONST           reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    :               reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)
    $end            reduce using rule 37 (main -> complicated-type OPERATOR GR template-declaration function-arguments function-body .)


state 339

    (47) main -> complicated-type OPERATOR ( ) function-arguments function-body .

    ID              reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    UNSAFE          reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    OPERATOR        reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    EXTERN          reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    STRUCT          reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    CONST           reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    :               reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)
    $end            reduce using rule 47 (main -> complicated-type OPERATOR ( ) function-arguments function-body .)


state 340

    (41) main -> complicated-type OPERATOR ! ( ) function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 428

state 341

    (45) main -> complicated-type OPERATOR ! ( ) template-declaration . function-arguments function-body
    (89) function-arguments -> . ( function-arguments-body )
    (90) function-arguments -> . ( )

    (               shift and go to state 51

    function-arguments             shift and go to state 429

state 342

    (51) main -> complicated-type OPERATOR [ ] function-arguments function-body .

    ID              reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    UNSAFE          reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    OPERATOR        reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    EXTERN          reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    STRUCT          reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    CONST           reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    :               reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)
    $end            reduce using rule 51 (main -> complicated-type OPERATOR [ ] function-arguments function-body .)


state 343

    (53) main -> complicated-type OPERATOR [ ] template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 430

state 344

    (57) main -> complicated-type OPERATOR = template-declaration function-arguments function-body .

    ID              reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    CONST           reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    :               reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)
    $end            reduce using rule 57 (main -> complicated-type OPERATOR = template-declaration function-arguments function-body .)


state 345

    (20) main -> UNSAFE ID ID template-declaration function-arguments function-body .

    ID              reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    CONST           reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    :               reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)
    $end            reduce using rule 20 (main -> UNSAFE ID ID template-declaration function-arguments function-body .)


state 346

    (21) main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .

    ID              reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    CONST           reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    :               reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)
    $end            reduce using rule 21 (main -> UNSAFE complicated-type ID template-declaration function-arguments function-body .)


state 347

    (102) struct-field -> ID ID . ;

    ;               shift and go to state 431


state 348

    (103) struct-field -> complicated-type ID . ;

    ;               shift and go to state 432


state 349

    (104) struct-field -> ACCMOD ID . ID ;
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ID              shift and go to state 433
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 350

    (105) struct-field -> ACCMOD complicated-type . ID ;

    ID              shift and go to state 434


state 351

    (153) complicated-expression -> complicated-expression [ complicated-expression . ]
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ]               shift and go to state 435
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 352

    (152) complicated-expression -> complicated-expression [ ID . ]
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ]               shift and go to state 436
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 353

    (169) complicated-expression -> complicated-expression . ID .
    (179) complicated-expression -> complicated-expression . ID . invoke-arguments
    (181) complicated-expression -> complicated-expression . ID . template-declaration invoke-arguments
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    ;               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    [               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    .               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    LS              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    GR              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    TIMES           reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    =               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    PLUS            reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    MINUS           reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    DIVIDE          reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    MOD             reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    AND             reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    OR              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    XOR             reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    LSHIFT          reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    RSHIFT          reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    LE              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    GE              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    EE              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    NE              reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    PLUSEQ          reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    MINUSEQ         reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    TIMESEQ         reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    DIVIDEEQ        reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    MODEQ           reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    ANDEQ           reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    OREQ            reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    XOREQ           reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    LSHIFTEQ        reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    RSHIFTEQ        reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    }               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    ,               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    ]               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    )               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    {               reduce using rule 169 (complicated-expression -> complicated-expression . ID .)
    (               shift and go to state 288

  ! LS              [ shift and go to state 34 ]

    invoke-arguments               shift and go to state 437
    template-declaration           shift and go to state 438

state 354

    (204) complicated-expression -> complicated-expression binary-operator complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    =               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    }               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    ,               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    ]               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    )               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    {               reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! .               [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! LS              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! GR              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! TIMES           [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! PLUS            [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! MINUS           [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! MOD             [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! AND             [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! OR              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! XOR             [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! LE              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! GE              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! EE              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! NE              [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! PLUSEQ          [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! MINUSEQ         [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! TIMESEQ         [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! DIVIDEEQ        [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! MODEQ           [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! ANDEQ           [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! OREQ            [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! XOREQ           [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! LSHIFTEQ        [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]
  ! RSHIFTEQ        [ reduce using rule 204 (complicated-expression -> complicated-expression binary-operator complicated-expression .) ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 355

    (196) complicated-expression -> complicated-expression binary-operator ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .)
    =               reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .)
    }               reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .)
    ,               reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .)
    ]               reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .)
    )               reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! .               [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! LS              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! GR              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! TIMES           [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! PLUS            [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! MINUS           [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! DIVIDE          [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! MOD             [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! AND             [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! OR              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! XOR             [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! LSHIFT          [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! RSHIFT          [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! LE              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! GE              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! EE              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! NE              [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! PLUSEQ          [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! MINUSEQ         [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! TIMESEQ         [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! DIVIDEEQ        [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! MODEQ           [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! ANDEQ           [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! OREQ            [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! XOREQ           [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! LSHIFTEQ        [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! RSHIFTEQ        [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]
  ! {               [ reduce using rule 196 (complicated-expression -> complicated-expression binary-operator ID .) ]

    binary-operator                shift and go to state 282
    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 356

    (205) complicated-expression -> complicated-expression LS complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    [               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    LS              reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    GR              reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    =               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    LE              reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    GE              reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    EE              reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    NE              reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    PLUSEQ          reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    MINUSEQ         reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    TIMESEQ         reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    DIVIDEEQ        reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    MODEQ           reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    ANDEQ           reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    OREQ            reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    XOREQ           reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    LSHIFTEQ        reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    RSHIFTEQ        reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    }               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    ,               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    ]               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    )               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    {               reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .)
    .               shift and go to state 257
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70

  ! .               [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! TIMES           [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! PLUS            [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! MINUS           [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! MOD             [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! AND             [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! OR              [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! XOR             [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 205 (complicated-expression -> complicated-expression LS complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 357

    (197) complicated-expression -> complicated-expression LS ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 197 (complicated-expression -> complicated-expression LS ID .)
    =               reduce using rule 197 (complicated-expression -> complicated-expression LS ID .)
    }               reduce using rule 197 (complicated-expression -> complicated-expression LS ID .)
    ,               reduce using rule 197 (complicated-expression -> complicated-expression LS ID .)
    ]               reduce using rule 197 (complicated-expression -> complicated-expression LS ID .)
    )               reduce using rule 197 (complicated-expression -> complicated-expression LS ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! .               [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! LS              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! GR              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! TIMES           [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! PLUS            [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! MINUS           [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! DIVIDE          [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! MOD             [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! AND             [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! OR              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! XOR             [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! LSHIFT          [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! RSHIFT          [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! LE              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! GE              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! EE              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! NE              [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! PLUSEQ          [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! MINUSEQ         [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! TIMESEQ         [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! DIVIDEEQ        [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! MODEQ           [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! ANDEQ           [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! OREQ            [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! XOREQ           [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! LSHIFTEQ        [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! RSHIFTEQ        [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]
  ! {               [ reduce using rule 197 (complicated-expression -> complicated-expression LS ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 358

    (206) complicated-expression -> complicated-expression GR complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    [               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    LS              reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    GR              reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    =               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    LE              reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    GE              reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    EE              reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    NE              reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    PLUSEQ          reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    MINUSEQ         reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    TIMESEQ         reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    DIVIDEEQ        reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    MODEQ           reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    ANDEQ           reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    OREQ            reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    XOREQ           reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    LSHIFTEQ        reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    RSHIFTEQ        reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    }               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    ,               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    ]               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    )               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    {               reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .)
    .               shift and go to state 257
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70

  ! .               [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! TIMES           [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! PLUS            [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! MINUS           [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! MOD             [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! AND             [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! OR              [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! XOR             [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 206 (complicated-expression -> complicated-expression GR complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 359

    (198) complicated-expression -> complicated-expression GR ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 198 (complicated-expression -> complicated-expression GR ID .)
    =               reduce using rule 198 (complicated-expression -> complicated-expression GR ID .)
    }               reduce using rule 198 (complicated-expression -> complicated-expression GR ID .)
    ,               reduce using rule 198 (complicated-expression -> complicated-expression GR ID .)
    ]               reduce using rule 198 (complicated-expression -> complicated-expression GR ID .)
    )               reduce using rule 198 (complicated-expression -> complicated-expression GR ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! .               [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! LS              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! GR              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! TIMES           [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! PLUS            [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! MINUS           [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! DIVIDE          [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! MOD             [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! AND             [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! OR              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! XOR             [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! LSHIFT          [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! RSHIFT          [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! LE              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! GE              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! EE              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! NE              [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! PLUSEQ          [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! MINUSEQ         [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! TIMESEQ         [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! DIVIDEEQ        [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! MODEQ           [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! ANDEQ           [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! OREQ            [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! XOREQ           [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! LSHIFTEQ        [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! RSHIFTEQ        [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]
  ! {               [ reduce using rule 198 (complicated-expression -> complicated-expression GR ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 360

    (207) complicated-expression -> complicated-expression TIMES complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    [               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    LS              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    GR              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    TIMES           reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    =               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    PLUS            reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    MINUS           reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    DIVIDE          reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    MOD             reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    AND             reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    OR              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    XOR             reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    LSHIFT          reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    RSHIFT          reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    LE              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    GE              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    EE              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    NE              reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    PLUSEQ          reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    MINUSEQ         reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    TIMESEQ         reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    DIVIDEEQ        reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    MODEQ           reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    ANDEQ           reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    OREQ            reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    XOREQ           reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    LSHIFTEQ        reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    RSHIFTEQ        reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    }               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    ,               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    ]               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    )               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    {               reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 207 (complicated-expression -> complicated-expression TIMES complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 361

    (199) complicated-expression -> complicated-expression TIMES ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .)
    =               reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .)
    }               reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .)
    ,               reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .)
    ]               reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .)
    )               reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! .               [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! LS              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! GR              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! TIMES           [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! PLUS            [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! MINUS           [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! DIVIDE          [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! MOD             [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! AND             [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! OR              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! XOR             [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! LSHIFT          [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! RSHIFT          [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! LE              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! GE              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! EE              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! NE              [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! PLUSEQ          [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! MINUSEQ         [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! TIMESEQ         [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! DIVIDEEQ        [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! MODEQ           [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! ANDEQ           [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! OREQ            [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! XOREQ           [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! LSHIFTEQ        [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! RSHIFTEQ        [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]
  ! {               [ reduce using rule 199 (complicated-expression -> complicated-expression TIMES ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 362

    (232) complicated-expression -> complicated-expression sub-equal-operator complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    =               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    }               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    ,               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    ]               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    )               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    {               reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! .               [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! LS              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! GR              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! TIMES           [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! PLUS            [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! MINUS           [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! MOD             [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! AND             [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! OR              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! XOR             [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! LE              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! GE              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! EE              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! NE              [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! PLUSEQ          [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! MINUSEQ         [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! TIMESEQ         [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! DIVIDEEQ        [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! MODEQ           [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! ANDEQ           [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! OREQ            [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! XOREQ           [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! LSHIFTEQ        [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]
  ! RSHIFTEQ        [ reduce using rule 232 (complicated-expression -> complicated-expression sub-equal-operator complicated-expression .) ]

    sub-equal-operator             shift and go to state 262
    binary-operator                shift and go to state 258

state 363

    (230) complicated-expression -> complicated-expression sub-equal-operator ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .)
    =               reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .)
    }               reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .)
    ,               reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .)
    ]               reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .)
    )               reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! .               [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! LS              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! GR              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! TIMES           [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! PLUS            [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! MINUS           [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! DIVIDE          [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! MOD             [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! AND             [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! OR              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! XOR             [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! LSHIFT          [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! RSHIFT          [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! LE              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! GE              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! EE              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! NE              [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! PLUSEQ          [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! MINUSEQ         [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! TIMESEQ         [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! DIVIDEEQ        [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! MODEQ           [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! ANDEQ           [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! OREQ            [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! XOREQ           [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! LSHIFTEQ        [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! RSHIFTEQ        [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]
  ! {               [ reduce using rule 230 (complicated-expression -> complicated-expression sub-equal-operator ID .) ]

    sub-equal-operator             shift and go to state 286
    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    complicated-pointer-level      shift and go to state 36

state 364

    (157) set-statement -> complicated-expression = complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 439
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 365

    (155) set-statement -> complicated-expression = ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 440
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 366

    (120) variable-declaration -> ID ID ; .

    }               reduce using rule 120 (variable-declaration -> ID ID ; .)
    ID              reduce using rule 120 (variable-declaration -> ID ID ; .)
    UNSAFE          reduce using rule 120 (variable-declaration -> ID ID ; .)
    [               reduce using rule 120 (variable-declaration -> ID ID ; .)
    TIMES           reduce using rule 120 (variable-declaration -> ID ID ; .)
    AND             reduce using rule 120 (variable-declaration -> ID ID ; .)
    SIZEOF          reduce using rule 120 (variable-declaration -> ID ID ; .)
    MINUS           reduce using rule 120 (variable-declaration -> ID ID ; .)
    !               reduce using rule 120 (variable-declaration -> ID ID ; .)
    (               reduce using rule 120 (variable-declaration -> ID ID ; .)
    RETURN          reduce using rule 120 (variable-declaration -> ID ID ; .)
    VAR             reduce using rule 120 (variable-declaration -> ID ID ; .)
    IF              reduce using rule 120 (variable-declaration -> ID ID ; .)
    WHILE           reduce using rule 120 (variable-declaration -> ID ID ; .)
    CONST           reduce using rule 120 (variable-declaration -> ID ID ; .)
    INT             reduce using rule 120 (variable-declaration -> ID ID ; .)
    FLOAT           reduce using rule 120 (variable-declaration -> ID ID ; .)
    STR             reduce using rule 120 (variable-declaration -> ID ID ; .)
    BOOL            reduce using rule 120 (variable-declaration -> ID ID ; .)
    CHAR            reduce using rule 120 (variable-declaration -> ID ID ; .)
    {               reduce using rule 120 (variable-declaration -> ID ID ; .)
    :               reduce using rule 120 (variable-declaration -> ID ID ; .)


state 367

    (122) variable-declaration -> ID ID = . ID ;
    (124) variable-declaration -> ID ID = . complicated-expression ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 441
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 442
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 368

    (144) complicated-expression -> ID { ID . }
    (188) invoke-arguments-list -> ID . , ID
    (190) invoke-arguments-list -> ID . , complicated-expression
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    }               shift and go to state 443
    ,               shift and go to state 396
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 369

    (142) complicated-expression -> ID { invoke-arguments-list . }
    (186) invoke-arguments-list -> invoke-arguments-list . , ID
    (187) invoke-arguments-list -> invoke-arguments-list . , complicated-expression

    }               shift and go to state 444
    ,               shift and go to state 400


state 370

    (148) complicated-expression -> ID { } .

    ;               reduce using rule 148 (complicated-expression -> ID { } .)
    [               reduce using rule 148 (complicated-expression -> ID { } .)
    .               reduce using rule 148 (complicated-expression -> ID { } .)
    LS              reduce using rule 148 (complicated-expression -> ID { } .)
    GR              reduce using rule 148 (complicated-expression -> ID { } .)
    TIMES           reduce using rule 148 (complicated-expression -> ID { } .)
    =               reduce using rule 148 (complicated-expression -> ID { } .)
    PLUS            reduce using rule 148 (complicated-expression -> ID { } .)
    MINUS           reduce using rule 148 (complicated-expression -> ID { } .)
    DIVIDE          reduce using rule 148 (complicated-expression -> ID { } .)
    MOD             reduce using rule 148 (complicated-expression -> ID { } .)
    AND             reduce using rule 148 (complicated-expression -> ID { } .)
    OR              reduce using rule 148 (complicated-expression -> ID { } .)
    XOR             reduce using rule 148 (complicated-expression -> ID { } .)
    LSHIFT          reduce using rule 148 (complicated-expression -> ID { } .)
    RSHIFT          reduce using rule 148 (complicated-expression -> ID { } .)
    LE              reduce using rule 148 (complicated-expression -> ID { } .)
    GE              reduce using rule 148 (complicated-expression -> ID { } .)
    EE              reduce using rule 148 (complicated-expression -> ID { } .)
    NE              reduce using rule 148 (complicated-expression -> ID { } .)
    PLUSEQ          reduce using rule 148 (complicated-expression -> ID { } .)
    MINUSEQ         reduce using rule 148 (complicated-expression -> ID { } .)
    TIMESEQ         reduce using rule 148 (complicated-expression -> ID { } .)
    DIVIDEEQ        reduce using rule 148 (complicated-expression -> ID { } .)
    MODEQ           reduce using rule 148 (complicated-expression -> ID { } .)
    ANDEQ           reduce using rule 148 (complicated-expression -> ID { } .)
    OREQ            reduce using rule 148 (complicated-expression -> ID { } .)
    XOREQ           reduce using rule 148 (complicated-expression -> ID { } .)
    LSHIFTEQ        reduce using rule 148 (complicated-expression -> ID { } .)
    RSHIFTEQ        reduce using rule 148 (complicated-expression -> ID { } .)
    }               reduce using rule 148 (complicated-expression -> ID { } .)
    ,               reduce using rule 148 (complicated-expression -> ID { } .)
    ]               reduce using rule 148 (complicated-expression -> ID { } .)
    )               reduce using rule 148 (complicated-expression -> ID { } .)
    {               reduce using rule 148 (complicated-expression -> ID { } .)


state 371

    (145) complicated-expression -> ID { complicated-expression . }
    (189) invoke-arguments-list -> complicated-expression . , ID
    (191) invoke-arguments-list -> complicated-expression . , complicated-expression
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    }               shift and go to state 445
    ,               shift and go to state 398
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 372

    (150) complicated-expression -> ID [ ID . ]
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ]               shift and go to state 446
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 373

    (151) complicated-expression -> ID [ complicated-expression . ]
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ]               shift and go to state 447
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 374

    (168) complicated-expression -> ID . ID .
    (178) complicated-expression -> ID . ID . invoke-arguments
    (180) complicated-expression -> ID . ID . template-declaration invoke-arguments
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR

    ;               reduce using rule 168 (complicated-expression -> ID . ID .)
    [               reduce using rule 168 (complicated-expression -> ID . ID .)
    .               reduce using rule 168 (complicated-expression -> ID . ID .)
    LS              reduce using rule 168 (complicated-expression -> ID . ID .)
    GR              reduce using rule 168 (complicated-expression -> ID . ID .)
    TIMES           reduce using rule 168 (complicated-expression -> ID . ID .)
    =               reduce using rule 168 (complicated-expression -> ID . ID .)
    PLUS            reduce using rule 168 (complicated-expression -> ID . ID .)
    MINUS           reduce using rule 168 (complicated-expression -> ID . ID .)
    DIVIDE          reduce using rule 168 (complicated-expression -> ID . ID .)
    MOD             reduce using rule 168 (complicated-expression -> ID . ID .)
    AND             reduce using rule 168 (complicated-expression -> ID . ID .)
    OR              reduce using rule 168 (complicated-expression -> ID . ID .)
    XOR             reduce using rule 168 (complicated-expression -> ID . ID .)
    LSHIFT          reduce using rule 168 (complicated-expression -> ID . ID .)
    RSHIFT          reduce using rule 168 (complicated-expression -> ID . ID .)
    LE              reduce using rule 168 (complicated-expression -> ID . ID .)
    GE              reduce using rule 168 (complicated-expression -> ID . ID .)
    EE              reduce using rule 168 (complicated-expression -> ID . ID .)
    NE              reduce using rule 168 (complicated-expression -> ID . ID .)
    PLUSEQ          reduce using rule 168 (complicated-expression -> ID . ID .)
    MINUSEQ         reduce using rule 168 (complicated-expression -> ID . ID .)
    TIMESEQ         reduce using rule 168 (complicated-expression -> ID . ID .)
    DIVIDEEQ        reduce using rule 168 (complicated-expression -> ID . ID .)
    MODEQ           reduce using rule 168 (complicated-expression -> ID . ID .)
    ANDEQ           reduce using rule 168 (complicated-expression -> ID . ID .)
    OREQ            reduce using rule 168 (complicated-expression -> ID . ID .)
    XOREQ           reduce using rule 168 (complicated-expression -> ID . ID .)
    LSHIFTEQ        reduce using rule 168 (complicated-expression -> ID . ID .)
    RSHIFTEQ        reduce using rule 168 (complicated-expression -> ID . ID .)
    }               reduce using rule 168 (complicated-expression -> ID . ID .)
    ,               reduce using rule 168 (complicated-expression -> ID . ID .)
    ]               reduce using rule 168 (complicated-expression -> ID . ID .)
    )               reduce using rule 168 (complicated-expression -> ID . ID .)
    {               reduce using rule 168 (complicated-expression -> ID . ID .)
    (               shift and go to state 288

  ! LS              [ shift and go to state 34 ]

    invoke-arguments               shift and go to state 448
    template-declaration           shift and go to state 449

state 375

    (173) complicated-expression -> ID : ID . invoke-arguments
    (176) complicated-expression -> ID : ID . template-declaration invoke-arguments
    (63) complicated-type -> ID : ID .
    (64) complicated-type -> ID : ID . TIMES
    (65) complicated-type -> ID : ID . complicated-pointer-level
    (69) complicated-type -> ID : ID . template-declaration
    (70) complicated-type -> ID : ID . template-declaration TIMES
    (71) complicated-type -> ID : ID . template-declaration complicated-pointer-level
    (5) package-complicated-name -> ID : ID .
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    {               reduce using rule 63 (complicated-type -> ID : ID .)
    ID              reduce using rule 63 (complicated-type -> ID : ID .)
    )               reduce using rule 63 (complicated-type -> ID : ID .)
    GR              reduce using rule 63 (complicated-type -> ID : ID .)
    ,               reduce using rule 63 (complicated-type -> ID : ID .)
    TIMES           shift and go to state 130
    :               reduce using rule 5 (package-complicated-name -> ID : ID .)
    (               shift and go to state 288
    LS              shift and go to state 34

    invoke-arguments               shift and go to state 450
    template-declaration           shift and go to state 451
    complicated-pointer-level      shift and go to state 131

state 376

    (175) complicated-expression -> ID template-declaration invoke-arguments .

    ;               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    [               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    .               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    LS              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    GR              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    TIMES           reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    =               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    PLUS            reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    MINUS           reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    DIVIDE          reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    MOD             reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    AND             reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    OR              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    XOR             reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    LSHIFT          reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    RSHIFT          reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    LE              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    GE              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    EE              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    NE              reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    PLUSEQ          reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    MINUSEQ         reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    TIMESEQ         reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    DIVIDEEQ        reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    MODEQ           reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    ANDEQ           reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    OREQ            reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    XOREQ           reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    LSHIFTEQ        reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    RSHIFTEQ        reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    }               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    ,               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    ]               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    )               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)
    {               reduce using rule 175 (complicated-expression -> ID template-declaration invoke-arguments .)


state 377

    (192) complicated-expression -> ID binary-operator ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 192 (complicated-expression -> ID binary-operator ID .)
    =               reduce using rule 192 (complicated-expression -> ID binary-operator ID .)
    }               reduce using rule 192 (complicated-expression -> ID binary-operator ID .)
    ,               reduce using rule 192 (complicated-expression -> ID binary-operator ID .)
    ]               reduce using rule 192 (complicated-expression -> ID binary-operator ID .)
    )               reduce using rule 192 (complicated-expression -> ID binary-operator ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! .               [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! LS              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! GR              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! TIMES           [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! PLUS            [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! MINUS           [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! DIVIDE          [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! MOD             [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! AND             [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! OR              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! XOR             [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! LSHIFT          [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! RSHIFT          [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! LE              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! GE              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! EE              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! NE              [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! PLUSEQ          [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! MINUSEQ         [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! TIMESEQ         [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! DIVIDEEQ        [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! MODEQ           [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! ANDEQ           [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! OREQ            [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! XOREQ           [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! LSHIFTEQ        [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! RSHIFTEQ        [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]
  ! {               [ reduce using rule 192 (complicated-expression -> ID binary-operator ID .) ]

    binary-operator                shift and go to state 282
    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 378

    (200) complicated-expression -> ID binary-operator complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    =               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    }               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    ,               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    ]               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    )               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    {               reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! .               [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! LS              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! GR              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! TIMES           [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! PLUS            [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! MINUS           [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! MOD             [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! AND             [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! OR              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! XOR             [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! LE              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! GE              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! EE              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! NE              [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! PLUSEQ          [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! MINUSEQ         [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! TIMESEQ         [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! DIVIDEEQ        [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! MODEQ           [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! ANDEQ           [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! OREQ            [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! XOREQ           [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! LSHIFTEQ        [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]
  ! RSHIFTEQ        [ reduce using rule 200 (complicated-expression -> ID binary-operator complicated-expression .) ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 379

    (193) complicated-expression -> ID TIMES ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 193 (complicated-expression -> ID TIMES ID .)
    =               reduce using rule 193 (complicated-expression -> ID TIMES ID .)
    }               reduce using rule 193 (complicated-expression -> ID TIMES ID .)
    ,               reduce using rule 193 (complicated-expression -> ID TIMES ID .)
    ]               reduce using rule 193 (complicated-expression -> ID TIMES ID .)
    )               reduce using rule 193 (complicated-expression -> ID TIMES ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! .               [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! LS              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! GR              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! TIMES           [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! PLUS            [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! MINUS           [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! DIVIDE          [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! MOD             [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! AND             [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! OR              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! XOR             [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! LSHIFT          [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! RSHIFT          [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! LE              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! GE              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! EE              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! NE              [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! PLUSEQ          [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! MINUSEQ         [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! TIMESEQ         [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! DIVIDEEQ        [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! MODEQ           [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! ANDEQ           [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! OREQ            [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! XOREQ           [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! LSHIFTEQ        [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! RSHIFTEQ        [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]
  ! {               [ reduce using rule 193 (complicated-expression -> ID TIMES ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 380

    (79) complicated-pointer-level -> TIMES TIMES .
    (164) complicated-expression -> TIMES . ID
    (165) complicated-expression -> TIMES . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    TIMES           reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    {               reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    ID              reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    )               reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    GR              reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    ,               reduce using rule 79 (complicated-pointer-level -> TIMES TIMES .)
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

  ! ID              [ shift and go to state 300 ]
  ! TIMES           [ shift and go to state 177 ]

    complicated-expression         shift and go to state 301
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 381

    (203) complicated-expression -> ID TIMES complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    [               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    LS              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    GR              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    TIMES           reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    =               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    PLUS            reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    MINUS           reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    DIVIDE          reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    MOD             reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    AND             reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    OR              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    XOR             reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    LSHIFT          reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    RSHIFT          reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    LE              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    GE              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    EE              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    NE              reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    PLUSEQ          reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    MINUSEQ         reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    TIMESEQ         reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    DIVIDEEQ        reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    MODEQ           reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    ANDEQ           reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    OREQ            reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    XOREQ           reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    LSHIFTEQ        reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    RSHIFTEQ        reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    }               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    ,               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    ]               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    )               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    {               reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 203 (complicated-expression -> ID TIMES complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 382

    (194) complicated-expression -> ID LS ID .
    (81) template-declaration -> LS ID . GR
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (85) template-declaration-body -> ID . , ID
    (87) template-declaration-body -> ID . , complicated-type
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 194 (complicated-expression -> ID LS ID .)
    =               reduce using rule 194 (complicated-expression -> ID LS ID .)
    }               reduce using rule 194 (complicated-expression -> ID LS ID .)
    ]               reduce using rule 194 (complicated-expression -> ID LS ID .)
    )               reduce using rule 194 (complicated-expression -> ID LS ID .)
    GR              shift and go to state 452
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    ,               shift and go to state 127
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! .               [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! LS              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! GR              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! TIMES           [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! PLUS            [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! MINUS           [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! DIVIDE          [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! MOD             [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! AND             [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! OR              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! XOR             [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! LSHIFT          [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! RSHIFT          [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! LE              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! GE              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! EE              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! NE              [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! PLUSEQ          [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! MINUSEQ         [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! TIMESEQ         [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! DIVIDEEQ        [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! MODEQ           [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! ANDEQ           [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! OREQ            [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! XOREQ           [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! LSHIFTEQ        [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! RSHIFTEQ        [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! ,               [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]
  ! {               [ reduce using rule 194 (complicated-expression -> ID LS ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 383

    (201) complicated-expression -> ID LS complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    [               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    LS              reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    GR              reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    =               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    LE              reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    GE              reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    EE              reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    NE              reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    PLUSEQ          reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    MINUSEQ         reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    TIMESEQ         reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    DIVIDEEQ        reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    MODEQ           reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    ANDEQ           reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    OREQ            reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    XOREQ           reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    LSHIFTEQ        reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    RSHIFTEQ        reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    }               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    ,               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    ]               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    )               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    {               reduce using rule 201 (complicated-expression -> ID LS complicated-expression .)
    .               shift and go to state 257
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70

  ! .               [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! TIMES           [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! PLUS            [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! MINUS           [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! MOD             [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! AND             [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! OR              [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! XOR             [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 201 (complicated-expression -> ID LS complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 384

    (82) template-declaration -> LS complicated-type . GR
    (143) complicated-expression -> complicated-type . { invoke-arguments-list }
    (146) complicated-expression -> complicated-type . { ID }
    (147) complicated-expression -> complicated-type . { complicated-expression }
    (149) complicated-expression -> complicated-type . { }
    (86) template-declaration-body -> complicated-type . , ID
    (88) template-declaration-body -> complicated-type . , complicated-type

    GR              shift and go to state 128
    {               shift and go to state 298
    ,               shift and go to state 129


state 385

    (195) complicated-expression -> ID GR ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 195 (complicated-expression -> ID GR ID .)
    =               reduce using rule 195 (complicated-expression -> ID GR ID .)
    }               reduce using rule 195 (complicated-expression -> ID GR ID .)
    ,               reduce using rule 195 (complicated-expression -> ID GR ID .)
    ]               reduce using rule 195 (complicated-expression -> ID GR ID .)
    )               reduce using rule 195 (complicated-expression -> ID GR ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! .               [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! LS              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! GR              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! TIMES           [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! PLUS            [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! MINUS           [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! DIVIDE          [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! MOD             [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! AND             [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! OR              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! XOR             [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! LSHIFT          [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! RSHIFT          [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! LE              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! GE              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! EE              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! NE              [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! PLUSEQ          [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! MINUSEQ         [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! TIMESEQ         [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! DIVIDEEQ        [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! MODEQ           [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! ANDEQ           [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! OREQ            [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! XOREQ           [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! LSHIFTEQ        [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! RSHIFTEQ        [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]
  ! {               [ reduce using rule 195 (complicated-expression -> ID GR ID .) ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 386

    (202) complicated-expression -> ID GR complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    [               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    LS              reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    GR              reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    =               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    LE              reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    GE              reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    EE              reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    NE              reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    PLUSEQ          reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    MINUSEQ         reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    TIMESEQ         reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    DIVIDEEQ        reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    MODEQ           reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    ANDEQ           reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    OREQ            reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    XOREQ           reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    LSHIFTEQ        reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    RSHIFTEQ        reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    }               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    ,               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    ]               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    )               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    {               reduce using rule 202 (complicated-expression -> ID GR complicated-expression .)
    .               shift and go to state 257
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70

  ! .               [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! TIMES           [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! PLUS            [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! MINUS           [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! MOD             [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! AND             [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! OR              [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! XOR             [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 202 (complicated-expression -> ID GR complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 387

    (229) complicated-expression -> ID sub-equal-operator ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .)
    =               reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .)
    }               reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .)
    ,               reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .)
    ]               reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .)
    )               reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! .               [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! LS              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! GR              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! TIMES           [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! PLUS            [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! MINUS           [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! DIVIDE          [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! MOD             [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! AND             [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! OR              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! XOR             [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! LSHIFT          [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! RSHIFT          [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! LE              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! GE              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! EE              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! NE              [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! PLUSEQ          [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! MINUSEQ         [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! TIMESEQ         [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! DIVIDEEQ        [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! MODEQ           [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! ANDEQ           [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! OREQ            [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! XOREQ           [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! LSHIFTEQ        [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! RSHIFTEQ        [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]
  ! {               [ reduce using rule 229 (complicated-expression -> ID sub-equal-operator ID .) ]

    sub-equal-operator             shift and go to state 286
    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    complicated-pointer-level      shift and go to state 36

state 388

    (231) complicated-expression -> ID sub-equal-operator complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for LS resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSEQ resolved as shift
  ! shift/reduce conflict for MINUSEQ resolved as shift
  ! shift/reduce conflict for TIMESEQ resolved as shift
  ! shift/reduce conflict for DIVIDEEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
  ! shift/reduce conflict for ANDEQ resolved as shift
  ! shift/reduce conflict for OREQ resolved as shift
  ! shift/reduce conflict for XOREQ resolved as shift
  ! shift/reduce conflict for LSHIFTEQ resolved as shift
  ! shift/reduce conflict for RSHIFTEQ resolved as shift
    ;               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    =               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    }               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    ,               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    ]               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    )               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    {               reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

  ! [               [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! .               [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! LS              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! GR              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! TIMES           [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! PLUS            [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! MINUS           [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! DIVIDE          [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! MOD             [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! AND             [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! OR              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! XOR             [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! LSHIFT          [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! RSHIFT          [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! LE              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! GE              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! EE              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! NE              [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! PLUSEQ          [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! MINUSEQ         [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! TIMESEQ         [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! DIVIDEEQ        [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! MODEQ           [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! ANDEQ           [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! OREQ            [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! XOREQ           [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! LSHIFTEQ        [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]
  ! RSHIFTEQ        [ reduce using rule 231 (complicated-expression -> ID sub-equal-operator complicated-expression .) ]

    sub-equal-operator             shift and go to state 262
    binary-operator                shift and go to state 258

state 389

    (154) set-statement -> ID = ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 453
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 390

    (156) set-statement -> ID = complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 454
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 391

    (182) invoke-arguments -> ( ) .

    ;               reduce using rule 182 (invoke-arguments -> ( ) .)
    [               reduce using rule 182 (invoke-arguments -> ( ) .)
    .               reduce using rule 182 (invoke-arguments -> ( ) .)
    LS              reduce using rule 182 (invoke-arguments -> ( ) .)
    GR              reduce using rule 182 (invoke-arguments -> ( ) .)
    TIMES           reduce using rule 182 (invoke-arguments -> ( ) .)
    =               reduce using rule 182 (invoke-arguments -> ( ) .)
    PLUS            reduce using rule 182 (invoke-arguments -> ( ) .)
    MINUS           reduce using rule 182 (invoke-arguments -> ( ) .)
    DIVIDE          reduce using rule 182 (invoke-arguments -> ( ) .)
    MOD             reduce using rule 182 (invoke-arguments -> ( ) .)
    AND             reduce using rule 182 (invoke-arguments -> ( ) .)
    OR              reduce using rule 182 (invoke-arguments -> ( ) .)
    XOR             reduce using rule 182 (invoke-arguments -> ( ) .)
    LSHIFT          reduce using rule 182 (invoke-arguments -> ( ) .)
    RSHIFT          reduce using rule 182 (invoke-arguments -> ( ) .)
    LE              reduce using rule 182 (invoke-arguments -> ( ) .)
    GE              reduce using rule 182 (invoke-arguments -> ( ) .)
    EE              reduce using rule 182 (invoke-arguments -> ( ) .)
    NE              reduce using rule 182 (invoke-arguments -> ( ) .)
    PLUSEQ          reduce using rule 182 (invoke-arguments -> ( ) .)
    MINUSEQ         reduce using rule 182 (invoke-arguments -> ( ) .)
    TIMESEQ         reduce using rule 182 (invoke-arguments -> ( ) .)
    DIVIDEEQ        reduce using rule 182 (invoke-arguments -> ( ) .)
    MODEQ           reduce using rule 182 (invoke-arguments -> ( ) .)
    ANDEQ           reduce using rule 182 (invoke-arguments -> ( ) .)
    OREQ            reduce using rule 182 (invoke-arguments -> ( ) .)
    XOREQ           reduce using rule 182 (invoke-arguments -> ( ) .)
    LSHIFTEQ        reduce using rule 182 (invoke-arguments -> ( ) .)
    RSHIFTEQ        reduce using rule 182 (invoke-arguments -> ( ) .)
    }               reduce using rule 182 (invoke-arguments -> ( ) .)
    ,               reduce using rule 182 (invoke-arguments -> ( ) .)
    ]               reduce using rule 182 (invoke-arguments -> ( ) .)
    )               reduce using rule 182 (invoke-arguments -> ( ) .)
    {               reduce using rule 182 (invoke-arguments -> ( ) .)


state 392

    (183) invoke-arguments -> ( ID . )
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (188) invoke-arguments-list -> ID . , ID
    (190) invoke-arguments-list -> ID . , complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    )               shift and go to state 455
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    ,               shift and go to state 396
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 393

    (184) invoke-arguments -> ( complicated-expression . )
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (189) invoke-arguments-list -> complicated-expression . , ID
    (191) invoke-arguments-list -> complicated-expression . , complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    )               shift and go to state 456
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    ,               shift and go to state 398
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 394

    (185) invoke-arguments -> ( invoke-arguments-list . )
    (186) invoke-arguments-list -> invoke-arguments-list . , ID
    (187) invoke-arguments-list -> invoke-arguments-list . , complicated-expression

    )               shift and go to state 457
    ,               shift and go to state 400


state 395

    (139) complicated-expression -> [ ID ] .

    ;               reduce using rule 139 (complicated-expression -> [ ID ] .)
    [               reduce using rule 139 (complicated-expression -> [ ID ] .)
    .               reduce using rule 139 (complicated-expression -> [ ID ] .)
    LS              reduce using rule 139 (complicated-expression -> [ ID ] .)
    GR              reduce using rule 139 (complicated-expression -> [ ID ] .)
    TIMES           reduce using rule 139 (complicated-expression -> [ ID ] .)
    =               reduce using rule 139 (complicated-expression -> [ ID ] .)
    PLUS            reduce using rule 139 (complicated-expression -> [ ID ] .)
    MINUS           reduce using rule 139 (complicated-expression -> [ ID ] .)
    DIVIDE          reduce using rule 139 (complicated-expression -> [ ID ] .)
    MOD             reduce using rule 139 (complicated-expression -> [ ID ] .)
    AND             reduce using rule 139 (complicated-expression -> [ ID ] .)
    OR              reduce using rule 139 (complicated-expression -> [ ID ] .)
    XOR             reduce using rule 139 (complicated-expression -> [ ID ] .)
    LSHIFT          reduce using rule 139 (complicated-expression -> [ ID ] .)
    RSHIFT          reduce using rule 139 (complicated-expression -> [ ID ] .)
    LE              reduce using rule 139 (complicated-expression -> [ ID ] .)
    GE              reduce using rule 139 (complicated-expression -> [ ID ] .)
    EE              reduce using rule 139 (complicated-expression -> [ ID ] .)
    NE              reduce using rule 139 (complicated-expression -> [ ID ] .)
    PLUSEQ          reduce using rule 139 (complicated-expression -> [ ID ] .)
    MINUSEQ         reduce using rule 139 (complicated-expression -> [ ID ] .)
    TIMESEQ         reduce using rule 139 (complicated-expression -> [ ID ] .)
    DIVIDEEQ        reduce using rule 139 (complicated-expression -> [ ID ] .)
    MODEQ           reduce using rule 139 (complicated-expression -> [ ID ] .)
    ANDEQ           reduce using rule 139 (complicated-expression -> [ ID ] .)
    OREQ            reduce using rule 139 (complicated-expression -> [ ID ] .)
    XOREQ           reduce using rule 139 (complicated-expression -> [ ID ] .)
    LSHIFTEQ        reduce using rule 139 (complicated-expression -> [ ID ] .)
    RSHIFTEQ        reduce using rule 139 (complicated-expression -> [ ID ] .)
    }               reduce using rule 139 (complicated-expression -> [ ID ] .)
    ,               reduce using rule 139 (complicated-expression -> [ ID ] .)
    ]               reduce using rule 139 (complicated-expression -> [ ID ] .)
    )               reduce using rule 139 (complicated-expression -> [ ID ] .)
    {               reduce using rule 139 (complicated-expression -> [ ID ] .)


state 396

    (188) invoke-arguments-list -> ID , . ID
    (190) invoke-arguments-list -> ID , . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 458
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 459
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 397

    (140) complicated-expression -> [ complicated-expression ] .

    ;               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    [               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    .               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    LS              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    GR              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    TIMES           reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    =               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    PLUS            reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    MINUS           reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    DIVIDE          reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    MOD             reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    AND             reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    OR              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    XOR             reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    LSHIFT          reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    RSHIFT          reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    LE              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    GE              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    EE              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    NE              reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    PLUSEQ          reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    MINUSEQ         reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    TIMESEQ         reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    DIVIDEEQ        reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    MODEQ           reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    ANDEQ           reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    OREQ            reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    XOREQ           reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    LSHIFTEQ        reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    RSHIFTEQ        reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    }               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    ,               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    ]               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    )               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)
    {               reduce using rule 140 (complicated-expression -> [ complicated-expression ] .)


state 398

    (189) invoke-arguments-list -> complicated-expression , . ID
    (191) invoke-arguments-list -> complicated-expression , . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 461
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 460
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 399

    (141) complicated-expression -> [ invoke-arguments-list ] .

    ;               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    [               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    .               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    LS              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    GR              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    TIMES           reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    =               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    PLUS            reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    MINUS           reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    DIVIDE          reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    MOD             reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    AND             reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    OR              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    XOR             reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    LSHIFT          reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    RSHIFT          reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    LE              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    GE              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    EE              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    NE              reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    PLUSEQ          reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    MINUSEQ         reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    TIMESEQ         reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    DIVIDEEQ        reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    MODEQ           reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    ANDEQ           reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    OREQ            reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    XOREQ           reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    LSHIFTEQ        reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    RSHIFTEQ        reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    }               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    ,               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    ]               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    )               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)
    {               reduce using rule 141 (complicated-expression -> [ invoke-arguments-list ] .)


state 400

    (186) invoke-arguments-list -> invoke-arguments-list , . ID
    (187) invoke-arguments-list -> invoke-arguments-list , . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 462
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 463
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 401

    (143) complicated-expression -> complicated-type { invoke-arguments-list . }
    (186) invoke-arguments-list -> invoke-arguments-list . , ID
    (187) invoke-arguments-list -> invoke-arguments-list . , complicated-expression

    }               shift and go to state 464
    ,               shift and go to state 400


state 402

    (149) complicated-expression -> complicated-type { } .

    ;               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    [               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    .               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    LS              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    GR              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    TIMES           reduce using rule 149 (complicated-expression -> complicated-type { } .)
    =               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    PLUS            reduce using rule 149 (complicated-expression -> complicated-type { } .)
    MINUS           reduce using rule 149 (complicated-expression -> complicated-type { } .)
    DIVIDE          reduce using rule 149 (complicated-expression -> complicated-type { } .)
    MOD             reduce using rule 149 (complicated-expression -> complicated-type { } .)
    AND             reduce using rule 149 (complicated-expression -> complicated-type { } .)
    OR              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    XOR             reduce using rule 149 (complicated-expression -> complicated-type { } .)
    LSHIFT          reduce using rule 149 (complicated-expression -> complicated-type { } .)
    RSHIFT          reduce using rule 149 (complicated-expression -> complicated-type { } .)
    LE              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    GE              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    EE              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    NE              reduce using rule 149 (complicated-expression -> complicated-type { } .)
    PLUSEQ          reduce using rule 149 (complicated-expression -> complicated-type { } .)
    MINUSEQ         reduce using rule 149 (complicated-expression -> complicated-type { } .)
    TIMESEQ         reduce using rule 149 (complicated-expression -> complicated-type { } .)
    DIVIDEEQ        reduce using rule 149 (complicated-expression -> complicated-type { } .)
    MODEQ           reduce using rule 149 (complicated-expression -> complicated-type { } .)
    ANDEQ           reduce using rule 149 (complicated-expression -> complicated-type { } .)
    OREQ            reduce using rule 149 (complicated-expression -> complicated-type { } .)
    XOREQ           reduce using rule 149 (complicated-expression -> complicated-type { } .)
    LSHIFTEQ        reduce using rule 149 (complicated-expression -> complicated-type { } .)
    RSHIFTEQ        reduce using rule 149 (complicated-expression -> complicated-type { } .)
    }               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    ,               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    ]               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    )               reduce using rule 149 (complicated-expression -> complicated-type { } .)
    {               reduce using rule 149 (complicated-expression -> complicated-type { } .)


state 403

    (146) complicated-expression -> complicated-type { ID . }
    (188) invoke-arguments-list -> ID . , ID
    (190) invoke-arguments-list -> ID . , complicated-expression
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    }               shift and go to state 465
    ,               shift and go to state 396
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 404

    (147) complicated-expression -> complicated-type { complicated-expression . }
    (189) invoke-arguments-list -> complicated-expression . , ID
    (191) invoke-arguments-list -> complicated-expression . , complicated-expression
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    }               shift and go to state 466
    ,               shift and go to state 398
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 405

    (121) variable-declaration -> complicated-type ID ; .

    }               reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    ID              reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    UNSAFE          reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    [               reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    TIMES           reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    AND             reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    SIZEOF          reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    MINUS           reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    !               reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    (               reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    RETURN          reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    VAR             reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    IF              reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    WHILE           reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    CONST           reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    INT             reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    FLOAT           reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    STR             reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    BOOL            reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    CHAR            reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    {               reduce using rule 121 (variable-declaration -> complicated-type ID ; .)
    :               reduce using rule 121 (variable-declaration -> complicated-type ID ; .)


state 406

    (123) variable-declaration -> complicated-type ID = . ID ;
    (125) variable-declaration -> complicated-type ID = . complicated-expression ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 467
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-type               shift and go to state 293
    complicated-expression         shift and go to state 468
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 407

    (170) complicated-expression -> SIZEOF ( ID . )
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    )               shift and go to state 469
    :               shift and go to state 35
    TIMES           shift and go to state 33
    LS              shift and go to state 34

    complicated-pointer-level      shift and go to state 36
    template-declaration           shift and go to state 31

state 408

    (171) complicated-expression -> SIZEOF ( complicated-type . )

    )               shift and go to state 470


state 409

    (213) complicated-expression -> ( ID ) .
    (215) complicated-expression -> ( ID ) . ID
    (216) complicated-expression -> ( ID ) . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    ;               reduce using rule 213 (complicated-expression -> ( ID ) .)
    .               reduce using rule 213 (complicated-expression -> ( ID ) .)
    LS              reduce using rule 213 (complicated-expression -> ( ID ) .)
    GR              reduce using rule 213 (complicated-expression -> ( ID ) .)
    =               reduce using rule 213 (complicated-expression -> ( ID ) .)
    PLUS            reduce using rule 213 (complicated-expression -> ( ID ) .)
    DIVIDE          reduce using rule 213 (complicated-expression -> ( ID ) .)
    MOD             reduce using rule 213 (complicated-expression -> ( ID ) .)
    OR              reduce using rule 213 (complicated-expression -> ( ID ) .)
    XOR             reduce using rule 213 (complicated-expression -> ( ID ) .)
    LSHIFT          reduce using rule 213 (complicated-expression -> ( ID ) .)
    RSHIFT          reduce using rule 213 (complicated-expression -> ( ID ) .)
    LE              reduce using rule 213 (complicated-expression -> ( ID ) .)
    GE              reduce using rule 213 (complicated-expression -> ( ID ) .)
    EE              reduce using rule 213 (complicated-expression -> ( ID ) .)
    NE              reduce using rule 213 (complicated-expression -> ( ID ) .)
    PLUSEQ          reduce using rule 213 (complicated-expression -> ( ID ) .)
    MINUSEQ         reduce using rule 213 (complicated-expression -> ( ID ) .)
    TIMESEQ         reduce using rule 213 (complicated-expression -> ( ID ) .)
    DIVIDEEQ        reduce using rule 213 (complicated-expression -> ( ID ) .)
    MODEQ           reduce using rule 213 (complicated-expression -> ( ID ) .)
    ANDEQ           reduce using rule 213 (complicated-expression -> ( ID ) .)
    OREQ            reduce using rule 213 (complicated-expression -> ( ID ) .)
    XOREQ           reduce using rule 213 (complicated-expression -> ( ID ) .)
    LSHIFTEQ        reduce using rule 213 (complicated-expression -> ( ID ) .)
    RSHIFTEQ        reduce using rule 213 (complicated-expression -> ( ID ) .)
    }               reduce using rule 213 (complicated-expression -> ( ID ) .)
    ,               reduce using rule 213 (complicated-expression -> ( ID ) .)
    ]               reduce using rule 213 (complicated-expression -> ( ID ) .)
    )               reduce using rule 213 (complicated-expression -> ( ID ) .)
    {               reduce using rule 213 (complicated-expression -> ( ID ) .)
    ID              shift and go to state 471
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

  ! [               [ reduce using rule 213 (complicated-expression -> ( ID ) .) ]
  ! TIMES           [ reduce using rule 213 (complicated-expression -> ( ID ) .) ]
  ! MINUS           [ reduce using rule 213 (complicated-expression -> ( ID ) .) ]
  ! AND             [ reduce using rule 213 (complicated-expression -> ( ID ) .) ]

    complicated-expression         shift and go to state 472
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 410

    (214) complicated-expression -> ( complicated-expression ) .

    ;               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    [               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    .               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    LS              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    GR              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    TIMES           reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    =               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    PLUS            reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    MINUS           reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    DIVIDE          reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    MOD             reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    AND             reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    OR              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    XOR             reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    LSHIFT          reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    RSHIFT          reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    LE              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    GE              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    EE              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    NE              reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    PLUSEQ          reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    MINUSEQ         reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    TIMESEQ         reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    DIVIDEEQ        reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    MODEQ           reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    ANDEQ           reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    OREQ            reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    XOREQ           reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    LSHIFTEQ        reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    RSHIFTEQ        reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    }               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    ,               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    ]               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    )               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)
    {               reduce using rule 214 (complicated-expression -> ( complicated-expression ) .)


state 411

    (217) complicated-expression -> ( complicated-type ) . ID
    (218) complicated-expression -> ( complicated-type ) . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 473
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-type               shift and go to state 293
    complicated-expression         shift and go to state 474
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 412

    (174) complicated-expression -> package-complicated-name : ID . invoke-arguments
    (177) complicated-expression -> package-complicated-name : ID . template-declaration invoke-arguments
    (60) complicated-type -> package-complicated-name : ID .
    (61) complicated-type -> package-complicated-name : ID . TIMES
    (62) complicated-type -> package-complicated-name : ID . complicated-pointer-level
    (66) complicated-type -> package-complicated-name : ID . template-declaration
    (67) complicated-type -> package-complicated-name : ID . template-declaration TIMES
    (68) complicated-type -> package-complicated-name : ID . template-declaration complicated-pointer-level
    (4) package-complicated-name -> package-complicated-name : ID .
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    {               reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    ID              reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    )               reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    GR              reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    ,               reduce using rule 60 (complicated-type -> package-complicated-name : ID .)
    TIMES           shift and go to state 160
    :               reduce using rule 4 (package-complicated-name -> package-complicated-name : ID .)
    (               shift and go to state 288
    LS              shift and go to state 34

    invoke-arguments               shift and go to state 475
    template-declaration           shift and go to state 476
    complicated-pointer-level      shift and go to state 161

state 413

    (118) return-statement -> RETURN complicated-expression ; .

    }               reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    ID              reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    UNSAFE          reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    [               reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    TIMES           reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    AND             reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    SIZEOF          reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    MINUS           reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    !               reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    (               reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    RETURN          reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    VAR             reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    IF              reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    WHILE           reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    CONST           reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    INT             reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    FLOAT           reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    STR             reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    BOOL            reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    CHAR            reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    {               reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)
    :               reduce using rule 118 (return-statement -> RETURN complicated-expression ; .)


state 414

    (119) return-statement -> RETURN ID ; .

    }               reduce using rule 119 (return-statement -> RETURN ID ; .)
    ID              reduce using rule 119 (return-statement -> RETURN ID ; .)
    UNSAFE          reduce using rule 119 (return-statement -> RETURN ID ; .)
    [               reduce using rule 119 (return-statement -> RETURN ID ; .)
    TIMES           reduce using rule 119 (return-statement -> RETURN ID ; .)
    AND             reduce using rule 119 (return-statement -> RETURN ID ; .)
    SIZEOF          reduce using rule 119 (return-statement -> RETURN ID ; .)
    MINUS           reduce using rule 119 (return-statement -> RETURN ID ; .)
    !               reduce using rule 119 (return-statement -> RETURN ID ; .)
    (               reduce using rule 119 (return-statement -> RETURN ID ; .)
    RETURN          reduce using rule 119 (return-statement -> RETURN ID ; .)
    VAR             reduce using rule 119 (return-statement -> RETURN ID ; .)
    IF              reduce using rule 119 (return-statement -> RETURN ID ; .)
    WHILE           reduce using rule 119 (return-statement -> RETURN ID ; .)
    CONST           reduce using rule 119 (return-statement -> RETURN ID ; .)
    INT             reduce using rule 119 (return-statement -> RETURN ID ; .)
    FLOAT           reduce using rule 119 (return-statement -> RETURN ID ; .)
    STR             reduce using rule 119 (return-statement -> RETURN ID ; .)
    BOOL            reduce using rule 119 (return-statement -> RETURN ID ; .)
    CHAR            reduce using rule 119 (return-statement -> RETURN ID ; .)
    {               reduce using rule 119 (return-statement -> RETURN ID ; .)
    :               reduce using rule 119 (return-statement -> RETURN ID ; .)


state 415

    (126) variable-declaration -> VAR ID = . ID ;
    (127) variable-declaration -> VAR ID = . complicated-expression ;
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    ID              shift and go to state 477
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

    complicated-expression         shift and go to state 478
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 416

    (128) if-statement -> IF complicated-expression visibility-area .
    (129) if-statement -> IF complicated-expression visibility-area . ELSE visibility-area
    (130) if-statement -> IF complicated-expression visibility-area . ELSE if-statement

    }               reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    ID              reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    UNSAFE          reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    [               reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    TIMES           reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    AND             reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    SIZEOF          reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    MINUS           reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    !               reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    (               reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    RETURN          reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    VAR             reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    IF              reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    WHILE           reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    CONST           reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    INT             reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    FLOAT           reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    STR             reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    BOOL            reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    CHAR            reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    {               reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    :               reduce using rule 128 (if-statement -> IF complicated-expression visibility-area .)
    ELSE            shift and go to state 479


state 417

    (131) if-statement -> IF ID visibility-area .
    (132) if-statement -> IF ID visibility-area . ELSE visibility-area
    (133) if-statement -> IF ID visibility-area . ELSE if-statement

    }               reduce using rule 131 (if-statement -> IF ID visibility-area .)
    ID              reduce using rule 131 (if-statement -> IF ID visibility-area .)
    UNSAFE          reduce using rule 131 (if-statement -> IF ID visibility-area .)
    [               reduce using rule 131 (if-statement -> IF ID visibility-area .)
    TIMES           reduce using rule 131 (if-statement -> IF ID visibility-area .)
    AND             reduce using rule 131 (if-statement -> IF ID visibility-area .)
    SIZEOF          reduce using rule 131 (if-statement -> IF ID visibility-area .)
    MINUS           reduce using rule 131 (if-statement -> IF ID visibility-area .)
    !               reduce using rule 131 (if-statement -> IF ID visibility-area .)
    (               reduce using rule 131 (if-statement -> IF ID visibility-area .)
    RETURN          reduce using rule 131 (if-statement -> IF ID visibility-area .)
    VAR             reduce using rule 131 (if-statement -> IF ID visibility-area .)
    IF              reduce using rule 131 (if-statement -> IF ID visibility-area .)
    WHILE           reduce using rule 131 (if-statement -> IF ID visibility-area .)
    CONST           reduce using rule 131 (if-statement -> IF ID visibility-area .)
    INT             reduce using rule 131 (if-statement -> IF ID visibility-area .)
    FLOAT           reduce using rule 131 (if-statement -> IF ID visibility-area .)
    STR             reduce using rule 131 (if-statement -> IF ID visibility-area .)
    BOOL            reduce using rule 131 (if-statement -> IF ID visibility-area .)
    CHAR            reduce using rule 131 (if-statement -> IF ID visibility-area .)
    {               reduce using rule 131 (if-statement -> IF ID visibility-area .)
    :               reduce using rule 131 (if-statement -> IF ID visibility-area .)
    ELSE            shift and go to state 480


state 418

    (142) complicated-expression -> ID { . invoke-arguments-list }
    (144) complicated-expression -> ID { . ID }
    (145) complicated-expression -> ID { . complicated-expression }
    (148) complicated-expression -> ID { . }
    (95) function-body -> { . expression-lines }
    (186) invoke-arguments-list -> . invoke-arguments-list , ID
    (187) invoke-arguments-list -> . invoke-arguments-list , complicated-expression
    (188) invoke-arguments-list -> . ID , ID
    (189) invoke-arguments-list -> . complicated-expression , ID
    (190) invoke-arguments-list -> . ID , complicated-expression
    (191) invoke-arguments-list -> . complicated-expression , complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (106) expression-lines -> . expression-lines expression-line
    (107) expression-lines -> . expression-line
    (108) expression-lines -> .
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR
    (109) expression-line -> . complicated-expression ;
    (110) expression-line -> . return-statement
    (111) expression-line -> . variable-declaration
    (112) expression-line -> . if-statement
    (113) expression-line -> . while-statement
    (114) expression-line -> . unsafe-area
    (115) expression-line -> . visibility-area
    (116) expression-line -> . set-statement
    (117) expression-line -> . ID ;
    (118) return-statement -> . RETURN complicated-expression ;
    (119) return-statement -> . RETURN ID ;
    (120) variable-declaration -> . ID ID ;
    (121) variable-declaration -> . complicated-type ID ;
    (122) variable-declaration -> . ID ID = ID ;
    (123) variable-declaration -> . complicated-type ID = ID ;
    (124) variable-declaration -> . ID ID = complicated-expression ;
    (125) variable-declaration -> . complicated-type ID = complicated-expression ;
    (126) variable-declaration -> . VAR ID = ID ;
    (127) variable-declaration -> . VAR ID = complicated-expression ;
    (128) if-statement -> . IF complicated-expression visibility-area
    (129) if-statement -> . IF complicated-expression visibility-area ELSE visibility-area
    (130) if-statement -> . IF complicated-expression visibility-area ELSE if-statement
    (131) if-statement -> . IF ID visibility-area
    (132) if-statement -> . IF ID visibility-area ELSE visibility-area
    (133) if-statement -> . IF ID visibility-area ELSE if-statement
    (134) while-statement -> . WHILE complicated-expression visibility-area
    (135) while-statement -> . WHILE ID visibility-area
    (136) unsafe-area -> . UNSAFE visibility-area
    (158) visibility-area -> . function-body
    (154) set-statement -> . ID = ID ;
    (155) set-statement -> . complicated-expression = ID ;
    (156) set-statement -> . ID = complicated-expression ;
    (157) set-statement -> . complicated-expression = complicated-expression ;
    (95) function-body -> . { expression-lines }

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNSAFE resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! reduce/reduce conflict for : resolved using rule 6 (package-complicated-name -> .)
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for { resolved as shift
    ID              shift and go to state 481
    }               shift and go to state 370
    UNSAFE          shift and go to state 174
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    (               shift and go to state 180
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194
    RETURN          shift and go to state 185
    VAR             shift and go to state 186
    IF              shift and go to state 187
    WHILE           shift and go to state 188
    {               shift and go to state 103

  ! }               [ reduce using rule 108 (expression-lines -> .) ]
  ! ID              [ reduce using rule 108 (expression-lines -> .) ]
  ! UNSAFE          [ reduce using rule 108 (expression-lines -> .) ]
  ! [               [ reduce using rule 108 (expression-lines -> .) ]
  ! TIMES           [ reduce using rule 108 (expression-lines -> .) ]
  ! AND             [ reduce using rule 108 (expression-lines -> .) ]
  ! SIZEOF          [ reduce using rule 108 (expression-lines -> .) ]
  ! MINUS           [ reduce using rule 108 (expression-lines -> .) ]
  ! !               [ reduce using rule 108 (expression-lines -> .) ]
  ! (               [ reduce using rule 108 (expression-lines -> .) ]
  ! RETURN          [ reduce using rule 108 (expression-lines -> .) ]
  ! VAR             [ reduce using rule 108 (expression-lines -> .) ]
  ! IF              [ reduce using rule 108 (expression-lines -> .) ]
  ! WHILE           [ reduce using rule 108 (expression-lines -> .) ]
  ! CONST           [ reduce using rule 108 (expression-lines -> .) ]
  ! INT             [ reduce using rule 108 (expression-lines -> .) ]
  ! FLOAT           [ reduce using rule 108 (expression-lines -> .) ]
  ! STR             [ reduce using rule 108 (expression-lines -> .) ]
  ! BOOL            [ reduce using rule 108 (expression-lines -> .) ]
  ! CHAR            [ reduce using rule 108 (expression-lines -> .) ]
  ! {               [ reduce using rule 108 (expression-lines -> .) ]
  ! :               [ reduce using rule 108 (expression-lines -> .) ]

    invoke-arguments-list          shift and go to state 369
    complicated-expression         shift and go to state 482
    expression-lines               shift and go to state 163
    complicated-type               shift and go to state 176
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184
    expression-line                shift and go to state 164
    return-statement               shift and go to state 166
    variable-declaration           shift and go to state 167
    if-statement                   shift and go to state 168
    while-statement                shift and go to state 169
    unsafe-area                    shift and go to state 170
    visibility-area                shift and go to state 171
    set-statement                  shift and go to state 172
    function-body                  shift and go to state 189

state 419

    (134) while-statement -> WHILE complicated-expression visibility-area .

    }               reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    ID              reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    UNSAFE          reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    [               reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    TIMES           reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    AND             reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    SIZEOF          reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    MINUS           reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    !               reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    (               reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    RETURN          reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    VAR             reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    IF              reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    WHILE           reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    CONST           reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    INT             reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    FLOAT           reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    STR             reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    BOOL            reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    CHAR            reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    {               reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)
    :               reduce using rule 134 (while-statement -> WHILE complicated-expression visibility-area .)


state 420

    (135) while-statement -> WHILE ID visibility-area .

    }               reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    ID              reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    UNSAFE          reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    [               reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    TIMES           reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    AND             reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    SIZEOF          reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    MINUS           reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    !               reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    (               reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    RETURN          reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    VAR             reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    IF              reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    WHILE           reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    CONST           reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    INT             reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    FLOAT           reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    STR             reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    BOOL            reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    CHAR            reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    {               reduce using rule 135 (while-statement -> WHILE ID visibility-area .)
    :               reduce using rule 135 (while-statement -> WHILE ID visibility-area .)


state 421

    (38) main -> ID OPERATOR binary-operator ( ) function-arguments function-body .

    ID              reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    UNSAFE          reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    OPERATOR        reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    EXTERN          reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    STRUCT          reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    CONST           reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    :               reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)
    $end            reduce using rule 38 (main -> ID OPERATOR binary-operator ( ) function-arguments function-body .)


state 422

    (42) main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 483

state 423

    (39) main -> ID OPERATOR ! ( ) function-arguments function-body .

    ID              reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    UNSAFE          reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    OPERATOR        reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    EXTERN          reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    STRUCT          reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    CONST           reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    :               reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)
    $end            reduce using rule 39 (main -> ID OPERATOR ! ( ) function-arguments function-body .)


state 424

    (43) main -> ID OPERATOR ! ( ) template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 484

state 425

    (52) main -> ID OPERATOR [ ] template-declaration function-arguments function-body .

    ID              reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    CONST           reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    :               reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)
    $end            reduce using rule 52 (main -> ID OPERATOR [ ] template-declaration function-arguments function-body .)


state 426

    (40) main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .

    ID              reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    UNSAFE          reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    OPERATOR        reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    EXTERN          reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    STRUCT          reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    CONST           reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    :               reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)
    $end            reduce using rule 40 (main -> complicated-type OPERATOR binary-operator ( ) function-arguments function-body .)


state 427

    (44) main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 485

state 428

    (41) main -> complicated-type OPERATOR ! ( ) function-arguments function-body .

    ID              reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    UNSAFE          reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    OPERATOR        reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    EXTERN          reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    STRUCT          reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    CONST           reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    :               reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)
    $end            reduce using rule 41 (main -> complicated-type OPERATOR ! ( ) function-arguments function-body .)


state 429

    (45) main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments . function-body
    (95) function-body -> . { expression-lines }

    {               shift and go to state 103

    function-body                  shift and go to state 486

state 430

    (53) main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .

    ID              reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    CONST           reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    :               reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)
    $end            reduce using rule 53 (main -> complicated-type OPERATOR [ ] template-declaration function-arguments function-body .)


state 431

    (102) struct-field -> ID ID ; .

    }               reduce using rule 102 (struct-field -> ID ID ; .)
    ID              reduce using rule 102 (struct-field -> ID ID ; .)
    ACCMOD          reduce using rule 102 (struct-field -> ID ID ; .)
    CONST           reduce using rule 102 (struct-field -> ID ID ; .)
    :               reduce using rule 102 (struct-field -> ID ID ; .)


state 432

    (103) struct-field -> complicated-type ID ; .

    }               reduce using rule 103 (struct-field -> complicated-type ID ; .)
    ID              reduce using rule 103 (struct-field -> complicated-type ID ; .)
    ACCMOD          reduce using rule 103 (struct-field -> complicated-type ID ; .)
    CONST           reduce using rule 103 (struct-field -> complicated-type ID ; .)
    :               reduce using rule 103 (struct-field -> complicated-type ID ; .)


state 433

    (104) struct-field -> ACCMOD ID ID . ;

    ;               shift and go to state 487


state 434

    (105) struct-field -> ACCMOD complicated-type ID . ;

    ;               shift and go to state 488


state 435

    (153) complicated-expression -> complicated-expression [ complicated-expression ] .

    ;               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    [               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    .               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    LS              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    GR              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    TIMES           reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    =               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    PLUS            reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    MINUS           reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    DIVIDE          reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    MOD             reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    AND             reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    OR              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    XOR             reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    LSHIFT          reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    RSHIFT          reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    LE              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    GE              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    EE              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    NE              reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    PLUSEQ          reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    MINUSEQ         reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    TIMESEQ         reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    DIVIDEEQ        reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    MODEQ           reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    ANDEQ           reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    OREQ            reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    XOREQ           reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    LSHIFTEQ        reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    RSHIFTEQ        reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    }               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    ,               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    ]               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    )               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)
    {               reduce using rule 153 (complicated-expression -> complicated-expression [ complicated-expression ] .)


state 436

    (152) complicated-expression -> complicated-expression [ ID ] .

    ;               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    [               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    .               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    LS              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    GR              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    TIMES           reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    =               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    PLUS            reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    MINUS           reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    DIVIDE          reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    MOD             reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    AND             reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    OR              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    XOR             reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    LSHIFT          reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    RSHIFT          reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    LE              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    GE              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    EE              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    NE              reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    PLUSEQ          reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    MINUSEQ         reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    TIMESEQ         reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    DIVIDEEQ        reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    MODEQ           reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    ANDEQ           reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    OREQ            reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    XOREQ           reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    LSHIFTEQ        reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    RSHIFTEQ        reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    }               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    ,               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    ]               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    )               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)
    {               reduce using rule 152 (complicated-expression -> complicated-expression [ ID ] .)


state 437

    (179) complicated-expression -> complicated-expression . ID invoke-arguments .

    ;               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    [               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    .               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    LS              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    GR              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    TIMES           reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    =               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    PLUS            reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    MINUS           reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    DIVIDE          reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    MOD             reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    AND             reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    OR              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    XOR             reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    LSHIFT          reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    RSHIFT          reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    LE              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    GE              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    EE              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    NE              reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    PLUSEQ          reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    MINUSEQ         reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    TIMESEQ         reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    DIVIDEEQ        reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    MODEQ           reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    ANDEQ           reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    OREQ            reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    XOREQ           reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    LSHIFTEQ        reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    RSHIFTEQ        reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    }               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    ,               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    ]               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    )               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)
    {               reduce using rule 179 (complicated-expression -> complicated-expression . ID invoke-arguments .)


state 438

    (181) complicated-expression -> complicated-expression . ID template-declaration . invoke-arguments
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )

    (               shift and go to state 288

    invoke-arguments               shift and go to state 489

state 439

    (157) set-statement -> complicated-expression = complicated-expression ; .

    }               reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    ID              reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    UNSAFE          reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    [               reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    TIMES           reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    AND             reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    SIZEOF          reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    MINUS           reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    !               reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    (               reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    RETURN          reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    VAR             reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    IF              reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    WHILE           reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    CONST           reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    INT             reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    FLOAT           reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    STR             reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    BOOL            reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    CHAR            reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    {               reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)
    :               reduce using rule 157 (set-statement -> complicated-expression = complicated-expression ; .)


state 440

    (155) set-statement -> complicated-expression = ID ; .

    }               reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    ID              reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    UNSAFE          reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    [               reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    TIMES           reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    AND             reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    SIZEOF          reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    MINUS           reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    !               reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    (               reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    RETURN          reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    VAR             reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    IF              reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    WHILE           reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    CONST           reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    INT             reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    FLOAT           reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    STR             reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    BOOL            reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    CHAR            reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    {               reduce using rule 155 (set-statement -> complicated-expression = ID ; .)
    :               reduce using rule 155 (set-statement -> complicated-expression = ID ; .)


state 441

    (122) variable-declaration -> ID ID = ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 490
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 442

    (124) variable-declaration -> ID ID = complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 491
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 443

    (144) complicated-expression -> ID { ID } .

    ;               reduce using rule 144 (complicated-expression -> ID { ID } .)
    [               reduce using rule 144 (complicated-expression -> ID { ID } .)
    .               reduce using rule 144 (complicated-expression -> ID { ID } .)
    LS              reduce using rule 144 (complicated-expression -> ID { ID } .)
    GR              reduce using rule 144 (complicated-expression -> ID { ID } .)
    TIMES           reduce using rule 144 (complicated-expression -> ID { ID } .)
    =               reduce using rule 144 (complicated-expression -> ID { ID } .)
    PLUS            reduce using rule 144 (complicated-expression -> ID { ID } .)
    MINUS           reduce using rule 144 (complicated-expression -> ID { ID } .)
    DIVIDE          reduce using rule 144 (complicated-expression -> ID { ID } .)
    MOD             reduce using rule 144 (complicated-expression -> ID { ID } .)
    AND             reduce using rule 144 (complicated-expression -> ID { ID } .)
    OR              reduce using rule 144 (complicated-expression -> ID { ID } .)
    XOR             reduce using rule 144 (complicated-expression -> ID { ID } .)
    LSHIFT          reduce using rule 144 (complicated-expression -> ID { ID } .)
    RSHIFT          reduce using rule 144 (complicated-expression -> ID { ID } .)
    LE              reduce using rule 144 (complicated-expression -> ID { ID } .)
    GE              reduce using rule 144 (complicated-expression -> ID { ID } .)
    EE              reduce using rule 144 (complicated-expression -> ID { ID } .)
    NE              reduce using rule 144 (complicated-expression -> ID { ID } .)
    PLUSEQ          reduce using rule 144 (complicated-expression -> ID { ID } .)
    MINUSEQ         reduce using rule 144 (complicated-expression -> ID { ID } .)
    TIMESEQ         reduce using rule 144 (complicated-expression -> ID { ID } .)
    DIVIDEEQ        reduce using rule 144 (complicated-expression -> ID { ID } .)
    MODEQ           reduce using rule 144 (complicated-expression -> ID { ID } .)
    ANDEQ           reduce using rule 144 (complicated-expression -> ID { ID } .)
    OREQ            reduce using rule 144 (complicated-expression -> ID { ID } .)
    XOREQ           reduce using rule 144 (complicated-expression -> ID { ID } .)
    LSHIFTEQ        reduce using rule 144 (complicated-expression -> ID { ID } .)
    RSHIFTEQ        reduce using rule 144 (complicated-expression -> ID { ID } .)
    }               reduce using rule 144 (complicated-expression -> ID { ID } .)
    ,               reduce using rule 144 (complicated-expression -> ID { ID } .)
    ]               reduce using rule 144 (complicated-expression -> ID { ID } .)
    )               reduce using rule 144 (complicated-expression -> ID { ID } .)
    {               reduce using rule 144 (complicated-expression -> ID { ID } .)


state 444

    (142) complicated-expression -> ID { invoke-arguments-list } .

    ;               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    [               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    .               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    LS              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    GR              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    TIMES           reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    =               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    PLUS            reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    MINUS           reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    DIVIDE          reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    MOD             reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    AND             reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    OR              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    XOR             reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    LSHIFT          reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    RSHIFT          reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    LE              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    GE              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    EE              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    NE              reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    PLUSEQ          reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    MINUSEQ         reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    TIMESEQ         reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    DIVIDEEQ        reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    MODEQ           reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    ANDEQ           reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    OREQ            reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    XOREQ           reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    LSHIFTEQ        reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    RSHIFTEQ        reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    }               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    ,               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    ]               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    )               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)
    {               reduce using rule 142 (complicated-expression -> ID { invoke-arguments-list } .)


state 445

    (145) complicated-expression -> ID { complicated-expression } .

    ;               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    [               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    .               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    LS              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    GR              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    TIMES           reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    =               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    PLUS            reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    MINUS           reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    DIVIDE          reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    MOD             reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    AND             reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    OR              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    XOR             reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    LSHIFT          reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    RSHIFT          reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    LE              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    GE              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    EE              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    NE              reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    PLUSEQ          reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    MINUSEQ         reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    TIMESEQ         reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    DIVIDEEQ        reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    MODEQ           reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    ANDEQ           reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    OREQ            reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    XOREQ           reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    LSHIFTEQ        reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    RSHIFTEQ        reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    }               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    ,               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    ]               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    )               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)
    {               reduce using rule 145 (complicated-expression -> ID { complicated-expression } .)


state 446

    (150) complicated-expression -> ID [ ID ] .

    ;               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    [               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    .               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    LS              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    GR              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    TIMES           reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    =               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    PLUS            reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    MINUS           reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    DIVIDE          reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    MOD             reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    AND             reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    OR              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    XOR             reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    LSHIFT          reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    RSHIFT          reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    LE              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    GE              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    EE              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    NE              reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    PLUSEQ          reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    MINUSEQ         reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    TIMESEQ         reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    DIVIDEEQ        reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    MODEQ           reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    ANDEQ           reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    OREQ            reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    XOREQ           reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    LSHIFTEQ        reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    RSHIFTEQ        reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    }               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    ,               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    ]               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    )               reduce using rule 150 (complicated-expression -> ID [ ID ] .)
    {               reduce using rule 150 (complicated-expression -> ID [ ID ] .)


state 447

    (151) complicated-expression -> ID [ complicated-expression ] .

    ;               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    [               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    .               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    LS              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    GR              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    TIMES           reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    =               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    PLUS            reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    MINUS           reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    DIVIDE          reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    MOD             reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    AND             reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    OR              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    XOR             reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    LSHIFT          reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    RSHIFT          reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    LE              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    GE              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    EE              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    NE              reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    PLUSEQ          reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    MINUSEQ         reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    TIMESEQ         reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    DIVIDEEQ        reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    MODEQ           reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    ANDEQ           reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    OREQ            reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    XOREQ           reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    LSHIFTEQ        reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    RSHIFTEQ        reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    }               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    ,               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    ]               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    )               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)
    {               reduce using rule 151 (complicated-expression -> ID [ complicated-expression ] .)


state 448

    (178) complicated-expression -> ID . ID invoke-arguments .

    ;               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    [               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    .               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    LS              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    GR              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    TIMES           reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    =               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    PLUS            reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    MINUS           reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    DIVIDE          reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    MOD             reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    AND             reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    OR              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    XOR             reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    LSHIFT          reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    RSHIFT          reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    LE              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    GE              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    EE              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    NE              reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    PLUSEQ          reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    MINUSEQ         reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    TIMESEQ         reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    DIVIDEEQ        reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    MODEQ           reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    ANDEQ           reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    OREQ            reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    XOREQ           reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    LSHIFTEQ        reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    RSHIFTEQ        reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    }               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    ,               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    ]               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    )               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)
    {               reduce using rule 178 (complicated-expression -> ID . ID invoke-arguments .)


state 449

    (180) complicated-expression -> ID . ID template-declaration . invoke-arguments
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )

    (               shift and go to state 288

    invoke-arguments               shift and go to state 492

state 450

    (173) complicated-expression -> ID : ID invoke-arguments .

    ;               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    [               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    .               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    LS              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    GR              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    TIMES           reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    =               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    PLUS            reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    MINUS           reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    DIVIDE          reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    MOD             reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    AND             reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    OR              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    XOR             reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    LSHIFT          reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    RSHIFT          reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    LE              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    GE              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    EE              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    NE              reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    PLUSEQ          reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    MINUSEQ         reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    TIMESEQ         reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    DIVIDEEQ        reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    MODEQ           reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    ANDEQ           reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    OREQ            reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    XOREQ           reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    LSHIFTEQ        reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    RSHIFTEQ        reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    }               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    ,               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    ]               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    )               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)
    {               reduce using rule 173 (complicated-expression -> ID : ID invoke-arguments .)


state 451

    (176) complicated-expression -> ID : ID template-declaration . invoke-arguments
    (69) complicated-type -> ID : ID template-declaration .
    (70) complicated-type -> ID : ID template-declaration . TIMES
    (71) complicated-type -> ID : ID template-declaration . complicated-pointer-level
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    {               reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    ID              reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    )               reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    GR              reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    ,               reduce using rule 69 (complicated-type -> ID : ID template-declaration .)
    TIMES           shift and go to state 221
    (               shift and go to state 288

    invoke-arguments               shift and go to state 493
    complicated-pointer-level      shift and go to state 222

state 452

    (81) template-declaration -> LS ID GR .
    (195) complicated-expression -> ID GR . ID
    (202) complicated-expression -> ID GR . complicated-expression
    (137) complicated-expression -> . UNSAFE complicated-expression
    (138) complicated-expression -> . [ ]
    (139) complicated-expression -> . [ ID ]
    (140) complicated-expression -> . [ complicated-expression ]
    (141) complicated-expression -> . [ invoke-arguments-list ]
    (142) complicated-expression -> . ID { invoke-arguments-list }
    (143) complicated-expression -> . complicated-type { invoke-arguments-list }
    (144) complicated-expression -> . ID { ID }
    (145) complicated-expression -> . ID { complicated-expression }
    (146) complicated-expression -> . complicated-type { ID }
    (147) complicated-expression -> . complicated-type { complicated-expression }
    (148) complicated-expression -> . ID { }
    (149) complicated-expression -> . complicated-type { }
    (150) complicated-expression -> . ID [ ID ]
    (151) complicated-expression -> . ID [ complicated-expression ]
    (152) complicated-expression -> . complicated-expression [ ID ]
    (153) complicated-expression -> . complicated-expression [ complicated-expression ]
    (164) complicated-expression -> . TIMES ID
    (165) complicated-expression -> . TIMES complicated-expression
    (166) complicated-expression -> . AND ID
    (167) complicated-expression -> . AND complicated-expression
    (168) complicated-expression -> . ID . ID
    (169) complicated-expression -> . complicated-expression . ID
    (170) complicated-expression -> . SIZEOF ( ID )
    (171) complicated-expression -> . SIZEOF ( complicated-type )
    (172) complicated-expression -> . ID invoke-arguments
    (173) complicated-expression -> . ID : ID invoke-arguments
    (174) complicated-expression -> . package-complicated-name : ID invoke-arguments
    (175) complicated-expression -> . ID template-declaration invoke-arguments
    (176) complicated-expression -> . ID : ID template-declaration invoke-arguments
    (177) complicated-expression -> . package-complicated-name : ID template-declaration invoke-arguments
    (178) complicated-expression -> . ID . ID invoke-arguments
    (179) complicated-expression -> . complicated-expression . ID invoke-arguments
    (180) complicated-expression -> . ID . ID template-declaration invoke-arguments
    (181) complicated-expression -> . complicated-expression . ID template-declaration invoke-arguments
    (192) complicated-expression -> . ID binary-operator ID
    (193) complicated-expression -> . ID TIMES ID
    (194) complicated-expression -> . ID LS ID
    (195) complicated-expression -> . ID GR ID
    (196) complicated-expression -> . complicated-expression binary-operator ID
    (197) complicated-expression -> . complicated-expression LS ID
    (198) complicated-expression -> . complicated-expression GR ID
    (199) complicated-expression -> . complicated-expression TIMES ID
    (200) complicated-expression -> . ID binary-operator complicated-expression
    (201) complicated-expression -> . ID LS complicated-expression
    (202) complicated-expression -> . ID GR complicated-expression
    (203) complicated-expression -> . ID TIMES complicated-expression
    (204) complicated-expression -> . complicated-expression binary-operator complicated-expression
    (205) complicated-expression -> . complicated-expression LS complicated-expression
    (206) complicated-expression -> . complicated-expression GR complicated-expression
    (207) complicated-expression -> . complicated-expression TIMES complicated-expression
    (208) complicated-expression -> . MINUS ID
    (209) complicated-expression -> . MINUS complicated-expression
    (210) complicated-expression -> . ! ID
    (211) complicated-expression -> . ! complicated-expression
    (212) complicated-expression -> . constant-expression
    (213) complicated-expression -> . ( ID )
    (214) complicated-expression -> . ( complicated-expression )
    (215) complicated-expression -> . ( ID ) ID
    (216) complicated-expression -> . ( ID ) complicated-expression
    (217) complicated-expression -> . ( complicated-type ) ID
    (218) complicated-expression -> . ( complicated-type ) complicated-expression
    (229) complicated-expression -> . ID sub-equal-operator ID
    (230) complicated-expression -> . complicated-expression sub-equal-operator ID
    (231) complicated-expression -> . ID sub-equal-operator complicated-expression
    (232) complicated-expression -> . complicated-expression sub-equal-operator complicated-expression
    (60) complicated-type -> . package-complicated-name : ID
    (61) complicated-type -> . package-complicated-name : ID TIMES
    (62) complicated-type -> . package-complicated-name : ID complicated-pointer-level
    (63) complicated-type -> . ID : ID
    (64) complicated-type -> . ID : ID TIMES
    (65) complicated-type -> . ID : ID complicated-pointer-level
    (66) complicated-type -> . package-complicated-name : ID template-declaration
    (67) complicated-type -> . package-complicated-name : ID template-declaration TIMES
    (68) complicated-type -> . package-complicated-name : ID template-declaration complicated-pointer-level
    (69) complicated-type -> . ID : ID template-declaration
    (70) complicated-type -> . ID : ID template-declaration TIMES
    (71) complicated-type -> . ID : ID template-declaration complicated-pointer-level
    (72) complicated-type -> . ID template-declaration
    (73) complicated-type -> . ID template-declaration TIMES
    (74) complicated-type -> . ID template-declaration complicated-pointer-level
    (75) complicated-type -> . ID TIMES
    (76) complicated-type -> . ID complicated-pointer-level
    (77) complicated-type -> . CONST complicated-type
    (4) package-complicated-name -> . package-complicated-name : ID
    (5) package-complicated-name -> . ID : ID
    (6) package-complicated-name -> .
    (159) constant-expression -> . INT
    (160) constant-expression -> . FLOAT
    (161) constant-expression -> . STR
    (162) constant-expression -> . BOOL
    (163) constant-expression -> . CHAR

    (               reduce using rule 81 (template-declaration -> LS ID GR .)
    {               reduce using rule 81 (template-declaration -> LS ID GR .)
    ID              reduce using rule 81 (template-declaration -> LS ID GR .)
    )               reduce using rule 81 (template-declaration -> LS ID GR .)
    GR              reduce using rule 81 (template-declaration -> LS ID GR .)
    ,               reduce using rule 81 (template-declaration -> LS ID GR .)
    UNSAFE          shift and go to state 289
    [               shift and go to state 175
    TIMES           shift and go to state 177
    AND             shift and go to state 178
    SIZEOF          shift and go to state 179
    MINUS           shift and go to state 182
    !               shift and go to state 183
    CONST           shift and go to state 25
    :               reduce using rule 6 (package-complicated-name -> .)
    INT             shift and go to state 190
    FLOAT           shift and go to state 191
    STR             shift and go to state 192
    BOOL            shift and go to state 193
    CHAR            shift and go to state 194

  ! TIMES           [ reduce using rule 81 (template-declaration -> LS ID GR .) ]
  ! ID              [ shift and go to state 385 ]
  ! (               [ shift and go to state 180 ]

    complicated-expression         shift and go to state 386
    complicated-type               shift and go to state 293
    package-complicated-name       shift and go to state 181
    constant-expression            shift and go to state 184

state 453

    (154) set-statement -> ID = ID ; .

    }               reduce using rule 154 (set-statement -> ID = ID ; .)
    ID              reduce using rule 154 (set-statement -> ID = ID ; .)
    UNSAFE          reduce using rule 154 (set-statement -> ID = ID ; .)
    [               reduce using rule 154 (set-statement -> ID = ID ; .)
    TIMES           reduce using rule 154 (set-statement -> ID = ID ; .)
    AND             reduce using rule 154 (set-statement -> ID = ID ; .)
    SIZEOF          reduce using rule 154 (set-statement -> ID = ID ; .)
    MINUS           reduce using rule 154 (set-statement -> ID = ID ; .)
    !               reduce using rule 154 (set-statement -> ID = ID ; .)
    (               reduce using rule 154 (set-statement -> ID = ID ; .)
    RETURN          reduce using rule 154 (set-statement -> ID = ID ; .)
    VAR             reduce using rule 154 (set-statement -> ID = ID ; .)
    IF              reduce using rule 154 (set-statement -> ID = ID ; .)
    WHILE           reduce using rule 154 (set-statement -> ID = ID ; .)
    CONST           reduce using rule 154 (set-statement -> ID = ID ; .)
    INT             reduce using rule 154 (set-statement -> ID = ID ; .)
    FLOAT           reduce using rule 154 (set-statement -> ID = ID ; .)
    STR             reduce using rule 154 (set-statement -> ID = ID ; .)
    BOOL            reduce using rule 154 (set-statement -> ID = ID ; .)
    CHAR            reduce using rule 154 (set-statement -> ID = ID ; .)
    {               reduce using rule 154 (set-statement -> ID = ID ; .)
    :               reduce using rule 154 (set-statement -> ID = ID ; .)


state 454

    (156) set-statement -> ID = complicated-expression ; .

    }               reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    ID              reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    UNSAFE          reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    [               reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    TIMES           reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    AND             reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    SIZEOF          reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    MINUS           reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    !               reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    (               reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    RETURN          reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    VAR             reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    IF              reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    WHILE           reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    CONST           reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    INT             reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    FLOAT           reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    STR             reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    BOOL            reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    CHAR            reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    {               reduce using rule 156 (set-statement -> ID = complicated-expression ; .)
    :               reduce using rule 156 (set-statement -> ID = complicated-expression ; .)


state 455

    (183) invoke-arguments -> ( ID ) .

    ;               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    [               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    .               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    LS              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    GR              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    TIMES           reduce using rule 183 (invoke-arguments -> ( ID ) .)
    =               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    PLUS            reduce using rule 183 (invoke-arguments -> ( ID ) .)
    MINUS           reduce using rule 183 (invoke-arguments -> ( ID ) .)
    DIVIDE          reduce using rule 183 (invoke-arguments -> ( ID ) .)
    MOD             reduce using rule 183 (invoke-arguments -> ( ID ) .)
    AND             reduce using rule 183 (invoke-arguments -> ( ID ) .)
    OR              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    XOR             reduce using rule 183 (invoke-arguments -> ( ID ) .)
    LSHIFT          reduce using rule 183 (invoke-arguments -> ( ID ) .)
    RSHIFT          reduce using rule 183 (invoke-arguments -> ( ID ) .)
    LE              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    GE              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    EE              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    NE              reduce using rule 183 (invoke-arguments -> ( ID ) .)
    PLUSEQ          reduce using rule 183 (invoke-arguments -> ( ID ) .)
    MINUSEQ         reduce using rule 183 (invoke-arguments -> ( ID ) .)
    TIMESEQ         reduce using rule 183 (invoke-arguments -> ( ID ) .)
    DIVIDEEQ        reduce using rule 183 (invoke-arguments -> ( ID ) .)
    MODEQ           reduce using rule 183 (invoke-arguments -> ( ID ) .)
    ANDEQ           reduce using rule 183 (invoke-arguments -> ( ID ) .)
    OREQ            reduce using rule 183 (invoke-arguments -> ( ID ) .)
    XOREQ           reduce using rule 183 (invoke-arguments -> ( ID ) .)
    LSHIFTEQ        reduce using rule 183 (invoke-arguments -> ( ID ) .)
    RSHIFTEQ        reduce using rule 183 (invoke-arguments -> ( ID ) .)
    }               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    ,               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    ]               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    )               reduce using rule 183 (invoke-arguments -> ( ID ) .)
    {               reduce using rule 183 (invoke-arguments -> ( ID ) .)


state 456

    (184) invoke-arguments -> ( complicated-expression ) .

    ;               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    [               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    .               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    LS              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    GR              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    TIMES           reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    =               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    PLUS            reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    MINUS           reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    DIVIDE          reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    MOD             reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    AND             reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    OR              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    XOR             reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    LSHIFT          reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    RSHIFT          reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    LE              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    GE              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    EE              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    NE              reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    PLUSEQ          reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    MINUSEQ         reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    TIMESEQ         reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    DIVIDEEQ        reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    MODEQ           reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    ANDEQ           reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    OREQ            reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    XOREQ           reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    LSHIFTEQ        reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    RSHIFTEQ        reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    }               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    ,               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    ]               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    )               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)
    {               reduce using rule 184 (invoke-arguments -> ( complicated-expression ) .)


state 457

    (185) invoke-arguments -> ( invoke-arguments-list ) .

    ;               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    [               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    .               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    LS              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    GR              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    TIMES           reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    =               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    PLUS            reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    MINUS           reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    DIVIDE          reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    MOD             reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    AND             reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    OR              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    XOR             reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    LSHIFT          reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    RSHIFT          reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    LE              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    GE              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    EE              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    NE              reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    PLUSEQ          reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    MINUSEQ         reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    TIMESEQ         reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    DIVIDEEQ        reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    MODEQ           reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    ANDEQ           reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    OREQ            reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    XOREQ           reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    LSHIFTEQ        reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    RSHIFTEQ        reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    }               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    ,               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    ]               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    )               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)
    {               reduce using rule 185 (invoke-arguments -> ( invoke-arguments-list ) .)


state 458

    (188) invoke-arguments-list -> ID , ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ]               reduce using rule 188 (invoke-arguments-list -> ID , ID .)
    ,               reduce using rule 188 (invoke-arguments-list -> ID , ID .)
    }               reduce using rule 188 (invoke-arguments-list -> ID , ID .)
    )               reduce using rule 188 (invoke-arguments-list -> ID , ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 459

    (190) invoke-arguments-list -> ID , complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ]               reduce using rule 190 (invoke-arguments-list -> ID , complicated-expression .)
    ,               reduce using rule 190 (invoke-arguments-list -> ID , complicated-expression .)
    }               reduce using rule 190 (invoke-arguments-list -> ID , complicated-expression .)
    )               reduce using rule 190 (invoke-arguments-list -> ID , complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 460

    (191) invoke-arguments-list -> complicated-expression , complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ]               reduce using rule 191 (invoke-arguments-list -> complicated-expression , complicated-expression .)
    ,               reduce using rule 191 (invoke-arguments-list -> complicated-expression , complicated-expression .)
    }               reduce using rule 191 (invoke-arguments-list -> complicated-expression , complicated-expression .)
    )               reduce using rule 191 (invoke-arguments-list -> complicated-expression , complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 461

    (189) invoke-arguments-list -> complicated-expression , ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ]               reduce using rule 189 (invoke-arguments-list -> complicated-expression , ID .)
    ,               reduce using rule 189 (invoke-arguments-list -> complicated-expression , ID .)
    }               reduce using rule 189 (invoke-arguments-list -> complicated-expression , ID .)
    )               reduce using rule 189 (invoke-arguments-list -> complicated-expression , ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 462

    (186) invoke-arguments-list -> invoke-arguments-list , ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ]               reduce using rule 186 (invoke-arguments-list -> invoke-arguments-list , ID .)
    ,               reduce using rule 186 (invoke-arguments-list -> invoke-arguments-list , ID .)
    }               reduce using rule 186 (invoke-arguments-list -> invoke-arguments-list , ID .)
    )               reduce using rule 186 (invoke-arguments-list -> invoke-arguments-list , ID .)
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 463

    (187) invoke-arguments-list -> invoke-arguments-list , complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ]               reduce using rule 187 (invoke-arguments-list -> invoke-arguments-list , complicated-expression .)
    ,               reduce using rule 187 (invoke-arguments-list -> invoke-arguments-list , complicated-expression .)
    }               reduce using rule 187 (invoke-arguments-list -> invoke-arguments-list , complicated-expression .)
    )               reduce using rule 187 (invoke-arguments-list -> invoke-arguments-list , complicated-expression .)
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 464

    (143) complicated-expression -> complicated-type { invoke-arguments-list } .

    ;               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    [               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    .               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    LS              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    GR              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    TIMES           reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    =               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    PLUS            reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    MINUS           reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    DIVIDE          reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    MOD             reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    AND             reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    OR              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    XOR             reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    LSHIFT          reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    RSHIFT          reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    LE              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    GE              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    EE              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    NE              reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    PLUSEQ          reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    MINUSEQ         reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    TIMESEQ         reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    DIVIDEEQ        reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    MODEQ           reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    ANDEQ           reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    OREQ            reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    XOREQ           reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    LSHIFTEQ        reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    RSHIFTEQ        reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    }               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    ,               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    ]               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    )               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)
    {               reduce using rule 143 (complicated-expression -> complicated-type { invoke-arguments-list } .)


state 465

    (146) complicated-expression -> complicated-type { ID } .

    ;               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    [               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    .               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    LS              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    GR              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    TIMES           reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    =               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    PLUS            reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    MINUS           reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    DIVIDE          reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    MOD             reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    AND             reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    OR              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    XOR             reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    LSHIFT          reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    RSHIFT          reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    LE              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    GE              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    EE              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    NE              reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    PLUSEQ          reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    MINUSEQ         reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    TIMESEQ         reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    DIVIDEEQ        reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    MODEQ           reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    ANDEQ           reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    OREQ            reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    XOREQ           reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    LSHIFTEQ        reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    RSHIFTEQ        reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    }               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    ,               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    ]               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    )               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)
    {               reduce using rule 146 (complicated-expression -> complicated-type { ID } .)


state 466

    (147) complicated-expression -> complicated-type { complicated-expression } .

    ;               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    [               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    .               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    LS              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    GR              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    TIMES           reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    =               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    PLUS            reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    MINUS           reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    DIVIDE          reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    MOD             reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    AND             reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    OR              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    XOR             reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    LSHIFT          reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    RSHIFT          reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    LE              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    GE              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    EE              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    NE              reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    PLUSEQ          reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    MINUSEQ         reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    TIMESEQ         reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    DIVIDEEQ        reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    MODEQ           reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    ANDEQ           reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    OREQ            reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    XOREQ           reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    LSHIFTEQ        reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    RSHIFTEQ        reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    }               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    ,               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    ]               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    )               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)
    {               reduce using rule 147 (complicated-expression -> complicated-type { complicated-expression } .)


state 467

    (123) variable-declaration -> complicated-type ID = ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 494
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 468

    (125) variable-declaration -> complicated-type ID = complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 495
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 469

    (170) complicated-expression -> SIZEOF ( ID ) .

    ;               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    [               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    .               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    LS              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    GR              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    TIMES           reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    =               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    PLUS            reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    MINUS           reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    DIVIDE          reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    MOD             reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    AND             reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    OR              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    XOR             reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    LSHIFT          reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    RSHIFT          reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    LE              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    GE              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    EE              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    NE              reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    PLUSEQ          reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    MINUSEQ         reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    TIMESEQ         reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    DIVIDEEQ        reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    MODEQ           reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    ANDEQ           reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    OREQ            reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    XOREQ           reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    LSHIFTEQ        reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    RSHIFTEQ        reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    }               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    ,               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    ]               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    )               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)
    {               reduce using rule 170 (complicated-expression -> SIZEOF ( ID ) .)


state 470

    (171) complicated-expression -> SIZEOF ( complicated-type ) .

    ;               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    [               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    .               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    LS              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    GR              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    TIMES           reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    =               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    PLUS            reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    MINUS           reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    DIVIDE          reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    MOD             reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    AND             reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    OR              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    XOR             reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    LSHIFT          reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    RSHIFT          reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    LE              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    GE              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    EE              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    NE              reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    PLUSEQ          reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    MINUSEQ         reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    TIMESEQ         reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    DIVIDEEQ        reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    MODEQ           reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    ANDEQ           reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    OREQ            reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    XOREQ           reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    LSHIFTEQ        reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    RSHIFTEQ        reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    }               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    ,               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    ]               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    )               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)
    {               reduce using rule 171 (complicated-expression -> SIZEOF ( complicated-type ) .)


state 471

    (215) complicated-expression -> ( ID ) ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    [               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    LS              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    GR              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    TIMES           reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    =               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    PLUS            reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    MINUS           reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    DIVIDE          reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    MOD             reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    AND             reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    OR              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    XOR             reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    LSHIFT          reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    RSHIFT          reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    LE              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    GE              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    EE              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    NE              reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    PLUSEQ          reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    MINUSEQ         reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    TIMESEQ         reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    DIVIDEEQ        reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    MODEQ           reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    ANDEQ           reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    OREQ            reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    XOREQ           reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    LSHIFTEQ        reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    RSHIFTEQ        reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    }               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    ,               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    ]               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    )               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    {               reduce using rule 215 (complicated-expression -> ( ID ) ID .)
    .               shift and go to state 278
    :               shift and go to state 280
    (               shift and go to state 288

  ! .               [ reduce using rule 215 (complicated-expression -> ( ID ) ID .) ]
  ! {               [ shift and go to state 276 ]
  ! [               [ shift and go to state 277 ]
  ! TIMES           [ shift and go to state 283 ]
  ! LS              [ shift and go to state 284 ]
  ! GR              [ shift and go to state 285 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 472

    (216) complicated-expression -> ( ID ) complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    [               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    LS              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    GR              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    TIMES           reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    =               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    PLUS            reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    MINUS           reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    DIVIDE          reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    MOD             reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    AND             reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    OR              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    XOR             reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    LSHIFT          reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    RSHIFT          reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    LE              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    GE              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    EE              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    NE              reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    PLUSEQ          reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    MINUSEQ         reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    TIMESEQ         reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    DIVIDEEQ        reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    MODEQ           reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    ANDEQ           reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    OREQ            reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    XOREQ           reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    LSHIFTEQ        reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    RSHIFTEQ        reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    }               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    ,               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    ]               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    )               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    {               reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 216 (complicated-expression -> ( ID ) complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 473

    (217) complicated-expression -> ( complicated-type ) ID .
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    [               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    LS              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    GR              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    TIMES           reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    =               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    PLUS            reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    MINUS           reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    DIVIDE          reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    MOD             reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    AND             reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    OR              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    XOR             reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    LSHIFT          reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    RSHIFT          reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    LE              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    GE              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    EE              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    NE              reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    PLUSEQ          reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    MINUSEQ         reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    TIMESEQ         reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    DIVIDEEQ        reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    MODEQ           reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    ANDEQ           reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    OREQ            reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    XOREQ           reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    LSHIFTEQ        reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    RSHIFTEQ        reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    }               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    ,               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    ]               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    )               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    {               reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .)
    .               shift and go to state 278
    :               shift and go to state 280
    (               shift and go to state 288

  ! .               [ reduce using rule 217 (complicated-expression -> ( complicated-type ) ID .) ]
  ! {               [ shift and go to state 276 ]
  ! [               [ shift and go to state 277 ]
  ! TIMES           [ shift and go to state 283 ]
  ! LS              [ shift and go to state 284 ]
  ! GR              [ shift and go to state 285 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 474

    (218) complicated-expression -> ( complicated-type ) complicated-expression .
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    [               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    LS              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    GR              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    TIMES           reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    =               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    PLUS            reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    MINUS           reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    DIVIDE          reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    MOD             reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    AND             reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    OR              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    XOR             reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    LSHIFT          reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    RSHIFT          reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    LE              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    GE              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    EE              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    NE              reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    PLUSEQ          reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    MINUSEQ         reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    TIMESEQ         reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    DIVIDEEQ        reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    MODEQ           reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    ANDEQ           reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    OREQ            reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    XOREQ           reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    LSHIFTEQ        reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    RSHIFTEQ        reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    }               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    ,               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    ]               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    )               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    {               reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .)
    .               shift and go to state 257

  ! .               [ reduce using rule 218 (complicated-expression -> ( complicated-type ) complicated-expression .) ]
  ! [               [ shift and go to state 256 ]
  ! LS              [ shift and go to state 259 ]
  ! GR              [ shift and go to state 260 ]
  ! TIMES           [ shift and go to state 261 ]
  ! PLUS            [ shift and go to state 62 ]
  ! MINUS           [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! XOR             [ shift and go to state 68 ]
  ! LSHIFT          [ shift and go to state 69 ]
  ! RSHIFT          [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]
  ! GE              [ shift and go to state 72 ]
  ! EE              [ shift and go to state 73 ]
  ! NE              [ shift and go to state 74 ]
  ! PLUSEQ          [ shift and go to state 264 ]
  ! MINUSEQ         [ shift and go to state 265 ]
  ! TIMESEQ         [ shift and go to state 266 ]
  ! DIVIDEEQ        [ shift and go to state 267 ]
  ! MODEQ           [ shift and go to state 268 ]
  ! ANDEQ           [ shift and go to state 269 ]
  ! OREQ            [ shift and go to state 270 ]
  ! XOREQ           [ shift and go to state 271 ]
  ! LSHIFTEQ        [ shift and go to state 272 ]
  ! RSHIFTEQ        [ shift and go to state 273 ]

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 475

    (174) complicated-expression -> package-complicated-name : ID invoke-arguments .

    ;               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    [               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    .               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    LS              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    GR              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    TIMES           reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    =               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    PLUS            reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    MINUS           reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    DIVIDE          reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    MOD             reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    AND             reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    OR              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    XOR             reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    LSHIFT          reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    RSHIFT          reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    LE              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    GE              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    EE              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    NE              reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    PLUSEQ          reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    MINUSEQ         reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    TIMESEQ         reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    DIVIDEEQ        reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    MODEQ           reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    ANDEQ           reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    OREQ            reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    XOREQ           reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    LSHIFTEQ        reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    RSHIFTEQ        reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    }               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    ,               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    ]               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    )               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)
    {               reduce using rule 174 (complicated-expression -> package-complicated-name : ID invoke-arguments .)


state 476

    (177) complicated-expression -> package-complicated-name : ID template-declaration . invoke-arguments
    (66) complicated-type -> package-complicated-name : ID template-declaration .
    (67) complicated-type -> package-complicated-name : ID template-declaration . TIMES
    (68) complicated-type -> package-complicated-name : ID template-declaration . complicated-pointer-level
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    {               reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    ID              reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    )               reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    GR              reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    ,               reduce using rule 66 (complicated-type -> package-complicated-name : ID template-declaration .)
    TIMES           shift and go to state 251
    (               shift and go to state 288

    invoke-arguments               shift and go to state 496
    complicated-pointer-level      shift and go to state 252

state 477

    (126) variable-declaration -> VAR ID = ID . ;
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    ;               shift and go to state 497
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 478

    (127) variable-declaration -> VAR ID = complicated-expression . ;
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    ;               shift and go to state 498
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 479

    (129) if-statement -> IF complicated-expression visibility-area ELSE . visibility-area
    (130) if-statement -> IF complicated-expression visibility-area ELSE . if-statement
    (158) visibility-area -> . function-body
    (128) if-statement -> . IF complicated-expression visibility-area
    (129) if-statement -> . IF complicated-expression visibility-area ELSE visibility-area
    (130) if-statement -> . IF complicated-expression visibility-area ELSE if-statement
    (131) if-statement -> . IF ID visibility-area
    (132) if-statement -> . IF ID visibility-area ELSE visibility-area
    (133) if-statement -> . IF ID visibility-area ELSE if-statement
    (95) function-body -> . { expression-lines }

    IF              shift and go to state 187
    {               shift and go to state 103

    visibility-area                shift and go to state 499
    if-statement                   shift and go to state 500
    function-body                  shift and go to state 189

state 480

    (132) if-statement -> IF ID visibility-area ELSE . visibility-area
    (133) if-statement -> IF ID visibility-area ELSE . if-statement
    (158) visibility-area -> . function-body
    (128) if-statement -> . IF complicated-expression visibility-area
    (129) if-statement -> . IF complicated-expression visibility-area ELSE visibility-area
    (130) if-statement -> . IF complicated-expression visibility-area ELSE if-statement
    (131) if-statement -> . IF ID visibility-area
    (132) if-statement -> . IF ID visibility-area ELSE visibility-area
    (133) if-statement -> . IF ID visibility-area ELSE if-statement
    (95) function-body -> . { expression-lines }

    IF              shift and go to state 187
    {               shift and go to state 103

    visibility-area                shift and go to state 501
    if-statement                   shift and go to state 502
    function-body                  shift and go to state 189

state 481

    (144) complicated-expression -> ID { ID . }
    (188) invoke-arguments-list -> ID . , ID
    (190) invoke-arguments-list -> ID . , complicated-expression
    (142) complicated-expression -> ID . { invoke-arguments-list }
    (144) complicated-expression -> ID . { ID }
    (145) complicated-expression -> ID . { complicated-expression }
    (148) complicated-expression -> ID . { }
    (150) complicated-expression -> ID . [ ID ]
    (151) complicated-expression -> ID . [ complicated-expression ]
    (168) complicated-expression -> ID . . ID
    (172) complicated-expression -> ID . invoke-arguments
    (173) complicated-expression -> ID . : ID invoke-arguments
    (175) complicated-expression -> ID . template-declaration invoke-arguments
    (176) complicated-expression -> ID . : ID template-declaration invoke-arguments
    (178) complicated-expression -> ID . . ID invoke-arguments
    (180) complicated-expression -> ID . . ID template-declaration invoke-arguments
    (192) complicated-expression -> ID . binary-operator ID
    (193) complicated-expression -> ID . TIMES ID
    (194) complicated-expression -> ID . LS ID
    (195) complicated-expression -> ID . GR ID
    (200) complicated-expression -> ID . binary-operator complicated-expression
    (201) complicated-expression -> ID . LS complicated-expression
    (202) complicated-expression -> ID . GR complicated-expression
    (203) complicated-expression -> ID . TIMES complicated-expression
    (229) complicated-expression -> ID . sub-equal-operator ID
    (231) complicated-expression -> ID . sub-equal-operator complicated-expression
    (63) complicated-type -> ID . : ID
    (64) complicated-type -> ID . : ID TIMES
    (65) complicated-type -> ID . : ID complicated-pointer-level
    (69) complicated-type -> ID . : ID template-declaration
    (70) complicated-type -> ID . : ID template-declaration TIMES
    (71) complicated-type -> ID . : ID template-declaration complicated-pointer-level
    (72) complicated-type -> ID . template-declaration
    (73) complicated-type -> ID . template-declaration TIMES
    (74) complicated-type -> ID . template-declaration complicated-pointer-level
    (75) complicated-type -> ID . TIMES
    (76) complicated-type -> ID . complicated-pointer-level
    (5) package-complicated-name -> ID . : ID
    (117) expression-line -> ID . ;
    (120) variable-declaration -> ID . ID ;
    (122) variable-declaration -> ID . ID = ID ;
    (124) variable-declaration -> ID . ID = complicated-expression ;
    (154) set-statement -> ID . = ID ;
    (156) set-statement -> ID . = complicated-expression ;
    (182) invoke-arguments -> . ( )
    (183) invoke-arguments -> . ( ID )
    (184) invoke-arguments -> . ( complicated-expression )
    (185) invoke-arguments -> . ( invoke-arguments-list )
    (80) template-declaration -> . LS template-declaration-body GR
    (81) template-declaration -> . LS ID GR
    (82) template-declaration -> . LS complicated-type GR
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ
    (78) complicated-pointer-level -> . complicated-pointer-level TIMES
    (79) complicated-pointer-level -> . TIMES TIMES

    }               shift and go to state 443
    ,               shift and go to state 396
    {               shift and go to state 276
    [               shift and go to state 277
    .               shift and go to state 278
    :               shift and go to state 280
    TIMES           shift and go to state 283
    LS              shift and go to state 284
    GR              shift and go to state 285
    ;               shift and go to state 275
    ID              shift and go to state 274
    =               shift and go to state 287
    (               shift and go to state 288
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    invoke-arguments               shift and go to state 279
    template-declaration           shift and go to state 281
    binary-operator                shift and go to state 282
    sub-equal-operator             shift and go to state 286
    complicated-pointer-level      shift and go to state 36

state 482

    (145) complicated-expression -> ID { complicated-expression . }
    (189) invoke-arguments-list -> complicated-expression . , ID
    (191) invoke-arguments-list -> complicated-expression . , complicated-expression
    (152) complicated-expression -> complicated-expression . [ ID ]
    (153) complicated-expression -> complicated-expression . [ complicated-expression ]
    (169) complicated-expression -> complicated-expression . . ID
    (179) complicated-expression -> complicated-expression . . ID invoke-arguments
    (181) complicated-expression -> complicated-expression . . ID template-declaration invoke-arguments
    (196) complicated-expression -> complicated-expression . binary-operator ID
    (197) complicated-expression -> complicated-expression . LS ID
    (198) complicated-expression -> complicated-expression . GR ID
    (199) complicated-expression -> complicated-expression . TIMES ID
    (204) complicated-expression -> complicated-expression . binary-operator complicated-expression
    (205) complicated-expression -> complicated-expression . LS complicated-expression
    (206) complicated-expression -> complicated-expression . GR complicated-expression
    (207) complicated-expression -> complicated-expression . TIMES complicated-expression
    (230) complicated-expression -> complicated-expression . sub-equal-operator ID
    (232) complicated-expression -> complicated-expression . sub-equal-operator complicated-expression
    (109) expression-line -> complicated-expression . ;
    (155) set-statement -> complicated-expression . = ID ;
    (157) set-statement -> complicated-expression . = complicated-expression ;
    (233) binary-operator -> . PLUS
    (234) binary-operator -> . MINUS
    (235) binary-operator -> . DIVIDE
    (236) binary-operator -> . MOD
    (237) binary-operator -> . AND
    (238) binary-operator -> . OR
    (239) binary-operator -> . XOR
    (240) binary-operator -> . LSHIFT
    (241) binary-operator -> . RSHIFT
    (242) binary-operator -> . LE
    (243) binary-operator -> . GE
    (244) binary-operator -> . EE
    (245) binary-operator -> . NE
    (219) sub-equal-operator -> . PLUSEQ
    (220) sub-equal-operator -> . MINUSEQ
    (221) sub-equal-operator -> . TIMESEQ
    (222) sub-equal-operator -> . DIVIDEEQ
    (223) sub-equal-operator -> . MODEQ
    (224) sub-equal-operator -> . ANDEQ
    (225) sub-equal-operator -> . OREQ
    (226) sub-equal-operator -> . XOREQ
    (227) sub-equal-operator -> . LSHIFTEQ
    (228) sub-equal-operator -> . RSHIFTEQ

    }               shift and go to state 445
    ,               shift and go to state 398
    [               shift and go to state 256
    .               shift and go to state 257
    LS              shift and go to state 259
    GR              shift and go to state 260
    TIMES           shift and go to state 261
    ;               shift and go to state 255
    =               shift and go to state 263
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    XOR             shift and go to state 68
    LSHIFT          shift and go to state 69
    RSHIFT          shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72
    EE              shift and go to state 73
    NE              shift and go to state 74
    PLUSEQ          shift and go to state 264
    MINUSEQ         shift and go to state 265
    TIMESEQ         shift and go to state 266
    DIVIDEEQ        shift and go to state 267
    MODEQ           shift and go to state 268
    ANDEQ           shift and go to state 269
    OREQ            shift and go to state 270
    XOREQ           shift and go to state 271
    LSHIFTEQ        shift and go to state 272
    RSHIFTEQ        shift and go to state 273

    binary-operator                shift and go to state 258
    sub-equal-operator             shift and go to state 262

state 483

    (42) main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .

    ID              reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    CONST           reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    :               reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    $end            reduce using rule 42 (main -> ID OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)


state 484

    (43) main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .

    ID              reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    CONST           reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    :               reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)
    $end            reduce using rule 43 (main -> ID OPERATOR ! ( ) template-declaration function-arguments function-body .)


state 485

    (44) main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .

    ID              reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    CONST           reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    :               reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)
    $end            reduce using rule 44 (main -> complicated-type OPERATOR binary-operator ( ) template-declaration function-arguments function-body .)


state 486

    (45) main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .

    ID              reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    UNSAFE          reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    OPERATOR        reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    EXTERN          reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    STRUCT          reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    CONST           reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    :               reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)
    $end            reduce using rule 45 (main -> complicated-type OPERATOR ! ( ) template-declaration function-arguments function-body .)


state 487

    (104) struct-field -> ACCMOD ID ID ; .

    }               reduce using rule 104 (struct-field -> ACCMOD ID ID ; .)
    ID              reduce using rule 104 (struct-field -> ACCMOD ID ID ; .)
    ACCMOD          reduce using rule 104 (struct-field -> ACCMOD ID ID ; .)
    CONST           reduce using rule 104 (struct-field -> ACCMOD ID ID ; .)
    :               reduce using rule 104 (struct-field -> ACCMOD ID ID ; .)


state 488

    (105) struct-field -> ACCMOD complicated-type ID ; .

    }               reduce using rule 105 (struct-field -> ACCMOD complicated-type ID ; .)
    ID              reduce using rule 105 (struct-field -> ACCMOD complicated-type ID ; .)
    ACCMOD          reduce using rule 105 (struct-field -> ACCMOD complicated-type ID ; .)
    CONST           reduce using rule 105 (struct-field -> ACCMOD complicated-type ID ; .)
    :               reduce using rule 105 (struct-field -> ACCMOD complicated-type ID ; .)


state 489

    (181) complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .

    ;               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    [               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    .               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    LS              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    GR              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    TIMES           reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    =               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    PLUS            reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    MINUS           reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    DIVIDE          reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    MOD             reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    AND             reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    OR              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    XOR             reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    LSHIFT          reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    RSHIFT          reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    LE              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    GE              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    EE              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    NE              reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    PLUSEQ          reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    MINUSEQ         reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    TIMESEQ         reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    DIVIDEEQ        reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    MODEQ           reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    ANDEQ           reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    OREQ            reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    XOREQ           reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    LSHIFTEQ        reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    RSHIFTEQ        reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    }               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    ,               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    ]               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    )               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)
    {               reduce using rule 181 (complicated-expression -> complicated-expression . ID template-declaration invoke-arguments .)


state 490

    (122) variable-declaration -> ID ID = ID ; .

    }               reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    ID              reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    UNSAFE          reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    [               reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    TIMES           reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    AND             reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    SIZEOF          reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    MINUS           reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    !               reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    (               reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    RETURN          reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    VAR             reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    IF              reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    WHILE           reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    CONST           reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    INT             reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    FLOAT           reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    STR             reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    BOOL            reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    CHAR            reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    {               reduce using rule 122 (variable-declaration -> ID ID = ID ; .)
    :               reduce using rule 122 (variable-declaration -> ID ID = ID ; .)


state 491

    (124) variable-declaration -> ID ID = complicated-expression ; .

    }               reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    ID              reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    UNSAFE          reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    [               reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    TIMES           reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    AND             reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    SIZEOF          reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    MINUS           reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    !               reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    (               reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    RETURN          reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    VAR             reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    IF              reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    WHILE           reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    CONST           reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    INT             reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    FLOAT           reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    STR             reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    BOOL            reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    CHAR            reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    {               reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)
    :               reduce using rule 124 (variable-declaration -> ID ID = complicated-expression ; .)


state 492

    (180) complicated-expression -> ID . ID template-declaration invoke-arguments .

    ;               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    [               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    .               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    LS              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    GR              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    TIMES           reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    =               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    PLUS            reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    MINUS           reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    DIVIDE          reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    MOD             reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    AND             reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    OR              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    XOR             reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    LSHIFT          reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    RSHIFT          reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    LE              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    GE              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    EE              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    NE              reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    PLUSEQ          reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    MINUSEQ         reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    TIMESEQ         reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    DIVIDEEQ        reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    MODEQ           reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    ANDEQ           reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    OREQ            reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    XOREQ           reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    LSHIFTEQ        reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    RSHIFTEQ        reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    }               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    ,               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    ]               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    )               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)
    {               reduce using rule 180 (complicated-expression -> ID . ID template-declaration invoke-arguments .)


state 493

    (176) complicated-expression -> ID : ID template-declaration invoke-arguments .

    ;               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    [               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    .               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    LS              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    GR              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    TIMES           reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    =               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    PLUS            reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    MINUS           reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    DIVIDE          reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    MOD             reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    AND             reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    OR              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    XOR             reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    LSHIFT          reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    RSHIFT          reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    LE              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    GE              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    EE              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    NE              reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    PLUSEQ          reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    MINUSEQ         reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    TIMESEQ         reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    DIVIDEEQ        reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    MODEQ           reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    ANDEQ           reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    OREQ            reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    XOREQ           reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    LSHIFTEQ        reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    RSHIFTEQ        reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    }               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    ,               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    ]               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    )               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)
    {               reduce using rule 176 (complicated-expression -> ID : ID template-declaration invoke-arguments .)


state 494

    (123) variable-declaration -> complicated-type ID = ID ; .

    }               reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    ID              reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    UNSAFE          reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    [               reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    TIMES           reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    AND             reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    SIZEOF          reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    MINUS           reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    !               reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    (               reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    RETURN          reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    VAR             reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    IF              reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    WHILE           reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    CONST           reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    INT             reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    FLOAT           reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    STR             reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    BOOL            reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    CHAR            reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    {               reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)
    :               reduce using rule 123 (variable-declaration -> complicated-type ID = ID ; .)


state 495

    (125) variable-declaration -> complicated-type ID = complicated-expression ; .

    }               reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    ID              reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    UNSAFE          reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    [               reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    TIMES           reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    AND             reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    SIZEOF          reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    MINUS           reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    !               reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    (               reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    RETURN          reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    VAR             reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    IF              reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    WHILE           reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    CONST           reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    INT             reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    FLOAT           reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    STR             reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    BOOL            reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    CHAR            reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    {               reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)
    :               reduce using rule 125 (variable-declaration -> complicated-type ID = complicated-expression ; .)


state 496

    (177) complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .

    ;               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    [               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    .               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    LS              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    GR              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    TIMES           reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    =               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    PLUS            reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    MINUS           reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    DIVIDE          reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    MOD             reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    AND             reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    OR              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    XOR             reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    LSHIFT          reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    RSHIFT          reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    LE              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    GE              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    EE              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    NE              reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    PLUSEQ          reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    MINUSEQ         reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    TIMESEQ         reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    DIVIDEEQ        reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    MODEQ           reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    ANDEQ           reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    OREQ            reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    XOREQ           reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    LSHIFTEQ        reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    RSHIFTEQ        reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    }               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    ,               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    ]               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    )               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)
    {               reduce using rule 177 (complicated-expression -> package-complicated-name : ID template-declaration invoke-arguments .)


state 497

    (126) variable-declaration -> VAR ID = ID ; .

    }               reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    ID              reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    UNSAFE          reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    [               reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    TIMES           reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    AND             reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    SIZEOF          reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    MINUS           reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    !               reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    (               reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    RETURN          reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    VAR             reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    IF              reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    WHILE           reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    CONST           reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    INT             reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    FLOAT           reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    STR             reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    BOOL            reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    CHAR            reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    {               reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)
    :               reduce using rule 126 (variable-declaration -> VAR ID = ID ; .)


state 498

    (127) variable-declaration -> VAR ID = complicated-expression ; .

    }               reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    ID              reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    UNSAFE          reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    [               reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    TIMES           reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    AND             reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    SIZEOF          reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    MINUS           reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    !               reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    (               reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    RETURN          reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    VAR             reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    IF              reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    WHILE           reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    CONST           reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    INT             reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    FLOAT           reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    STR             reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    BOOL            reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    CHAR            reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    {               reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)
    :               reduce using rule 127 (variable-declaration -> VAR ID = complicated-expression ; .)


state 499

    (129) if-statement -> IF complicated-expression visibility-area ELSE visibility-area .

    }               reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    ID              reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    UNSAFE          reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    [               reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    TIMES           reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    AND             reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    SIZEOF          reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    MINUS           reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    !               reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    (               reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    RETURN          reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    VAR             reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    IF              reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    WHILE           reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    CONST           reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    INT             reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    FLOAT           reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    STR             reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    BOOL            reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    CHAR            reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    {               reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)
    :               reduce using rule 129 (if-statement -> IF complicated-expression visibility-area ELSE visibility-area .)


state 500

    (130) if-statement -> IF complicated-expression visibility-area ELSE if-statement .

    }               reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    ID              reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    UNSAFE          reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    [               reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    TIMES           reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    AND             reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    SIZEOF          reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    MINUS           reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    !               reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    (               reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    RETURN          reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    VAR             reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    IF              reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    WHILE           reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    CONST           reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    INT             reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    FLOAT           reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    STR             reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    BOOL            reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    CHAR            reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    {               reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)
    :               reduce using rule 130 (if-statement -> IF complicated-expression visibility-area ELSE if-statement .)


state 501

    (132) if-statement -> IF ID visibility-area ELSE visibility-area .

    }               reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    ID              reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    UNSAFE          reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    [               reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    TIMES           reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    AND             reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    SIZEOF          reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    MINUS           reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    !               reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    (               reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    RETURN          reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    VAR             reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    IF              reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    WHILE           reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    CONST           reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    INT             reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    FLOAT           reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    STR             reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    BOOL            reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    CHAR            reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    {               reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)
    :               reduce using rule 132 (if-statement -> IF ID visibility-area ELSE visibility-area .)


state 502

    (133) if-statement -> IF ID visibility-area ELSE if-statement .

    }               reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    ID              reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    UNSAFE          reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    [               reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    TIMES           reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    AND             reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    SIZEOF          reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    MINUS           reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    !               reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    (               reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    RETURN          reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    VAR             reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    IF              reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    WHILE           reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    CONST           reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    INT             reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    FLOAT           reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    STR             reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    BOOL            reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    CHAR            reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    {               reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)
    :               reduce using rule 133 (if-statement -> IF ID visibility-area ELSE if-statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USING in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for UNSAFE in state 103 resolved as shift
WARNING: shift/reduce conflict for [ in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for ! in state 103 resolved as shift
WARNING: shift/reduce conflict for ( in state 103 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 103 resolved as shift
WARNING: shift/reduce conflict for VAR in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for CONST in state 103 resolved as shift
WARNING: shift/reduce conflict for INT in state 103 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 103 resolved as shift
WARNING: shift/reduce conflict for STR in state 103 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 103 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 103 resolved as shift
WARNING: shift/reduce conflict for { in state 103 resolved as shift
WARNING: shift/reduce conflict for [ in state 290 resolved as shift
WARNING: shift/reduce conflict for . in state 290 resolved as shift
WARNING: shift/reduce conflict for LS in state 290 resolved as shift
WARNING: shift/reduce conflict for GR in state 290 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 290 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 290 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 290 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 290 resolved as shift
WARNING: shift/reduce conflict for MOD in state 290 resolved as shift
WARNING: shift/reduce conflict for AND in state 290 resolved as shift
WARNING: shift/reduce conflict for OR in state 290 resolved as shift
WARNING: shift/reduce conflict for XOR in state 290 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 290 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 290 resolved as shift
WARNING: shift/reduce conflict for LE in state 290 resolved as shift
WARNING: shift/reduce conflict for GE in state 290 resolved as shift
WARNING: shift/reduce conflict for EE in state 290 resolved as shift
WARNING: shift/reduce conflict for NE in state 290 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 290 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 290 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 290 resolved as shift
WARNING: shift/reduce conflict for { in state 300 resolved as shift
WARNING: shift/reduce conflict for [ in state 300 resolved as shift
WARNING: shift/reduce conflict for . in state 300 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 300 resolved as shift
WARNING: shift/reduce conflict for LS in state 300 resolved as shift
WARNING: shift/reduce conflict for GR in state 300 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 300 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 300 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 300 resolved as shift
WARNING: shift/reduce conflict for MOD in state 300 resolved as shift
WARNING: shift/reduce conflict for AND in state 300 resolved as shift
WARNING: shift/reduce conflict for OR in state 300 resolved as shift
WARNING: shift/reduce conflict for XOR in state 300 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 300 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 300 resolved as shift
WARNING: shift/reduce conflict for LE in state 300 resolved as shift
WARNING: shift/reduce conflict for GE in state 300 resolved as shift
WARNING: shift/reduce conflict for EE in state 300 resolved as shift
WARNING: shift/reduce conflict for NE in state 300 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 300 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 300 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 300 resolved as shift
WARNING: shift/reduce conflict for { in state 302 resolved as shift
WARNING: shift/reduce conflict for [ in state 302 resolved as shift
WARNING: shift/reduce conflict for . in state 302 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 302 resolved as shift
WARNING: shift/reduce conflict for LS in state 302 resolved as shift
WARNING: shift/reduce conflict for GR in state 302 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 302 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 302 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 302 resolved as shift
WARNING: shift/reduce conflict for MOD in state 302 resolved as shift
WARNING: shift/reduce conflict for AND in state 302 resolved as shift
WARNING: shift/reduce conflict for OR in state 302 resolved as shift
WARNING: shift/reduce conflict for XOR in state 302 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 302 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 302 resolved as shift
WARNING: shift/reduce conflict for LE in state 302 resolved as shift
WARNING: shift/reduce conflict for GE in state 302 resolved as shift
WARNING: shift/reduce conflict for EE in state 302 resolved as shift
WARNING: shift/reduce conflict for NE in state 302 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 302 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 302 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 302 resolved as shift
WARNING: shift/reduce conflict for [ in state 354 resolved as shift
WARNING: shift/reduce conflict for . in state 354 resolved as shift
WARNING: shift/reduce conflict for LS in state 354 resolved as shift
WARNING: shift/reduce conflict for GR in state 354 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 354 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 354 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 354 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 354 resolved as shift
WARNING: shift/reduce conflict for MOD in state 354 resolved as shift
WARNING: shift/reduce conflict for AND in state 354 resolved as shift
WARNING: shift/reduce conflict for OR in state 354 resolved as shift
WARNING: shift/reduce conflict for XOR in state 354 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 354 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 354 resolved as shift
WARNING: shift/reduce conflict for LE in state 354 resolved as shift
WARNING: shift/reduce conflict for GE in state 354 resolved as shift
WARNING: shift/reduce conflict for EE in state 354 resolved as shift
WARNING: shift/reduce conflict for NE in state 354 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 354 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 354 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 354 resolved as shift
WARNING: shift/reduce conflict for { in state 355 resolved as shift
WARNING: shift/reduce conflict for [ in state 355 resolved as shift
WARNING: shift/reduce conflict for . in state 355 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 355 resolved as shift
WARNING: shift/reduce conflict for LS in state 355 resolved as shift
WARNING: shift/reduce conflict for GR in state 355 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 355 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 355 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 355 resolved as shift
WARNING: shift/reduce conflict for MOD in state 355 resolved as shift
WARNING: shift/reduce conflict for AND in state 355 resolved as shift
WARNING: shift/reduce conflict for OR in state 355 resolved as shift
WARNING: shift/reduce conflict for XOR in state 355 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 355 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 355 resolved as shift
WARNING: shift/reduce conflict for LE in state 355 resolved as shift
WARNING: shift/reduce conflict for GE in state 355 resolved as shift
WARNING: shift/reduce conflict for EE in state 355 resolved as shift
WARNING: shift/reduce conflict for NE in state 355 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 355 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 355 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 355 resolved as shift
WARNING: shift/reduce conflict for { in state 357 resolved as shift
WARNING: shift/reduce conflict for [ in state 357 resolved as shift
WARNING: shift/reduce conflict for . in state 357 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 357 resolved as shift
WARNING: shift/reduce conflict for LS in state 357 resolved as shift
WARNING: shift/reduce conflict for GR in state 357 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 357 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 357 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 357 resolved as shift
WARNING: shift/reduce conflict for MOD in state 357 resolved as shift
WARNING: shift/reduce conflict for AND in state 357 resolved as shift
WARNING: shift/reduce conflict for OR in state 357 resolved as shift
WARNING: shift/reduce conflict for XOR in state 357 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 357 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 357 resolved as shift
WARNING: shift/reduce conflict for LE in state 357 resolved as shift
WARNING: shift/reduce conflict for GE in state 357 resolved as shift
WARNING: shift/reduce conflict for EE in state 357 resolved as shift
WARNING: shift/reduce conflict for NE in state 357 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 357 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 357 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 357 resolved as shift
WARNING: shift/reduce conflict for { in state 359 resolved as shift
WARNING: shift/reduce conflict for [ in state 359 resolved as shift
WARNING: shift/reduce conflict for . in state 359 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 359 resolved as shift
WARNING: shift/reduce conflict for LS in state 359 resolved as shift
WARNING: shift/reduce conflict for GR in state 359 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 359 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 359 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 359 resolved as shift
WARNING: shift/reduce conflict for MOD in state 359 resolved as shift
WARNING: shift/reduce conflict for AND in state 359 resolved as shift
WARNING: shift/reduce conflict for OR in state 359 resolved as shift
WARNING: shift/reduce conflict for XOR in state 359 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 359 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 359 resolved as shift
WARNING: shift/reduce conflict for LE in state 359 resolved as shift
WARNING: shift/reduce conflict for GE in state 359 resolved as shift
WARNING: shift/reduce conflict for EE in state 359 resolved as shift
WARNING: shift/reduce conflict for NE in state 359 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 359 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 359 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 359 resolved as shift
WARNING: shift/reduce conflict for { in state 361 resolved as shift
WARNING: shift/reduce conflict for [ in state 361 resolved as shift
WARNING: shift/reduce conflict for . in state 361 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 361 resolved as shift
WARNING: shift/reduce conflict for LS in state 361 resolved as shift
WARNING: shift/reduce conflict for GR in state 361 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 361 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 361 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 361 resolved as shift
WARNING: shift/reduce conflict for MOD in state 361 resolved as shift
WARNING: shift/reduce conflict for AND in state 361 resolved as shift
WARNING: shift/reduce conflict for OR in state 361 resolved as shift
WARNING: shift/reduce conflict for XOR in state 361 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 361 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 361 resolved as shift
WARNING: shift/reduce conflict for LE in state 361 resolved as shift
WARNING: shift/reduce conflict for GE in state 361 resolved as shift
WARNING: shift/reduce conflict for EE in state 361 resolved as shift
WARNING: shift/reduce conflict for NE in state 361 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 361 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 361 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 361 resolved as shift
WARNING: shift/reduce conflict for [ in state 362 resolved as shift
WARNING: shift/reduce conflict for . in state 362 resolved as shift
WARNING: shift/reduce conflict for LS in state 362 resolved as shift
WARNING: shift/reduce conflict for GR in state 362 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 362 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 362 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 362 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 362 resolved as shift
WARNING: shift/reduce conflict for MOD in state 362 resolved as shift
WARNING: shift/reduce conflict for AND in state 362 resolved as shift
WARNING: shift/reduce conflict for OR in state 362 resolved as shift
WARNING: shift/reduce conflict for XOR in state 362 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 362 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 362 resolved as shift
WARNING: shift/reduce conflict for LE in state 362 resolved as shift
WARNING: shift/reduce conflict for GE in state 362 resolved as shift
WARNING: shift/reduce conflict for EE in state 362 resolved as shift
WARNING: shift/reduce conflict for NE in state 362 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 362 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 362 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 362 resolved as shift
WARNING: shift/reduce conflict for { in state 363 resolved as shift
WARNING: shift/reduce conflict for [ in state 363 resolved as shift
WARNING: shift/reduce conflict for . in state 363 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 363 resolved as shift
WARNING: shift/reduce conflict for LS in state 363 resolved as shift
WARNING: shift/reduce conflict for GR in state 363 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 363 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 363 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 363 resolved as shift
WARNING: shift/reduce conflict for MOD in state 363 resolved as shift
WARNING: shift/reduce conflict for AND in state 363 resolved as shift
WARNING: shift/reduce conflict for OR in state 363 resolved as shift
WARNING: shift/reduce conflict for XOR in state 363 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 363 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 363 resolved as shift
WARNING: shift/reduce conflict for LE in state 363 resolved as shift
WARNING: shift/reduce conflict for GE in state 363 resolved as shift
WARNING: shift/reduce conflict for EE in state 363 resolved as shift
WARNING: shift/reduce conflict for NE in state 363 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 363 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 363 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 363 resolved as shift
WARNING: shift/reduce conflict for { in state 377 resolved as shift
WARNING: shift/reduce conflict for [ in state 377 resolved as shift
WARNING: shift/reduce conflict for . in state 377 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 377 resolved as shift
WARNING: shift/reduce conflict for LS in state 377 resolved as shift
WARNING: shift/reduce conflict for GR in state 377 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 377 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 377 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 377 resolved as shift
WARNING: shift/reduce conflict for MOD in state 377 resolved as shift
WARNING: shift/reduce conflict for AND in state 377 resolved as shift
WARNING: shift/reduce conflict for OR in state 377 resolved as shift
WARNING: shift/reduce conflict for XOR in state 377 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 377 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 377 resolved as shift
WARNING: shift/reduce conflict for LE in state 377 resolved as shift
WARNING: shift/reduce conflict for GE in state 377 resolved as shift
WARNING: shift/reduce conflict for EE in state 377 resolved as shift
WARNING: shift/reduce conflict for NE in state 377 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 377 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 377 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 377 resolved as shift
WARNING: shift/reduce conflict for [ in state 378 resolved as shift
WARNING: shift/reduce conflict for . in state 378 resolved as shift
WARNING: shift/reduce conflict for LS in state 378 resolved as shift
WARNING: shift/reduce conflict for GR in state 378 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 378 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 378 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 378 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 378 resolved as shift
WARNING: shift/reduce conflict for MOD in state 378 resolved as shift
WARNING: shift/reduce conflict for AND in state 378 resolved as shift
WARNING: shift/reduce conflict for OR in state 378 resolved as shift
WARNING: shift/reduce conflict for XOR in state 378 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 378 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 378 resolved as shift
WARNING: shift/reduce conflict for LE in state 378 resolved as shift
WARNING: shift/reduce conflict for GE in state 378 resolved as shift
WARNING: shift/reduce conflict for EE in state 378 resolved as shift
WARNING: shift/reduce conflict for NE in state 378 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 378 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 378 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 378 resolved as shift
WARNING: shift/reduce conflict for { in state 379 resolved as shift
WARNING: shift/reduce conflict for [ in state 379 resolved as shift
WARNING: shift/reduce conflict for . in state 379 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 379 resolved as shift
WARNING: shift/reduce conflict for LS in state 379 resolved as shift
WARNING: shift/reduce conflict for GR in state 379 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 379 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 379 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 379 resolved as shift
WARNING: shift/reduce conflict for MOD in state 379 resolved as shift
WARNING: shift/reduce conflict for AND in state 379 resolved as shift
WARNING: shift/reduce conflict for OR in state 379 resolved as shift
WARNING: shift/reduce conflict for XOR in state 379 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 379 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 379 resolved as shift
WARNING: shift/reduce conflict for LE in state 379 resolved as shift
WARNING: shift/reduce conflict for GE in state 379 resolved as shift
WARNING: shift/reduce conflict for EE in state 379 resolved as shift
WARNING: shift/reduce conflict for NE in state 379 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 379 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 379 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 379 resolved as shift
WARNING: shift/reduce conflict for GR in state 382 resolved as shift
WARNING: shift/reduce conflict for { in state 382 resolved as shift
WARNING: shift/reduce conflict for [ in state 382 resolved as shift
WARNING: shift/reduce conflict for . in state 382 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 382 resolved as shift
WARNING: shift/reduce conflict for LS in state 382 resolved as shift
WARNING: shift/reduce conflict for , in state 382 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 382 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 382 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 382 resolved as shift
WARNING: shift/reduce conflict for MOD in state 382 resolved as shift
WARNING: shift/reduce conflict for AND in state 382 resolved as shift
WARNING: shift/reduce conflict for OR in state 382 resolved as shift
WARNING: shift/reduce conflict for XOR in state 382 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 382 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 382 resolved as shift
WARNING: shift/reduce conflict for LE in state 382 resolved as shift
WARNING: shift/reduce conflict for GE in state 382 resolved as shift
WARNING: shift/reduce conflict for EE in state 382 resolved as shift
WARNING: shift/reduce conflict for NE in state 382 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 382 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 382 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 382 resolved as shift
WARNING: shift/reduce conflict for { in state 385 resolved as shift
WARNING: shift/reduce conflict for [ in state 385 resolved as shift
WARNING: shift/reduce conflict for . in state 385 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 385 resolved as shift
WARNING: shift/reduce conflict for LS in state 385 resolved as shift
WARNING: shift/reduce conflict for GR in state 385 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 385 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 385 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 385 resolved as shift
WARNING: shift/reduce conflict for MOD in state 385 resolved as shift
WARNING: shift/reduce conflict for AND in state 385 resolved as shift
WARNING: shift/reduce conflict for OR in state 385 resolved as shift
WARNING: shift/reduce conflict for XOR in state 385 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 385 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 385 resolved as shift
WARNING: shift/reduce conflict for LE in state 385 resolved as shift
WARNING: shift/reduce conflict for GE in state 385 resolved as shift
WARNING: shift/reduce conflict for EE in state 385 resolved as shift
WARNING: shift/reduce conflict for NE in state 385 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 385 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 385 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 385 resolved as shift
WARNING: shift/reduce conflict for { in state 387 resolved as shift
WARNING: shift/reduce conflict for [ in state 387 resolved as shift
WARNING: shift/reduce conflict for . in state 387 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 387 resolved as shift
WARNING: shift/reduce conflict for LS in state 387 resolved as shift
WARNING: shift/reduce conflict for GR in state 387 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 387 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 387 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 387 resolved as shift
WARNING: shift/reduce conflict for MOD in state 387 resolved as shift
WARNING: shift/reduce conflict for AND in state 387 resolved as shift
WARNING: shift/reduce conflict for OR in state 387 resolved as shift
WARNING: shift/reduce conflict for XOR in state 387 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 387 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 387 resolved as shift
WARNING: shift/reduce conflict for LE in state 387 resolved as shift
WARNING: shift/reduce conflict for GE in state 387 resolved as shift
WARNING: shift/reduce conflict for EE in state 387 resolved as shift
WARNING: shift/reduce conflict for NE in state 387 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 387 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 387 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 387 resolved as shift
WARNING: shift/reduce conflict for [ in state 388 resolved as shift
WARNING: shift/reduce conflict for . in state 388 resolved as shift
WARNING: shift/reduce conflict for LS in state 388 resolved as shift
WARNING: shift/reduce conflict for GR in state 388 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 388 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 388 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 388 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 388 resolved as shift
WARNING: shift/reduce conflict for MOD in state 388 resolved as shift
WARNING: shift/reduce conflict for AND in state 388 resolved as shift
WARNING: shift/reduce conflict for OR in state 388 resolved as shift
WARNING: shift/reduce conflict for XOR in state 388 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 388 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 388 resolved as shift
WARNING: shift/reduce conflict for LE in state 388 resolved as shift
WARNING: shift/reduce conflict for GE in state 388 resolved as shift
WARNING: shift/reduce conflict for EE in state 388 resolved as shift
WARNING: shift/reduce conflict for NE in state 388 resolved as shift
WARNING: shift/reduce conflict for PLUSEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for MINUSEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for TIMESEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for DIVIDEEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for ANDEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for OREQ in state 388 resolved as shift
WARNING: shift/reduce conflict for XOREQ in state 388 resolved as shift
WARNING: shift/reduce conflict for LSHIFTEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for RSHIFTEQ in state 388 resolved as shift
WARNING: shift/reduce conflict for [ in state 409 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 409 resolved as shift
WARNING: shift/reduce conflict for AND in state 409 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 409 resolved as shift
WARNING: shift/reduce conflict for } in state 418 resolved as shift
WARNING: shift/reduce conflict for ID in state 418 resolved as shift
WARNING: shift/reduce conflict for UNSAFE in state 418 resolved as shift
WARNING: shift/reduce conflict for [ in state 418 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 418 resolved as shift
WARNING: shift/reduce conflict for AND in state 418 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 418 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 418 resolved as shift
WARNING: shift/reduce conflict for ! in state 418 resolved as shift
WARNING: shift/reduce conflict for ( in state 418 resolved as shift
WARNING: shift/reduce conflict for CONST in state 418 resolved as shift
WARNING: shift/reduce conflict for INT in state 418 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 418 resolved as shift
WARNING: shift/reduce conflict for STR in state 418 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 418 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 418 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 418 resolved as shift
WARNING: shift/reduce conflict for VAR in state 418 resolved as shift
WARNING: shift/reduce conflict for IF in state 418 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 418 resolved as shift
WARNING: shift/reduce conflict for { in state 418 resolved as shift
WARNING: reduce/reduce conflict in state 103 resolved using rule (package-complicated-name -> <empty>)
WARNING: rejected rule (expression-lines -> <empty>) in state 103
WARNING: reduce/reduce conflict in state 418 resolved using rule (package-complicated-name -> <empty>)
WARNING: rejected rule (expression-lines -> <empty>) in state 418
